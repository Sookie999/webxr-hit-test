import {
  FlowGraphBlock,
  RichTypeAny,
  RichTypeBoolean
} from "./chunk-4JKITRJZ.js";
import "./chunk-TROWLGN2.js";
import "./chunk-7XY2OFQB.js";
import "./chunk-SAE7R3H2.js";
import {
  RegisterClass
} from "./chunk-MIVJKRRS.js";
import "./chunk-NTQN2BXV.js";
import "./chunk-DDXCXL26.js";
import "./chunk-GCT36VBF.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphConditionalDataBlock.js
var FlowGraphConditionalDataBlock = class extends FlowGraphBlock {
  /**
   * Creates a new instance of the block
   * @param config optional configuration for this block
   */
  constructor(config) {
    super(config);
    this.condition = this.registerDataInput("condition", RichTypeBoolean);
    this.onTrue = this.registerDataInput("onTrue", RichTypeAny);
    this.onFalse = this.registerDataInput("onFalse", RichTypeAny);
    this.output = this.registerDataOutput("output", RichTypeAny);
  }
  /**
   * @internal
   */
  _updateOutputs(context) {
    const condition = this.condition.getValue(context);
    this.output.setValue(condition ? this.onTrue.getValue(context) : this.onFalse.getValue(context), context);
  }
  /**
   * Gets the class name of this block
   * @returns the class name
   */
  getClassName() {
    return "FlowGraphConditionalBlock";
  }
};
RegisterClass("FlowGraphConditionalBlock", FlowGraphConditionalDataBlock);
export {
  FlowGraphConditionalDataBlock
};
//# sourceMappingURL=flowGraphConditionalDataBlock-BF5HFMEE.js.map
