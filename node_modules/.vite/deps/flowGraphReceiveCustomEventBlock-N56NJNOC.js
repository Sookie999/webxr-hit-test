import {
  FlowGraphCoordinator
} from "./chunk-IY53KDNX.js";
import "./chunk-44AHU22M.js";
import {
  FlowGraphEventBlock
} from "./chunk-SF235G35.js";
import "./chunk-3F6WI3CQ.js";
import "./chunk-AD2B6VDG.js";
import "./chunk-5JDKVHAP.js";
import "./chunk-7AIW3QXJ.js";
import "./chunk-4JKITRJZ.js";
import "./chunk-MVDNDG2U.js";
import {
  Tools
} from "./chunk-SQLRS6BV.js";
import "./chunk-4OJANHPM.js";
import "./chunk-ZRPHACZ5.js";
import "./chunk-TROWLGN2.js";
import "./chunk-T7C6CI7L.js";
import "./chunk-2ZEUD233.js";
import "./chunk-7XY2OFQB.js";
import "./chunk-I4NFOKIT.js";
import "./chunk-FCN7ZBEY.js";
import "./chunk-OWCZTH5B.js";
import "./chunk-CZRRPEW3.js";
import "./chunk-J4DZ2XK7.js";
import "./chunk-FX6MN5HL.js";
import "./chunk-SAE7R3H2.js";
import {
  RegisterClass
} from "./chunk-MIVJKRRS.js";
import "./chunk-NTQN2BXV.js";
import "./chunk-DDXCXL26.js";
import "./chunk-GCT36VBF.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Event/flowGraphReceiveCustomEventBlock.js
var FlowGraphReceiveCustomEventBlock = class extends FlowGraphEventBlock {
  constructor(config) {
    super(config);
    this.config = config;
    this.initPriority = 1;
    for (const key in this.config.eventData) {
      this.registerDataOutput(key, this.config.eventData[key].type);
    }
  }
  _preparePendingTasks(context) {
    const observable = context.configuration.coordinator.getCustomEventObservable(this.config.eventId);
    if (observable && observable.hasObservers() && observable.observers.length > FlowGraphCoordinator.MaxEventsPerType) {
      this._reportError(context, `FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${FlowGraphCoordinator.MaxEventsPerType}.`);
      return;
    }
    const eventObserver = observable.add((eventData) => {
      const keys = Object.keys(eventData);
      for (const key of keys) {
        this.getDataOutput(key)?.setValue(eventData[key], context);
      }
      this._execute(context);
    });
    context._setExecutionVariable(this, "_eventObserver", eventObserver);
  }
  _cancelPendingTasks(context) {
    const observable = context.configuration.coordinator.getCustomEventObservable(this.config.eventId);
    if (observable) {
      const eventObserver = context._getExecutionVariable(this, "_eventObserver", null);
      observable.remove(eventObserver);
    } else {
      Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`);
    }
  }
  _executeEvent(_context, _payload) {
    return true;
  }
  /**
   * @returns class name of the block.
   */
  getClassName() {
    return "FlowGraphReceiveCustomEventBlock";
  }
};
RegisterClass("FlowGraphReceiveCustomEventBlock", FlowGraphReceiveCustomEventBlock);
export {
  FlowGraphReceiveCustomEventBlock
};
//# sourceMappingURL=flowGraphReceiveCustomEventBlock-N56NJNOC.js.map
