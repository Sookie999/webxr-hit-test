import {
  getNumericValue
} from "./chunk-3F6WI3CQ.js";
import {
  FlowGraphBlock,
  FlowGraphInteger,
  RichTypeAny
} from "./chunk-4JKITRJZ.js";
import "./chunk-TROWLGN2.js";
import "./chunk-7XY2OFQB.js";
import "./chunk-SAE7R3H2.js";
import {
  RegisterClass
} from "./chunk-MIVJKRRS.js";
import "./chunk-NTQN2BXV.js";
import "./chunk-DDXCXL26.js";
import "./chunk-GCT36VBF.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/Utils/flowGraphArrayIndexBlock.js
var FlowGraphArrayIndexBlock = class extends FlowGraphBlock {
  /**
   * Construct a FlowGraphArrayIndexBlock.
   * @param config construction parameters
   */
  constructor(config) {
    super(config);
    this.config = config;
    this.array = this.registerDataInput("array", RichTypeAny);
    this.index = this.registerDataInput("index", RichTypeAny, new FlowGraphInteger(-1));
    this.value = this.registerDataOutput("value", RichTypeAny);
  }
  /**
   * @internal
   */
  _updateOutputs(context) {
    const array = this.array.getValue(context);
    const index = getNumericValue(this.index.getValue(context));
    if (array && index >= 0 && index < array.length) {
      this.value.setValue(array[index], context);
    } else {
      this.value.setValue(null, context);
    }
  }
  /**
   * Serializes this block
   * @param serializationObject the object to serialize to
   */
  serialize(serializationObject) {
    super.serialize(serializationObject);
  }
  getClassName() {
    return "FlowGraphArrayIndexBlock";
  }
};
RegisterClass("FlowGraphArrayIndexBlock", FlowGraphArrayIndexBlock);
export {
  FlowGraphArrayIndexBlock
};
//# sourceMappingURL=flowGraphArrayIndexBlock-D2DPHKDR.js.map
