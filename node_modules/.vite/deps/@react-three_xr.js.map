{
  "version": 3,
  "sources": ["../../@react-three/xr/dist/space.js", "../../@pmndrs/xr/dist/controller/gamepad.js", "../../@pmndrs/xr/dist/index.js", "../../@pmndrs/xr/dist/hand/pose.js", "../../@pmndrs/xr/dist/hand/model.js", "../../@pmndrs/xr/dist/hand/state.js", "../../@pmndrs/xr/dist/hand/visual.js", "../../@pmndrs/xr/dist/input.js", "../../@pmndrs/xr/dist/visible.js", "../../@pmndrs/xr/dist/pointer/cursor.js", "../../@pmndrs/xr/dist/pointer/ray.js", "../../@pmndrs/xr/dist/pointer/event.js", "../../@pmndrs/xr/dist/pointer/default.js", "../../@pmndrs/xr/dist/vanilla/space.js", "../../@pmndrs/xr/dist/space.js", "../../@pmndrs/xr/dist/vanilla/elements.js", "../../@pmndrs/xr/dist/store.js", "../../@pmndrs/xr/node_modules/zustand/esm/vanilla.mjs", "../../@pmndrs/xr/dist/misc.js", "../../@pmndrs/xr/dist/init.js", "../../@pmndrs/xr/dist/vanilla/default.js", "../../@pmndrs/xr/dist/vanilla/hand.js", "../../@pmndrs/xr/dist/vanilla/pointer.js", "../../@pmndrs/xr/dist/vanilla/controller.js", "../../@pmndrs/xr/dist/controller/model.js", "../../@pmndrs/xr/dist/controller/visual.js", "../../@pmndrs/xr/dist/vanilla/mesh.js", "../../@pmndrs/xr/dist/mesh.js", "../../@pmndrs/xr/dist/vanilla/plane.js", "../../@pmndrs/xr/dist/plane.js", "../../@pmndrs/xr/dist/vanilla/origin.js", "../../@pmndrs/xr/dist/vanilla/layer.js", "../../@pmndrs/xr/dist/layer.js", "../../@pmndrs/xr/dist/utils.js", "../../@pmndrs/xr/dist/teleport.js", "../../@pmndrs/xr/dist/hit-test.js", "../../@pmndrs/xr/dist/anchor.js", "../../@pmndrs/xr/dist/controller-locomotion.js", "../../@pmndrs/xr/dist/controller/utils.js", "../../@pmndrs/xr/dist/controller/layout.js", "../../@pmndrs/xr/dist/controller/state.js", "../../@react-three/xr/dist/contexts.js", "../../@react-three/xr/dist/input.js", "../../@react-three/xr/dist/xr.js", "../../@react-three/xr/node_modules/zustand/esm/vanilla.mjs", "../../@react-three/xr/node_modules/zustand/esm/index.mjs", "../../@react-three/xr/dist/elements.js", "../../@react-three/xr/node_modules/zustand/esm/shallow.mjs", "../../@react-three/xr/dist/default.js", "../../@react-three/xr/dist/controller.js", "../../@react-three/xr/dist/hand.js", "../../@react-three/xr/dist/pointer.js", "../../@react-three/xr/dist/teleport.js", "../../@react-three/xr/dist/hooks.js", "../../@react-three/xr/dist/utils.js", "../../@react-three/xr/dist/mesh.js", "../../@react-three/xr/dist/plane.js", "../../@react-three/xr/dist/guard/facing-camera.js", "../../@react-three/xr/dist/guard/session-mode.js", "../../@react-three/xr/dist/guard/session-supported.js", "../../@react-three/xr/dist/guard/focus.js", "../../@react-three/xr/dist/origin.js", "../../@react-three/xr/dist/hit-test.js", "../../@react-three/xr/dist/anchor.js", "../../@react-three/xr/dist/dom-overlay.js", "../../@react-three/xr/dist/layer.js", "../../@react-three/xr/dist/controller-locomotion.js", "../../@react-three/xr/dist/events.js", "../../@react-three/xr/dist/deprecated/button.js", "../../@react-three/xr/dist/deprecated/hooks.js", "../../@react-three/xr/dist/deprecated/interactive.js", "../../@react-three/xr/dist/deprecated/ray-grab.js"],
  "sourcesContent": ["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createGetXRSpaceMatrix } from '@pmndrs/xr/internals';\nimport { useFrame } from '@react-three/fiber';\nimport { forwardRef, useCallback, useContext, useEffect, useImperativeHandle, useMemo, useRef, useState, } from 'react';\nimport { xrSpaceContext } from './contexts.js';\nimport { useXRInputSourceStateContext } from './input.js';\nimport { useXR } from './xr.js';\n/**\n * Component that puts its children in the provided XRSpace (or reference space type)\n *\n * @param props\n * #### `space` - [XRSpaceType](https://developer.mozilla.org/en-US/docs/Web/API/XRSpace) | [XRSpaceType](https://pmndrs.github.io/xr/docs/api/space.XRSpaceType)\n * #### `children` - [ReactNode](https://reactjs.org/docs/introducing-jsx.html#react-jsx)\n * @function\n */\nexport const XRSpace = forwardRef(({ space, children }, ref) => {\n    const internalRef = useRef(null);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const resolvedSpace = typeof space === 'string' ? useXRSpace(space) : space;\n    useImperativeHandle(ref, () => internalRef.current, []);\n    useApplyXRSpaceMatrix(internalRef, resolvedSpace);\n    const setRef = useCallback((group) => {\n        if (group != null) {\n            group.transformReady = false;\n            group.visible = false;\n        }\n        internalRef.current = group;\n    }, []);\n    return (_jsx(\"group\", { xrSpace: resolvedSpace, matrixAutoUpdate: false, ref: setRef, children: resolvedSpace && _jsx(xrSpaceContext.Provider, { value: resolvedSpace, children: children }) }));\n});\nexport function useXRSpace(type) {\n    switch (type) {\n        case 'grip-space':\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            return useXRInputSourceStateContext().inputSource.gripSpace;\n        case 'target-ray-space':\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            return useXRInputSourceStateContext().inputSource.targetRaySpace;\n        case 'wrist':\n        case 'thumb-metacarpal':\n        case 'thumb-phalanx-proximal':\n        case 'thumb-phalanx-distal':\n        case 'thumb-tip':\n        case 'index-finger-metacarpal':\n        case 'index-finger-phalanx-proximal':\n        case 'index-finger-phalanx-intermediate':\n        case 'index-finger-phalanx-distal':\n        case 'index-finger-tip':\n        case 'middle-finger-metacarpal':\n        case 'middle-finger-phalanx-proximal':\n        case 'middle-finger-phalanx-intermediate':\n        case 'middle-finger-phalanx-distal':\n        case 'middle-finger-tip':\n        case 'ring-finger-metacarpal':\n        case 'ring-finger-phalanx-proximal':\n        case 'ring-finger-phalanx-intermediate':\n        case 'ring-finger-phalanx-distal':\n        case 'ring-finger-tip':\n        case 'pinky-finger-metacarpal':\n        case 'pinky-finger-phalanx-proximal':\n        case 'pinky-finger-phalanx-intermediate':\n        case 'pinky-finger-phalanx-distal':\n        case 'pinky-finger-tip':\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            return useXRInputSourceStateContext('hand').inputSource.hand.get(type);\n        case 'root':\n        case 'hips':\n        case 'spine-lower':\n        case 'spine-middle':\n        case 'spine-upper':\n        case 'chest':\n        case 'neck':\n        case 'head':\n        case 'left-shoulder':\n        case 'left-scapula':\n        case 'left-arm-upper':\n        case 'left-arm-lower':\n        case 'left-hand-wrist-twist':\n        case 'right-shoulder':\n        case 'right-scapula':\n        case 'right-arm-upper':\n        case 'right-arm-lower':\n        case 'right-hand-wrist-twist':\n        case 'left-hand-palm':\n        case 'left-hand-wrist':\n        case 'left-hand-thumb-metacarpal':\n        case 'left-hand-thumb-phalanx-proximal':\n        case 'left-hand-thumb-phalanx-distal':\n        case 'left-hand-thumb-tip':\n        case 'left-hand-index-metacarpal':\n        case 'left-hand-index-phalanx-proximal':\n        case 'left-hand-index-phalanx-intermediate':\n        case 'left-hand-index-phalanx-distal':\n        case 'left-hand-index-tip':\n        case 'left-hand-middle-metacarpal':\n        case 'left-hand-middle-phalanx-proximal':\n        case 'left-hand-middle-phalanx-intermediate':\n        case 'left-hand-middle-phalanx-distal':\n        case 'left-hand-middle-tip':\n        case 'left-hand-ring-metacarpal':\n        case 'left-hand-ring-phalanx-proximal':\n        case 'left-hand-ring-phalanx-intermediate':\n        case 'left-hand-ring-phalanx-distal':\n        case 'left-hand-ring-tip':\n        case 'left-hand-little-metacarpal':\n        case 'left-hand-little-phalanx-proximal':\n        case 'left-hand-little-phalanx-intermediate':\n        case 'left-hand-little-phalanx-distal':\n        case 'left-hand-little-tip':\n        case 'right-hand-palm':\n        case 'right-hand-wrist':\n        case 'right-hand-thumb-metacarpal':\n        case 'right-hand-thumb-phalanx-proximal':\n        case 'right-hand-thumb-phalanx-distal':\n        case 'right-hand-thumb-tip':\n        case 'right-hand-index-metacarpal':\n        case 'right-hand-index-phalanx-proximal':\n        case 'right-hand-index-phalanx-intermediate':\n        case 'right-hand-index-phalanx-distal':\n        case 'right-hand-index-tip':\n        case 'right-hand-middle-metacarpal':\n        case 'right-hand-middle-phalanx-proximal':\n        case 'right-hand-middle-phalanx-intermediate':\n        case 'right-hand-middle-phalanx-distal':\n        case 'right-hand-middle-tip':\n        case 'right-hand-ring-metacarpal':\n        case 'right-hand-ring-phalanx-proximal':\n        case 'right-hand-ring-phalanx-intermediate':\n        case 'right-hand-ring-phalanx-distal':\n        case 'right-hand-ring-tip':\n        case 'right-hand-little-metacarpal':\n        case 'right-hand-little-phalanx-proximal':\n        case 'right-hand-little-phalanx-intermediate':\n        case 'right-hand-little-phalanx-distal':\n        case 'right-hand-little-tip':\n        case 'left-upper-leg':\n        case 'left-lower-leg':\n        case 'left-foot-ankle-twist':\n        case 'left-foot-ankle':\n        case 'left-foot-subtalar':\n        case 'left-foot-transverse':\n        case 'left-foot-ball':\n        case 'right-upper-leg':\n        case 'right-lower-leg':\n        case 'right-foot-ankle-twist':\n        case 'right-foot-ankle':\n        case 'right-foot-subtalar':\n        case 'right-foot-transverse':\n        case 'right-foot-ball':\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            return useXR((state) => state.body)?.get(type);\n    }\n    if (type == null) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const context = useContext(xrSpaceContext);\n        if (context == null) {\n            throw new Error(`XR objects must be placed inside the XROrigin`);\n        }\n        return context;\n    }\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [referenceSpace, setReferenceSpace] = useState(undefined);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const session = useXR((xr) => xr.session);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        if (session == null) {\n            return;\n        }\n        let aborted = false;\n        session.requestReferenceSpace(type).then((space) => {\n            if (aborted) {\n                return;\n            }\n            setReferenceSpace(space);\n        });\n        return () => void (aborted = true);\n    }, [session, type]);\n    return referenceSpace;\n}\n/**\n * Hook that returns a function to compute a matrix that contains the transformation of the provided xr space\n */\nexport function useGetXRSpaceMatrix(space) {\n    const localReferenceSpace = useContext(xrSpaceContext);\n    const referenceSpace = useXR((xr) => localReferenceSpace ?? xr.originReferenceSpace);\n    return useMemo(() => (space == null || referenceSpace == null ? undefined : createGetXRSpaceMatrix(space, referenceSpace)), [space, referenceSpace]);\n}\n/**\n * Hook that applies the transformation of the provided xr space to the provided object reference\n *\n * @param onFrame Optional callback that gets executed after the matrix of the reference object was updated\n * @param ref.current A react ref object that points to the object that the XRSpaceMatrix should be applied to\n * @requires matrixAutoUpdate to be disabled for the referenced object\n */\nexport function useApplyXRSpaceMatrix(ref, space, onFrame) {\n    const getXRSpaceMatrix = useGetXRSpaceMatrix(space);\n    useFrame((state, delta, frame) => {\n        if (ref.current != null) {\n            ref.current.visible = ref.current.transformReady = getXRSpaceMatrix?.(ref.current.matrix, frame) ?? false;\n        }\n        onFrame?.(state, delta, frame);\n        //makes sure we update the frame before using the space transformation anywhere\n    }, -100);\n}\n", "import { clamp } from 'three/src/math/MathUtils.js';\nconst ButtonTouchThreshold = 0.05;\nconst AxisTouchThreshold = 0.1;\nexport function updateXRControllerGamepadState(target, inputSource, layout) {\n    const gamepad = inputSource.gamepad;\n    if (gamepad == null) {\n        return;\n    }\n    const layoutComponents = layout.components;\n    for (const key in layoutComponents) {\n        let component = target[key];\n        if (component == null) {\n            target[key] = component = {};\n        }\n        const { gamepadIndices } = layoutComponents[key];\n        let pressed = false;\n        let touched = false;\n        if (gamepadIndices.button != null && gamepadIndices.button < gamepad.buttons.length) {\n            const gamepadButton = gamepad.buttons[gamepadIndices.button];\n            component.button = clamp(gamepadButton.value, 0, 1);\n            pressed ||= gamepadButton.pressed || component.button === 1;\n            touched ||= gamepadButton.touched || component.button > ButtonTouchThreshold;\n        }\n        if (gamepadIndices.xAxis != null && gamepadIndices.xAxis < gamepad.axes.length) {\n            component.xAxis = clamp(gamepad.axes[gamepadIndices.xAxis], -1, 1);\n            touched ||= Math.abs(component.xAxis) > AxisTouchThreshold;\n        }\n        if (gamepadIndices.yAxis != null && gamepadIndices.yAxis < gamepad.axes.length) {\n            component.yAxis = clamp(gamepad.axes[gamepadIndices.yAxis], -1, 1);\n            touched ||= Math.abs(component.yAxis) > AxisTouchThreshold;\n        }\n        component.state = pressed ? 'pressed' : touched ? 'touched' : 'default';\n    }\n}\n", "import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nexport const DefaultGltfLoader = new GLTFLoader();\nexport const DefaultAssetBasePath = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/';\nexport { getXRControllerComponentObject, configureXRControllerModel, createUpdateXRControllerVisuals, loadXRControllerModel, } from './controller/index.js';\nexport { isXRInputSourceState, } from './input.js';\nexport * from './visible.js';\nexport * from './pointer/index.js';\nexport * from './vanilla/index.js';\nexport * from './misc.js';\nexport * from './teleport.js';\nexport * from './hit-test.js';\nexport * from './anchor.js';\nexport * from './layer.js';\nexport * from './controller-locomotion.js';\n", "import { Matrix4 } from 'three';\nexport function createHandPoseState(hand) {\n    return {\n        //distances: {},\n        //name: undefined,\n        data: new Float32Array(hand.size * 16),\n    };\n}\nexport function updateXRHandPoseState(state, frame, hand, manager, handedness) {\n    const referenceSpace = manager.getReferenceSpace();\n    /*for (const key in poseUrls) {\n      state.distances[key] = Infinity\n    }*/\n    if (referenceSpace == null ||\n        frame == null ||\n        frame.session.visibilityState === 'visible-blurred' ||\n        frame.session.visibilityState === 'hidden') {\n        //state.name = undefined\n        return;\n    }\n    const validPose = updateXRHandPoseData(frame, referenceSpace, hand, state.data);\n    if (!validPose) {\n        //state.name = undefined\n        return;\n    }\n    let closestPoseName;\n    let closestPoseDistance;\n    /*for (const key in poseUrls) {\n      const pose = loadXRHandPose(poseUrls[key])\n      if (pose == null) {\n        continue\n      }\n      const distance = getXRHandPoseDistance(state.data, pose, handedness === 'left')\n  \n      if (closestPoseDistance != null && distance >= closestPoseDistance) {\n        continue\n      }\n  \n      state.distances[key] = distance\n      closestPoseDistance = distance\n      closestPoseName = key\n    }\n  \n    state.name = closestPoseName*/\n}\nconst invertedWirstHelper = new Matrix4();\nconst matrixHelper = new Matrix4();\nfunction updateXRHandPoseData(frame, referenceSpace, hand, handPoseData) {\n    const validPose = frame.fillPoses(hand.values(), referenceSpace, handPoseData);\n    if (!validPose) {\n        return false;\n    }\n    //calculate bone poses in relation to the wrist\n    // The first item in hand pose information is the wrist\n    invertedWirstHelper.fromArray(handPoseData, 0);\n    invertedWirstHelper.invert();\n    for (let i = 0; i < handPoseData.length; i += 16) {\n        matrixHelper.fromArray(handPoseData, i);\n        matrixHelper.premultiply(invertedWirstHelper);\n        matrixHelper.toArray(handPoseData, i);\n    }\n    return true;\n}\n/*\nconst tempMat2 = new Matrix4()\nconst tempMat1 = new Matrix4()\nconst tempQuat2 = new Quaternion()\nconst tempQuat1 = new Quaternion()\n\nfunction getXRHandPoseDistance(hpData1: Float32Array, phData2: Float32Array, mirrorHP2: boolean): number {\n  const length = Math.min(hpData1.length, phData2.length)\n  if (length === 0) {\n    return Infinity\n  }\n  let dist = 0\n  for (let i = 0; i < length; i += 16) {\n\n      //TODO: use decompose\n    tempQuat1.setFromRotationMatrix(tempMat1.fromArray(hpData1, i))\n    tempQuat2.setFromRotationMatrix(tempMat2.fromArray(phData2, i))\n    if (mirrorHP2) {\n      mirrorQuaterionOnXAxis(tempQuat2)\n    }\n    dist += tempQuat2.angleTo(tempQuat1)\n  }\n  return dist / (length * 16)\n}\n\nfunction downloadHandPoseData(handed: XRHandedness, handPoseData: Float32Array) {\n  if (handed === 'left') {\n    const length = handPoseData.length\n    const mirroredHandPoseData = new Float32Array(length)\n    for (let i = 0; i < length; i += 16) {\n      tempMat2.fromArray(handPoseData, i)\n      //TODO: use decompose\n      tempQuat2.setFromRotationMatrix(tempMat2)\n      mirrorQuaterionOnXAxis(tempQuat2)\n      // Copies the rotation component of the supplied matrix m into this matrix rotation component.\n      tempMat2.makeRotationFromQuaternion(tempQuat2)\n      tempMat2.toArray(mirroredHandPoseData, i)\n    }\n    handPoseData = mirroredHandPoseData\n  }\n\n  const a = window.document.createElement('a')\n  a.href = window.URL.createObjectURL(new Blob([handPoseData], { type: 'application/octet-stream' }))\n  a.download = 'untitled.handpose'\n  document.body.appendChild(a)\n  a.click()\n  document.body.removeChild(a)\n}\n\n//null means that we are currently loading the pose\nconst poseStorage = new Map<string, Float32Array | undefined | null>()\n\nfunction loadXRHandPose(path: string): Float32Array | undefined {\n  const href = new URL(path, window.location.href).href\n  const pose = poseStorage.get(href)\n  if (pose != null) {\n    return pose\n  }\n  if (pose === undefined) {\n    //loading process was never started\n    poseStorage.set(href, null)\n    //start loading process and save to poseStorage\n    fetch(href)\n      .then((response) => response.arrayBuffer())\n      .then((buffer) => poseStorage.set(href, new Float32Array(buffer)))\n      .catch(console.error)\n  }\n  return undefined\n}\n\nfunction mirrorQuaterionOnXAxis(quaternion: Quaternion): void {\n  quaternion.x = -quaternion.x\n  quaternion.w = -quaternion.w\n}*/\n", "import { Material, Mesh } from 'three';\nimport { clone as cloneSkeleton } from 'three/examples/jsm/utils/SkeletonUtils.js';\nimport { DefaultAssetBasePath, DefaultGltfLoader } from '../index.js';\n//from https://github.com/pmndrs/three-stdlib/blob/main/src/webxr/XRHandMeshModel.ts\nconst DefaultDefaultXRHandProfileId = 'generic-hand';\nexport function getXRHandAssetPath(handedness, options) {\n    const baseAssetPath = options?.baseAssetPath ?? DefaultAssetBasePath;\n    const defaultProfileId = options?.defaultXRHandProfileId ?? DefaultDefaultXRHandProfileId;\n    return new URL(`${defaultProfileId}/${handedness}.glb`, baseAssetPath).href;\n}\nexport async function loadXRHandModel(assetPath, loader = DefaultGltfLoader) {\n    const gltf = await loader.loadAsync(assetPath);\n    return cloneXRHandGltf(gltf);\n}\nexport function cloneXRHandGltf({ scene }) {\n    const result = cloneSkeleton(scene);\n    const mesh = result.getObjectByProperty('type', 'SkinnedMesh');\n    if (mesh == null) {\n        throw new Error(`missing SkinnedMesh in loaded XRHand model`);\n    }\n    mesh.frustumCulled = false;\n    return result;\n}\nexport function configureXRHandModel(model, options) {\n    model.renderOrder = options?.renderOrder ?? 0;\n    model.traverse((child) => {\n        if (child instanceof Mesh && child.material instanceof Material) {\n            child.material.colorWrite = options?.colorWrite ?? true;\n        }\n    });\n}\n", "import { getXRHandAssetPath } from './model.js';\nimport { createHandPoseState, updateXRHandPoseState } from './pose.js';\nexport function isXRHandInputSource(inputSource) {\n    return inputSource.hand != null;\n}\nexport function createXRHandState(id, inputSource, options, events, isPrimary) {\n    return {\n        id,\n        isPrimary,\n        type: 'hand',\n        inputSource: inputSource,\n        pose: createHandPoseState(inputSource.hand),\n        assetPath: getXRHandAssetPath(inputSource.handedness, options),\n        events,\n    };\n}\nexport function updateXRHandState({ inputSource, pose }, frame, manager) {\n    updateXRHandPoseState(pose, frame, inputSource.hand, manager, inputSource.handedness);\n}\n", "const joints = [\n    'wrist',\n    'thumb-metacarpal',\n    'thumb-phalanx-proximal',\n    'thumb-phalanx-distal',\n    'thumb-tip',\n    'index-finger-metacarpal',\n    'index-finger-phalanx-proximal',\n    'index-finger-phalanx-intermediate',\n    'index-finger-phalanx-distal',\n    'index-finger-tip',\n    'middle-finger-metacarpal',\n    'middle-finger-phalanx-proximal',\n    'middle-finger-phalanx-intermediate',\n    'middle-finger-phalanx-distal',\n    'middle-finger-tip',\n    'ring-finger-metacarpal',\n    'ring-finger-phalanx-proximal',\n    'ring-finger-phalanx-intermediate',\n    'ring-finger-phalanx-distal',\n    'ring-finger-tip',\n    'pinky-finger-metacarpal',\n    'pinky-finger-phalanx-proximal',\n    'pinky-finger-phalanx-intermediate',\n    'pinky-finger-phalanx-distal',\n    'pinky-finger-tip',\n];\nexport function createUpdateXRHandVisuals(hand, handModel, referenceSpace) {\n    const buffer = new Float32Array(hand.size * 16);\n    const jointObjects = joints.map((joint) => {\n        const jointObject = handModel.getObjectByName(joint);\n        if (jointObject == null) {\n            throw new Error(`missing joint \"${joint}\" in hand model`);\n        }\n        jointObject.matrixAutoUpdate = false;\n        return jointObject;\n    });\n    return (frame) => {\n        const resolvedReferenceSpace = typeof referenceSpace === 'function' ? referenceSpace() : referenceSpace;\n        if (frame == null || resolvedReferenceSpace == null) {\n            return;\n        }\n        frame.fillPoses(hand.values(), resolvedReferenceSpace, buffer);\n        const length = jointObjects.length;\n        for (let i = 0; i < length; i++) {\n            jointObjects[i].matrix.fromArray(buffer, i * 16);\n        }\n    };\n}\n", "import { XRControllerLayoutLoader, createXRControllerState, } from './controller/index.js';\nimport { createXRHandState, } from './hand/index.js';\nexport function isXRInputSourceState(val) {\n    return val != null && typeof val === 'object' && 'inputSource' in val;\n}\nfunction setupEvents(session, events) {\n    const listener = (e) => events.push(e);\n    session.addEventListener('selectstart', listener);\n    session.addEventListener('selectend', listener);\n    session.addEventListener('select', listener);\n    session.addEventListener('squeeze', listener);\n    session.addEventListener('squeezestart', listener);\n    session.addEventListener('squeezeend', listener);\n    return () => {\n        session.removeEventListener('selectstart', listener);\n        session.removeEventListener('selectend', listener);\n        session.removeEventListener('select', listener);\n        session.removeEventListener('squeeze', listener);\n        session.removeEventListener('squeezestart', listener);\n        session.removeEventListener('squeezeend', listener);\n    };\n}\nlet idCounter = 0;\nexport function createSyncXRInputSourceStates(addController, options) {\n    const cleanupMap = new Map();\n    const controllerLayoutLoader = new XRControllerLayoutLoader(options);\n    const idMap = new Map();\n    return (session, current, changes) => {\n        if (changes === 'remove-all') {\n            for (const cleanup of cleanupMap.values()) {\n                cleanup();\n            }\n            return current;\n        }\n        const target = [...current];\n        for (const { added, isPrimary, removed } of changes) {\n            if (removed != null) {\n                for (const inputSource of removed) {\n                    const index = target.findIndex(({ inputSource: is, isPrimary: ip }) => ip === isPrimary && is === inputSource);\n                    if (index === -1) {\n                        continue;\n                    }\n                    target.splice(index, 1);\n                    cleanupMap.get(inputSource)?.();\n                    cleanupMap.delete(inputSource);\n                }\n            }\n            if (added == null) {\n                continue;\n            }\n            for (const inputSource of added) {\n                const events = [];\n                let cleanup = setupEvents(session, events);\n                const key = `${inputSource.handedness}-${inputSource.hand ? 'hand' : 'nohand'}-${inputSource.targetRayMode}-${inputSource.profiles.join(',')}`;\n                let id;\n                if ((id = idMap.get(key)) == null) {\n                    idMap.set(key, (id = `${idCounter++}`));\n                }\n                if (inputSource.hand != null) {\n                    target.push(createXRHandState(id, inputSource, options, events, isPrimary));\n                }\n                else {\n                    switch (inputSource.targetRayMode) {\n                        case 'gaze':\n                            target.push({ id, isPrimary, type: 'gaze', inputSource, events });\n                            break;\n                        case 'screen':\n                            target.push({ id, isPrimary, type: 'screenInput', inputSource, events });\n                            break;\n                        case 'transient-pointer':\n                            target.push({ id, isPrimary, type: 'transientPointer', inputSource, events });\n                            break;\n                        case 'tracked-pointer':\n                            let aborted = false;\n                            const cleanupEvents = cleanup;\n                            cleanup = () => {\n                                cleanupEvents();\n                                aborted = true;\n                            };\n                            const stateResult = createXRControllerState(id, inputSource, controllerLayoutLoader, events, isPrimary);\n                            if (stateResult instanceof Promise) {\n                                stateResult.then((state) => !aborted && addController(state)).catch(console.error);\n                            }\n                            else {\n                                target.push(stateResult);\n                            }\n                            break;\n                    }\n                }\n                cleanupMap.set(inputSource, cleanup);\n            }\n        }\n        return target;\n    };\n}\n", "export function setupSyncIsVisible(store, setIsVisible) {\n    const update = (state, prevState) => {\n        if (prevState != null && state.visibilityState === prevState.visibilityState) {\n            return;\n        }\n        setIsVisible(state.visibilityState === 'visible');\n    };\n    update(store.getState());\n    return store.subscribe(update);\n}\n", "import { MeshBasicMaterial, Quaternion, Vector3, } from 'three';\nexport class PointerCursorMaterial extends MeshBasicMaterial {\n    constructor() {\n        super({ transparent: true, toneMapped: false, depthWrite: false });\n    }\n    onBeforeCompile(parameters, renderer) {\n        super.onBeforeCompile(parameters, renderer);\n        parameters.vertexShader = `varying vec2 vLocalPosition;\\n` + parameters.vertexShader;\n        parameters.vertexShader = parameters.vertexShader.replace(`#include <color_vertex>`, `#include <color_vertex>\n        vLocalPosition = position.xy * 2.0;`);\n        parameters.fragmentShader = `varying vec2 vLocalPosition;\\n` + parameters.fragmentShader;\n        parameters.fragmentShader = parameters.fragmentShader.replace('#include <color_fragment>', `#include <color_fragment>\n          float value = max(0.0, 1.0 - sqrt(dot(vLocalPosition, vLocalPosition)));\n          diffuseColor.a = diffuseColor.a * value * value;`);\n    }\n}\nconst ZAxis = new Vector3(0, 0, 1);\nconst quaternionHelper = new Quaternion();\nconst offsetHelper = new Vector3();\nexport function updatePointerCursorModel(pointerGroup, mesh, material, pointer, options) {\n    const intersection = pointer.getIntersection();\n    if (intersection == null ||\n        !pointer.getEnabled() ||\n        intersection.object.isVoidObject === true ||\n        !isVisble(pointerGroup)) {\n        mesh.visible = false;\n        return;\n    }\n    mesh.visible = true;\n    const color = typeof options.color === 'function' ? options.color(pointer) : options.color;\n    if (Array.isArray(color)) {\n        material.color.set(...color);\n    }\n    else {\n        material.color.set(color ?? 'white');\n    }\n    material.opacity = typeof options.opacity === 'function' ? options.opacity(pointer) : (options.opacity ?? 0.4);\n    mesh.position.copy(intersection.pointOnFace);\n    mesh.scale.setScalar(options.size ?? 0.1);\n    const normal = intersection.normal ?? intersection.face?.normal;\n    if (normal != null) {\n        quaternionHelper.setFromUnitVectors(ZAxis, normal);\n        intersection.object.getWorldQuaternion(mesh.quaternion);\n        mesh.quaternion.multiply(quaternionHelper);\n        offsetHelper.set(0, 0, options.cursorOffset ?? 0.01);\n        offsetHelper.applyQuaternion(mesh.quaternion);\n        mesh.position.add(offsetHelper);\n    }\n    mesh.updateMatrix();\n}\nfunction isVisble({ visible, parent }) {\n    if (!visible) {\n        return false;\n    }\n    if (parent == null) {\n        return true;\n    }\n    return isVisble(parent);\n}\n", "import { MeshBasicMaterial, } from 'three';\nexport class PointerRayMaterial extends MeshBasicMaterial {\n    constructor() {\n        super({ transparent: true, toneMapped: false });\n    }\n    onBeforeCompile(parameters, renderer) {\n        super.onBeforeCompile(parameters, renderer);\n        parameters.vertexShader = `varying float vFade;\\n` + parameters.vertexShader;\n        parameters.vertexShader = parameters.vertexShader.replace(`#include <color_vertex>`, `#include <color_vertex>\n            vFade = position.z + 0.5;`);\n        parameters.fragmentShader = `varying float vFade;\\n` + parameters.fragmentShader;\n        parameters.fragmentShader = parameters.fragmentShader.replace('#include <color_fragment>', `#include <color_fragment>\n              diffuseColor.a *= vFade;`);\n    }\n}\nexport function updatePointerRayModel(mesh, material, pointer, options) {\n    const intersection = pointer.getIntersection();\n    if (!pointer.getEnabled() || intersection == null) {\n        mesh.visible = false;\n        return;\n    }\n    mesh.visible = true;\n    const color = typeof options.color === 'function' ? options.color(pointer) : options.color;\n    if (Array.isArray(color)) {\n        material.color.set(...color);\n    }\n    else {\n        material.color.set(color ?? 'white');\n    }\n    material.opacity = typeof options.opacity === 'function' ? options.opacity(pointer) : (options.opacity ?? 0.4);\n    const length = Math.min(options.maxLength ?? 1, intersection.distance);\n    mesh.position.z = -length / 2;\n    const size = options.size ?? 0.005;\n    mesh.scale.set(size, size, length);\n    mesh.updateMatrix();\n}\n", "export function bindXRInputSourceEvent(session, inputSource, event, fn) {\n    const filterFn = (event) => {\n        if (inputSource != 'all' && event.inputSource != inputSource) {\n            return;\n        }\n        fn(event);\n    };\n    session.addEventListener(event, filterFn);\n    return () => session.removeEventListener(event, filterFn);\n}\nexport function bindPointerXRInputSourceEvent(pointer, session, inputSource, event, missingEvents, options = {}) {\n    const downListener = (e) => {\n        if (e.inputSource === inputSource) {\n            pointer.down(Object.assign(e, { button: options.button ?? 0 }));\n        }\n    };\n    const upListener = (e) => {\n        if (e.inputSource === inputSource) {\n            pointer.up(Object.assign(e, { button: options.button ?? 0 }));\n        }\n    };\n    const downEventName = `${event}start`;\n    const upEventName = `${event}end`;\n    //missing events are required for transient pointers when the input source is registered asynchrounously\n    //so that events directly emitted on initialization are still processed once the input source is created\n    const length = missingEvents.length;\n    for (let i = 0; i < length; i++) {\n        const event = missingEvents[i];\n        switch (event.type) {\n            case downEventName:\n                downListener(event);\n                break;\n            case upEventName:\n                upListener(event);\n                break;\n        }\n    }\n    session.addEventListener(downEventName, downListener);\n    session.addEventListener(upEventName, upListener);\n    return () => {\n        session.removeEventListener(downEventName, downListener);\n        session.removeEventListener(upEventName, upListener);\n    };\n}\n", "export function defaultGrabPointerOpacity(pointer) {\n    if (pointer.getButtonsDown().size > 0) {\n        return 0.6;\n    }\n    return map(pointer.getIntersection()?.distance ?? Infinity, 0.07, 0, 0.2, 0.4);\n}\nexport function defaultRayPointerOpacity(pointer) {\n    if (pointer.getButtonsDown().size > 0) {\n        return 0.6;\n    }\n    return 0.4;\n}\nexport function defaultTouchPointerOpacity(pointer) {\n    return map(pointer.getIntersection()?.distance ?? Infinity, 0.1, 0.03, 0.2, 0.6);\n}\nfunction map(value, fromMin, fromMax, toMin, toMax) {\n    return toMin + Math.max(0, Math.min(1, (value - fromMin) / (fromMax - fromMin))) * (toMax - toMin);\n}\n", "import { Object3D } from 'three';\nimport { createGetXRSpaceMatrix, getSpaceFromAncestors } from '../space.js';\nimport { onXRFrame } from './utils.js';\nexport class XRSpace extends Object3D {\n    xrSpace;\n    constructor(xrSpace, origin, originReferenceSpace) {\n        super();\n        this.xrSpace = xrSpace;\n        this.transformReady = false;\n        const getSpaceMatrix = createGetXRSpaceMatrix(xrSpace, () => getSpaceFromAncestors(this, origin, originReferenceSpace));\n        this.matrixAutoUpdate = false;\n        this.visible = false;\n        onXRFrame((frame) => {\n            if (frame == null) {\n                return;\n            }\n            this.visible = this.transformReady = getSpaceMatrix(this.matrix, frame);\n        });\n    }\n}\n", "export function createGetXRSpaceMatrix(space, referenceSpace) {\n    return (target, frame) => {\n        if (space === referenceSpace) {\n            target.identity();\n            return true;\n        }\n        const resolvedReferenceSpace = typeof referenceSpace === 'function' ? referenceSpace() : referenceSpace;\n        if (resolvedReferenceSpace == null) {\n            return false;\n        }\n        const pose = frame?.getPose(space, resolvedReferenceSpace);\n        if (pose == null) {\n            return false;\n        }\n        target.fromArray(pose.transform.matrix);\n        return true;\n    };\n}\nexport function getSpaceFromAncestors(object, origin, originReferenceSpace, targetOffsetMatrix) {\n    targetOffsetMatrix?.copy(object.matrix);\n    const result = getXRSpaceFromAncestorsRec(object.parent, targetOffsetMatrix);\n    if (result != null) {\n        return result;\n    }\n    if (targetOffsetMatrix != null) {\n        computeOriginReferenceSpaceOffset(object, origin, targetOffsetMatrix);\n    }\n    return originReferenceSpace;\n}\nfunction computeOriginReferenceSpaceOffset(object, origin, target) {\n    object.updateWorldMatrix(true, false);\n    if (origin == null) {\n        target.copy(object.matrixWorld);\n        return;\n    }\n    origin.updateWorldMatrix(true, false);\n    //origin * offset = space <=>\n    //target = origin.matrixWorld-1 * object.matrixWorld\n    target.copy(origin.matrixWorld).invert().multiply(object.matrixWorld);\n}\nfunction getXRSpaceFromAncestorsRec(object, targetOffsetMatrix) {\n    if (object == null) {\n        return undefined;\n    }\n    if (object.xrSpace != null) {\n        return object.xrSpace;\n    }\n    targetOffsetMatrix?.premultiply(object.matrix);\n    return getXRSpaceFromAncestorsRec(object.parent, targetOffsetMatrix);\n}\n", "import { CombinedPointer } from '@pmndrs/pointer-events';\nimport { Group } from 'three';\nimport { resolveInputSourceImplementation } from '../store.js';\nimport { createDefaultXRController, createDefaultXRGaze, createDefaultXRHand, createDefaultXRScreenInput, createDefaultXRTransientPointer, } from './default.js';\nimport { XRSpace } from './space.js';\nimport { setupSyncIsVisible } from '../visible.js';\nexport function setupSyncXRElements(scene, getCamera, store, target, updatesList) {\n    const combined = new CombinedPointer(true);\n    const onFrame = () => combined.move(scene, { timeStamp: performance.now() });\n    updatesList.push(onFrame);\n    setupSyncIsVisible(store, (visible) => combined.setEnabled(visible, { timeStamp: performance.now() }));\n    const inputGroup = new Group();\n    const syncControllers = setupSyncInputSourceElements(createDefaultXRController, scene, getCamera, store, 'controller', inputGroup, updatesList, combined);\n    const syncGazes = setupSyncInputSourceElements(createDefaultXRGaze, scene, getCamera, store, 'gaze', inputGroup, updatesList, combined);\n    const syncHands = setupSyncInputSourceElements(createDefaultXRHand, scene, getCamera, store, 'hand', inputGroup, updatesList, combined);\n    const syncScreenInputs = setupSyncInputSourceElements(createDefaultXRScreenInput, scene, getCamera, store, 'screenInput', inputGroup, updatesList, combined);\n    const syncTransientPointers = setupSyncInputSourceElements(createDefaultXRTransientPointer, scene, getCamera, store, 'transientPointer', inputGroup, updatesList, combined);\n    const unsubscribe = store.subscribe((s, prev) => {\n        inputGroup.visible = s.visibilityState === 'visible';\n        syncControllers(s.session, s.inputSourceStates, prev.inputSourceStates, s.controller, prev.controller);\n        syncGazes(s.session, s.inputSourceStates, prev.inputSourceStates, s.gaze, prev.gaze);\n        syncHands(s.session, s.inputSourceStates, prev.inputSourceStates, s.hand, prev.hand);\n        syncScreenInputs(s.session, s.inputSourceStates, prev.inputSourceStates, s.screenInput, prev.screenInput);\n        syncTransientPointers(s.session, s.inputSourceStates, prev.inputSourceStates, s.transientPointer, prev.transientPointer);\n    });\n    target.add(inputGroup);\n    return () => {\n        const index = updatesList.indexOf(onFrame);\n        if (index === -1) {\n            return;\n        }\n        updatesList.splice(index, 1);\n        target.remove(inputGroup);\n        unsubscribe();\n        syncControllers(undefined, [], [], false, false);\n        syncGazes(undefined, [], [], false, false);\n        syncHands(undefined, [], [], false, false);\n        syncScreenInputs(undefined, [], [], false, false);\n        syncTransientPointers(undefined, [], [], false, false);\n    };\n}\nfunction setupSyncInputSourceElements(defaultCreate, scene, getCamera, store, key, target, updatesList, combined) {\n    return setupSync(key, (session, state, implementationInfo) => runInXRUpdatesListContext(updatesList, () => {\n        const implementation = resolveInputSourceImplementation(implementationInfo, state.inputSource.handedness, {});\n        if (implementation === false) {\n            return;\n        }\n        const spaceObject = new XRSpace(state.inputSource.targetRaySpace);\n        target.add(spaceObject);\n        const customCleanup = typeof implementation === 'object'\n            ? defaultCreate(scene, getCamera, spaceObject, state, session, implementation, combined)\n            : implementation?.(store, spaceObject, state, session);\n        return () => {\n            target.remove(spaceObject);\n            customCleanup?.();\n        };\n    }));\n}\nfunction setupSync(key, create) {\n    let cleanupMap = new Map();\n    return (session, values, prevValues, impl, prevImpl) => {\n        if (values === prevValues && impl === prevImpl) {\n            return;\n        }\n        if (impl != prevImpl) {\n            cleanup(cleanupMap);\n        }\n        const newCleanupMap = new Map();\n        const valuesLength = values.length;\n        if (session != null) {\n            for (let i = 0; i < valuesLength; i++) {\n                const value = values[i];\n                if (value.type != key) {\n                    continue;\n                }\n                let cleanup = cleanupMap.get(value);\n                const wasCreated = cleanupMap.delete(value);\n                if (!wasCreated) {\n                    cleanup = create(session, value, impl);\n                }\n                newCleanupMap.set(value, cleanup);\n            }\n        }\n        cleanup(cleanupMap);\n        cleanupMap = newCleanupMap;\n    };\n}\nfunction cleanup(map) {\n    for (const cleanup of map.values()) {\n        cleanup?.();\n    }\n    map.clear();\n}\nexport let xrUpdatesListContext;\nfunction runInXRUpdatesListContext(updatesList, fn) {\n    const innerUpdatesList = [];\n    const update = (frame, delta) => {\n        const length = innerUpdatesList.length;\n        for (let i = 0; i < length; i++) {\n            innerUpdatesList[i](frame, delta);\n        }\n    };\n    updatesList.push(update);\n    const prev = xrUpdatesListContext;\n    xrUpdatesListContext = innerUpdatesList;\n    const cleanup = fn();\n    xrUpdatesListContext = prev;\n    return () => {\n        cleanup?.();\n        const index = updatesList.indexOf(update);\n        if (index === -1) {\n            return;\n        }\n        updatesList.splice(index, 1);\n    };\n}\n", "import { Vector3 } from 'three';\nimport { createStore } from 'zustand/vanilla';\nimport { updateXRControllerState } from './controller/index.js';\nimport { updateXRHandState } from './hand/state.js';\nimport { buildXRSessionInit } from './init.js';\nimport { createSyncXRInputSourceStates } from './input.js';\nexport function resolveInputSourceImplementation(implementation, handedness, defaultValue) {\n    if (typeof implementation === 'function') {\n        return implementation;\n    }\n    if (typeof implementation === 'object') {\n        if (handedness != null && hasKey(implementation, handedness)) {\n            implementation = implementation[handedness];\n        }\n        else if ('default' in implementation) {\n            implementation = implementation.default;\n        }\n    }\n    if (implementation === false) {\n        return false;\n    }\n    if (implementation === true) {\n        return defaultValue;\n    }\n    return implementation ?? defaultValue;\n}\nfunction hasKey(val, key) {\n    return key in val;\n}\nconst baseInitialState = {\n    session: undefined,\n    mediaBinding: undefined,\n    originReferenceSpace: undefined,\n    visibilityState: undefined,\n    mode: null,\n    frameRate: undefined,\n    inputSourceStates: [],\n    detectedMeshes: [],\n    detectedPlanes: [],\n    layerEntries: [],\n};\nasync function injectEmulator(store, emulateOptions, alert) {\n    if (typeof navigator === 'undefined') {\n        return false;\n    }\n    const [vr, ar] = await Promise.all([\n        navigator.xr?.isSessionSupported('immersive-vr').catch((e) => {\n            console.error(e);\n            return false;\n        }),\n        navigator.xr?.isSessionSupported('immersive-ar').catch((e) => {\n            console.error(e);\n            return false;\n        }),\n    ]);\n    if (ar || vr) {\n        return false;\n    }\n    const { emulate } = await import('./emulate.js');\n    if (alert) {\n        window.alert(`emulator started`);\n    }\n    store.setState({\n        emulator: emulate(emulateOptions === true ? 'metaQuest3' : emulateOptions),\n    });\n    return true;\n}\n//helpers for layer sorting\nconst cameraWorldPosition = new Vector3();\nconst tempLayerWorldPosition = new Vector3();\nexport function createXRStore(options) {\n    //dom overlay root element creation\n    const domOverlayRoot = typeof HTMLElement === 'undefined'\n        ? undefined\n        : options?.domOverlay instanceof HTMLElement\n            ? options.domOverlay\n            : document.createElement('div');\n    //store\n    const store = createStore(() => ({\n        ...baseInitialState,\n        controller: options?.controller,\n        hand: options?.hand,\n        gaze: options?.gaze,\n        screenInput: options?.screenInput,\n        transientPointer: options?.transientPointer,\n        domOverlayRoot,\n    }));\n    const unsubscribeSessionOffer = store.subscribe(({ session }, { session: oldSession }) => {\n        if (oldSession != null && session == null && xrManager != null) {\n            offerSession(xrManager, options, domOverlayRoot).catch(console.error);\n        }\n    });\n    //emulation\n    const emulate = options?.emulate ?? 'metaQuest3';\n    let cleanupEmulate;\n    if (typeof window !== 'undefined' && emulate != false) {\n        const inject = (typeof emulate === 'object' ? emulate.inject : undefined) ?? { hostname: 'localhost' };\n        if (inject === true || (typeof inject != 'boolean' && window.location.hostname === inject.hostname)) {\n            injectEmulator(store, emulate, false).then((emulate) => {\n                if (!emulate || xrManager == null) {\n                    return;\n                }\n                offerSession(xrManager, options, domOverlayRoot);\n            });\n        }\n        const keydownListener = (e) => {\n            if (e.altKey && e.metaKey && e.code === 'KeyE') {\n                injectEmulator(store, emulate, true).then((emulate) => {\n                    if (!emulate || xrManager == null) {\n                        return;\n                    }\n                    offerSession(xrManager, options, domOverlayRoot);\n                });\n            }\n        };\n        window.addEventListener('keydown', keydownListener);\n        cleanupEmulate = () => window.removeEventListener('keydown', keydownListener);\n    }\n    //dom overlay root setup\n    let cleanupDomOverlayRoot;\n    if (domOverlayRoot != null) {\n        if (domOverlayRoot.parentNode == null) {\n            const setupDisplay = (state) => {\n                domOverlayRoot.style.display = state.session != null ? 'block' : 'none';\n            };\n            const unsubscribe = store.subscribe(setupDisplay);\n            setupDisplay(store.getState());\n            document.body.appendChild(domOverlayRoot);\n            cleanupDomOverlayRoot = () => {\n                domOverlayRoot.remove();\n                unsubscribe();\n            };\n        }\n        document.body.append(domOverlayRoot);\n    }\n    const syncXRInputSourceStates = createSyncXRInputSourceStates((state) => store.setState({ inputSourceStates: [...store.getState().inputSourceStates, state] }), options);\n    const bindToSession = createBindToSession(store, syncXRInputSourceStates, options?.secondaryInputSources ?? false);\n    const cleanupSessionGrantedListener = setupSessionGrantedListener(options?.enterGrantedSession, (mode) => enterXRSession(domOverlayRoot, mode, options, xrManager));\n    const frameRequests = [];\n    let xrManager;\n    const onSessionStart = () => {\n        store.setState(bindToSession(xrManager.getSession()));\n    };\n    return Object.assign(store, {\n        addLayerEntry(layerEntry) {\n            if (store.getState().session == null) {\n                return;\n            }\n            store.setState({ layerEntries: [...store.getState().layerEntries, layerEntry] });\n        },\n        removeLayerEntry(layerEntry) {\n            if (store.getState().session == null) {\n                return;\n            }\n            store.setState({ layerEntries: store.getState().layerEntries.filter((entry) => entry != layerEntry) });\n        },\n        requestFrame() {\n            return new Promise((resolve) => frameRequests.push(resolve));\n        },\n        setWebXRManager(newXrManager) {\n            if (xrManager === newXrManager) {\n                return;\n            }\n            xrManager?.removeEventListener('sessionstart', onSessionStart);\n            xrManager = newXrManager;\n            xrManager.addEventListener('sessionstart', onSessionStart);\n            const { foveation, bounded } = options ?? {};\n            xrManager.setReferenceSpaceType(bounded ? 'bounded-floor' : 'local-floor');\n            if (foveation != null) {\n                xrManager.setFoveation(foveation);\n            }\n            offerSession(xrManager, options, domOverlayRoot).catch(console.error);\n        },\n        setFrameRate(value) {\n            const { session } = store.getState();\n            if (session == null) {\n                return;\n            }\n            setFrameRate(session, value);\n        },\n        setHand(implementation, handedness) {\n            if (handedness == null) {\n                store.setState({ hand: implementation });\n                return;\n            }\n            const currentImplementation = store.getState().hand;\n            const newControllerImplementation = {};\n            if (typeof currentImplementation === 'object') {\n                Object.assign(newControllerImplementation, currentImplementation);\n            }\n            Object.assign(newControllerImplementation, {\n                default: resolveInputSourceImplementation(currentImplementation, undefined, {}),\n                [handedness]: implementation,\n            });\n            store.setState({\n                hand: newControllerImplementation,\n            });\n        },\n        setController(implementation, handedness) {\n            if (handedness == null) {\n                store.setState({ controller: implementation });\n                return;\n            }\n            const currentImplementation = store.getState().controller;\n            const newControllerImplementation = {};\n            if (typeof currentImplementation === 'object') {\n                Object.assign(newControllerImplementation, currentImplementation);\n            }\n            Object.assign(newControllerImplementation, {\n                default: resolveInputSourceImplementation(currentImplementation, undefined, {}),\n                [handedness]: implementation,\n            });\n            store.setState({\n                controller: newControllerImplementation,\n            });\n        },\n        setTransientPointer(implementation, handedness) {\n            if (handedness == null) {\n                store.setState({ transientPointer: implementation });\n                return;\n            }\n            const currentImplementation = store.getState().transientPointer;\n            const newControllerImplementation = {};\n            if (typeof currentImplementation === 'object') {\n                Object.assign(newControllerImplementation, currentImplementation);\n            }\n            Object.assign(newControllerImplementation, {\n                default: resolveInputSourceImplementation(currentImplementation, undefined, {}),\n                [handedness]: implementation,\n            });\n            store.setState({\n                transientPointer: newControllerImplementation,\n            });\n        },\n        setGaze(implementation) {\n            store.setState({ gaze: implementation });\n        },\n        setScreenInput(implementation) {\n            store.setState({ screenInput: implementation });\n        },\n        destroy() {\n            xrManager?.removeEventListener('sessionstart', onSessionStart);\n            cleanupEmulate?.();\n            cleanupDomOverlayRoot?.();\n            cleanupSessionGrantedListener?.();\n            unsubscribeSessionOffer();\n            //unbinding the session\n            bindToSession(undefined);\n        },\n        enterXR: (mode) => enterXRSession(domOverlayRoot, mode, options, xrManager),\n        enterAR: () => enterXRSession(domOverlayRoot, 'immersive-ar', options, xrManager),\n        enterVR: () => enterXRSession(domOverlayRoot, 'immersive-vr', options, xrManager),\n        onBeforeFrame(scene, camera, frame) {\n            let update;\n            const referenceSpace = xrManager?.getReferenceSpace() ?? undefined;\n            const state = store.getState();\n            //update origin\n            const origin = camera.parent ?? scene;\n            if (state.origin != origin) {\n                update ??= {};\n                update.origin = origin;\n            }\n            //update reference space\n            if (referenceSpace != state.originReferenceSpace) {\n                update ??= {};\n                update.originReferenceSpace = referenceSpace;\n            }\n            //set xr space on current origin (and reset on previous)\n            origin.xrSpace = referenceSpace;\n            if (state.origin != origin && state.origin != null) {\n                state.origin.xrSpace = undefined;\n            }\n            if (frame != null) {\n                if (xrManager != null) {\n                    updateSession(store, frame, xrManager);\n                }\n                if (state.body != frame.body) {\n                    update ??= {};\n                    update.body = frame.body;\n                }\n            }\n            if (update != null) {\n                store.setState(update);\n            }\n            if (frame != null) {\n                const length = frameRequests.length;\n                for (let i = 0; i < length; i++) {\n                    frameRequests[i](frame);\n                }\n                frameRequests.length = 0;\n            }\n        },\n        onBeforeRender() {\n            const { session, layerEntries } = store.getState();\n            if (session == null || xrManager == null) {\n                return;\n            }\n            const xrCamera = xrManager.getCamera();\n            //update camera aspect ratio\n            xrCamera.aspect = xrCamera.projectionMatrix.elements[5] / xrCamera.projectionMatrix.elements[0];\n            const currentLayers = session?.renderState.layers;\n            if (currentLayers == null) {\n                return;\n            }\n            //layer sorting\n            xrCamera.getWorldPosition(cameraWorldPosition);\n            layerEntries.sort((entryA, entryB) => {\n                const renderOrderDifference = entryA.renderOrder - entryB.renderOrder;\n                //if renderOrder is the same, sort by distance to camera\n                if (renderOrderDifference !== 0) {\n                    return renderOrderDifference;\n                }\n                entryA.object3D.getWorldPosition(tempLayerWorldPosition);\n                const distA_sq = tempLayerWorldPosition.distanceToSquared(cameraWorldPosition);\n                entryB.object3D.getWorldPosition(tempLayerWorldPosition);\n                const distB_sq = tempLayerWorldPosition.distanceToSquared(cameraWorldPosition);\n                return distB_sq - distA_sq;\n            });\n            let changed = false;\n            const layers = layerEntries.map(({ layer }, i) => {\n                if (layer != currentLayers[i]) {\n                    changed = true;\n                }\n                return layer;\n            });\n            if (!changed) {\n                return;\n            }\n            layers.push(xrManager.getBaseLayer());\n            session.updateRenderState({\n                layers,\n            });\n        },\n    });\n}\nasync function offerSession(manager, options, domOverlayRoot) {\n    //offer session\n    const offerSessionOptions = options?.offerSession ?? true;\n    if (navigator.xr?.offerSession == null || offerSessionOptions === false) {\n        return;\n    }\n    let mode;\n    if (offerSessionOptions === true) {\n        const arSupported = (await navigator.xr.isSessionSupported('immersive-ar')) ?? false;\n        mode = arSupported ? 'immersive-ar' : 'immersive-vr';\n    }\n    else {\n        mode = offerSessionOptions;\n    }\n    const session = await navigator.xr.offerSession(mode, buildXRSessionInit(mode, domOverlayRoot, options));\n    setupXRSession(session, manager, options);\n}\nasync function setFrameRate(session, frameRate) {\n    if (frameRate === false) {\n        return;\n    }\n    const { supportedFrameRates } = session;\n    if (supportedFrameRates == null || supportedFrameRates.length === 0) {\n        return;\n    }\n    if (typeof frameRate === 'function') {\n        const value = frameRate(supportedFrameRates);\n        if (value === false) {\n            return;\n        }\n        await session.updateTargetFrameRate(value);\n        return;\n    }\n    const multiplier = frameRate === 'high' ? 1 : frameRate === 'mid' ? 0.5 : 0;\n    await session.updateTargetFrameRate(supportedFrameRates[Math.ceil((supportedFrameRates.length - 1) * multiplier)]);\n}\nasync function enterXRSession(domOverlayRoot, mode, options, manager) {\n    if (typeof navigator === 'undefined' || navigator.xr == null) {\n        return Promise.reject(new Error(`WebXR not supported`));\n    }\n    if (manager == null) {\n        return Promise.reject(new Error(`not connected to three.js. You either might be missing the <XR> component or the canvas is not yet loaded?`));\n    }\n    const session = await navigator.xr.requestSession(mode, buildXRSessionInit(mode, domOverlayRoot, options));\n    await setupXRSession(session, manager, options);\n    return session;\n}\nasync function setupXRSession(session, manager, options) {\n    await Promise.all([setFrameRate(session, options?.frameRate ?? 'high'), setupXRManager(manager, session, options)]);\n}\nasync function setupXRManager(xr, session, options) {\n    if (xr == null) {\n        return;\n    }\n    const maxFrameBufferScalingFactor = XRWebGLLayer.getNativeFramebufferScaleFactor(session);\n    let frameBufferScaling = options?.frameBufferScaling;\n    if (typeof frameBufferScaling === 'function') {\n        frameBufferScaling = frameBufferScaling(maxFrameBufferScalingFactor);\n    }\n    if (typeof frameBufferScaling === 'string') {\n        frameBufferScaling =\n            frameBufferScaling === 'high' ? maxFrameBufferScalingFactor : frameBufferScaling === 'mid' ? 1 : 0.5;\n    }\n    if (frameBufferScaling != null) {\n        xr?.setFramebufferScaleFactor(frameBufferScaling);\n    }\n    await xr?.setSession(session);\n}\nconst allSessionModes = ['immersive-ar', 'immersive-vr', 'inline'];\nfunction setupSessionGrantedListener(enterGrantedSession = allSessionModes, enterXR) {\n    if (typeof navigator === 'undefined' || enterGrantedSession === false) {\n        return;\n    }\n    if (enterGrantedSession === true) {\n        enterGrantedSession = allSessionModes;\n    }\n    const sessionGrantedListener = async () => {\n        for (const mode of enterGrantedSession) {\n            if (!(await navigator.xr?.isSessionSupported(mode))) {\n                continue;\n            }\n            enterXR(mode);\n        }\n    };\n    navigator.xr?.addEventListener('sessiongranted', sessionGrantedListener);\n    return () => navigator.xr?.removeEventListener('sessiongranted', sessionGrantedListener);\n}\nfunction createBindToSession(store, syncXRInputSourceStates, secondayInputSources) {\n    let cleanupSession;\n    return (session) => {\n        cleanupSession?.();\n        if (session == null) {\n            return {};\n        }\n        //for debouncing the input source and tracked source changes\n        const inputSourceChangesList = [];\n        let inputSourceChangesTimeout;\n        const applySourcesChange = () => {\n            inputSourceChangesTimeout = undefined;\n            store.setState({\n                inputSourceStates: syncXRInputSourceStates(session, store.getState().inputSourceStates, inputSourceChangesList),\n            });\n            inputSourceChangesList.length = 0;\n        };\n        const onSourcesChange = (isPrimary, e) => {\n            inputSourceChangesList.push({ isPrimary, added: e.added, removed: e.removed });\n            if (inputSourceChangesTimeout != null) {\n                return;\n            }\n            if (secondayInputSources) {\n                inputSourceChangesTimeout = setTimeout(applySourcesChange, 100);\n            }\n            else {\n                applySourcesChange();\n            }\n        };\n        const onInputSourcesChange = onSourcesChange.bind(null, true);\n        session.addEventListener('inputsourceschange', onInputSourcesChange);\n        let cleanupSecondaryInputSources;\n        if (secondayInputSources) {\n            const onTrackedSourcesChange = onSourcesChange.bind(null, false);\n            session.addEventListener('trackedsourceschange', onTrackedSourcesChange);\n            cleanupSecondaryInputSources = () => session.removeEventListener('trackedsourceschange', onTrackedSourcesChange);\n        }\n        //frameratechange and visibilitychange handlers\n        const onChange = () => store.setState({ frameRate: session.frameRate, visibilityState: session.visibilityState });\n        session.addEventListener('frameratechange', onChange);\n        session.addEventListener('visibilitychange', onChange);\n        //end handler\n        const onEnd = () => {\n            cleanupSession?.();\n            cleanupSession = undefined;\n            store.setState({\n                emulator: store.getState().emulator,\n                ...baseInitialState,\n            });\n        };\n        session.addEventListener('end', onEnd);\n        const initialChanges = [\n            { isPrimary: true, added: session.inputSources },\n        ];\n        if (secondayInputSources) {\n            initialChanges.push({ isPrimary: false, added: session.trackedSources });\n        }\n        const inputSourceStates = syncXRInputSourceStates(session, [], initialChanges);\n        cleanupSession = () => {\n            //cleanup\n            cleanupSecondaryInputSources?.();\n            clearTimeout(inputSourceChangesTimeout);\n            syncXRInputSourceStates(session, store.getState().inputSourceStates, 'remove-all');\n            session.removeEventListener('end', onEnd);\n            session.removeEventListener('frameratechange', onChange);\n            session.removeEventListener('visibilitychange', onChange);\n            session.removeEventListener('inputsourceschange', onInputSourcesChange);\n        };\n        return {\n            inputSourceStates,\n            frameRate: session.frameRate,\n            visibilityState: session.visibilityState,\n            detectedMeshes: [],\n            detectedPlanes: [],\n            mode: session.environmentBlendMode === 'opaque' ? 'immersive-vr' : 'immersive-ar',\n            session,\n            mediaBinding: typeof XRMediaBinding == 'undefined' ? undefined : new XRMediaBinding(session),\n        };\n    };\n}\nfunction updateSession(store, frame, manager) {\n    const referenceSpace = manager.getReferenceSpace();\n    const { detectedMeshes: prevMeshes, detectedPlanes: prevPlanes, session, inputSourceStates } = store.getState();\n    if (referenceSpace == null || session == null) {\n        //not in a XR session\n        return;\n    }\n    //update detected planes and meshes\n    const detectedPlanes = updateDetectedEntities(prevPlanes, frame.detectedPlanes);\n    const detectedMeshes = updateDetectedEntities(prevMeshes, frame.detectedMeshes);\n    if (prevPlanes != detectedPlanes || prevMeshes != detectedMeshes) {\n        store.setState({ detectedPlanes, detectedMeshes });\n    }\n    //update input sources\n    const inputSourceStatesLength = inputSourceStates.length;\n    for (let i = 0; i < inputSourceStatesLength; i++) {\n        const inputSourceState = inputSourceStates[i];\n        switch (inputSourceState.type) {\n            case 'controller':\n                updateXRControllerState(inputSourceState);\n                break;\n            case 'hand':\n                updateXRHandState(inputSourceState, frame, manager);\n                break;\n        }\n    }\n}\nconst emptyArray = [];\nfunction updateDetectedEntities(prevDetectedEntities, detectedEntities) {\n    if (detectedEntities == null) {\n        return emptyArray;\n    }\n    if (prevDetectedEntities != null && equalContent(detectedEntities, prevDetectedEntities)) {\n        return prevDetectedEntities;\n    }\n    return Array.from(detectedEntities);\n}\nfunction equalContent(set, arr) {\n    if (set.size != arr.length) {\n        return false;\n    }\n    for (const entry of arr) {\n        if (!set.has(entry)) {\n            return false;\n        }\n    }\n    return true;\n}\n", "const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, getInitialState, subscribe, destroy };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n", "import { Quaternion, Vector3 } from 'three';\nconst vectorHelper = new Vector3();\nconst directionHelper = new Vector3();\nconst positionHelper = new Vector3();\nconst quaternionHelper = new Quaternion();\nexport function isFacingCamera(camera, object, direction, angle) {\n    //compute object world direction -> directionHelper\n    object.getWorldQuaternion(quaternionHelper);\n    directionHelper.copy(direction).applyQuaternion(quaternionHelper);\n    //compute guardToCamera direction (guard - camera) -> vectorHelper\n    object.getWorldPosition(positionHelper);\n    camera.getWorldPosition(vectorHelper);\n    vectorHelper.sub(positionHelper);\n    //compute the angle between guardToCamera and object world direction\n    return vectorHelper.angleTo(directionHelper) < angle / 2;\n}\nexport function isAppleVisionPro() {\n    return navigator.userAgent.includes('Macintosh') && navigator.xr != null;\n}\n", "import { isAppleVisionPro } from './misc.js';\nexport function buildXRSessionInit(mode, domOverlayRoot, { anchors = true, handTracking = isAppleVisionPro() ? false : true, layers = true, meshDetection = true, planeDetection = true, customSessionInit, depthSensing = false, hitTest = true, domOverlay = true, bodyTracking = false, //until 6.7 since breaking change\nbounded, } = {}) {\n    if (customSessionInit != null) {\n        return customSessionInit;\n    }\n    const requiredFeatures = bounded == null ? ['local-floor'] : bounded ? ['bounded-floor'] : ['unbounded', 'local-floor'];\n    const optionalFeatures = [];\n    if (domOverlay instanceof Element) {\n        domOverlay = true;\n    }\n    addXRSessionFeature(anchors, 'anchors', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(handTracking, 'hand-tracking', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(layers, 'layers', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(meshDetection, 'mesh-detection', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(planeDetection, 'plane-detection', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(depthSensing, 'depth-sensing', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(domOverlay, 'dom-overlay', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(hitTest, 'hit-test', requiredFeatures, optionalFeatures);\n    addXRSessionFeature(bodyTracking, 'body-tracking', requiredFeatures, optionalFeatures);\n    const init = {\n        requiredFeatures,\n        optionalFeatures,\n    };\n    if (domOverlayRoot != null) {\n        init.domOverlay = { root: domOverlayRoot };\n    }\n    //TODO: replace with call to isSupportedFeature (unbounded, ...)\n    if (depthSensing) {\n        Object.assign(init, { depthSensing: { usagePreference: ['gpu-optimized'], dataFormatPreference: [] } });\n    }\n    return init;\n}\nfunction addXRSessionFeature(value, key, requiredFeatures, optionalFeatures) {\n    if (value === false) {\n        return;\n    }\n    if (value === true) {\n        optionalFeatures.push(key);\n        return;\n    }\n    requiredFeatures.push(key);\n}\n", "import { CombinedPointer, createGrabPointer, createRayPointer, createTouchPointer, createLinesPointer, } from '@pmndrs/pointer-events';\nimport { Group } from 'three';\nimport { XRHandModel } from './hand.js';\nimport { PointerRayModel, PointerCursorModel } from './pointer.js';\nimport { XRSpace } from './space.js';\nimport { buildTeleportTargetFilter, createTeleportRayLine, syncTeleportPointerRayGroup, TeleportPointerRayModel, } from '../internals.js';\nimport { XRControllerModel } from './controller.js';\nimport { onXRFrame } from './utils.js';\nimport { bindPointerXRInputSourceEvent, defaultGrabPointerOpacity, defaultRayPointerOpacity, defaultTouchPointerOpacity, } from '../pointer/index.js';\nexport function createDefaultXRInputSourceRayPointer(scene, getCamera, space, state, session, options, combined, makeDefault) {\n    //the space must be created before the pointer to make sure that the space is updated before the pointer\n    const raySpace = new XRSpace(state.inputSource.targetRaySpace);\n    const pointer = createRayPointer(getCamera, { current: raySpace }, state, options);\n    const unregister = combined.register(pointer, makeDefault);\n    const unbind = bindPointerXRInputSourceEvent(pointer, session, state.inputSource, 'select', state.events);\n    space.add(raySpace);\n    let undoAddRayModel;\n    const { rayModel: rayModelOptions = true, cursorModel: cursorModelOptions = true } = options ?? {};\n    if (rayModelOptions !== false) {\n        const rayModel = new PointerRayModel(pointer, { opacity: defaultRayPointerOpacity, ...spreadable(rayModelOptions) });\n        raySpace.add(rayModel);\n        undoAddRayModel = () => raySpace.remove(rayModel);\n    }\n    let undoAddCursorModel;\n    if (cursorModelOptions !== false) {\n        const cursorModel = new PointerCursorModel(raySpace, pointer, {\n            opacity: defaultRayPointerOpacity,\n            ...spreadable(cursorModelOptions),\n        });\n        scene.add(cursorModel);\n        undoAddCursorModel = () => scene.remove(cursorModel);\n    }\n    return () => {\n        pointer.exit({ timeStamp: performance.now() });\n        space.remove(raySpace);\n        undoAddRayModel?.();\n        undoAddCursorModel?.();\n        unbind();\n        unregister();\n    };\n}\nexport function createDefaultXRInputSourceTeleportPointer(scene, getCamera, space, state, session, options, combined, makeDefault) {\n    //the space must be created before the pointer to make sure that the space is updated before the pointer\n    const raySpace = new XRSpace(state.inputSource.targetRaySpace);\n    space.add(raySpace);\n    const teleportPointerRayGroup = new Group();\n    scene.add(teleportPointerRayGroup);\n    onXRFrame((_, delta) => syncTeleportPointerRayGroup(raySpace, teleportPointerRayGroup, delta));\n    const linePoints = createTeleportRayLine();\n    const pointer = createLinesPointer(getCamera, { current: teleportPointerRayGroup }, state, { ...options, filter: buildTeleportTargetFilter(options), linePoints }, 'teleport');\n    const unregister = combined.register(pointer, makeDefault);\n    const unbind = bindPointerXRInputSourceEvent(pointer, session, state.inputSource, 'select', state.events);\n    let undoAddRayModel;\n    const { rayModel: rayModelOptions = true, cursorModel: cursorModelOptions = true } = options ?? {};\n    if (rayModelOptions !== false) {\n        const rayModel = new TeleportPointerRayModel(linePoints);\n        rayModel.options = { opacity: defaultRayPointerOpacity, ...spreadable(rayModelOptions) };\n        onXRFrame(() => rayModel.update(pointer));\n        teleportPointerRayGroup.add(rayModel);\n        undoAddRayModel = () => teleportPointerRayGroup.remove(rayModel);\n    }\n    let undoAddCursorModel;\n    if (cursorModelOptions !== false) {\n        const cursorModel = new PointerCursorModel(raySpace, pointer, {\n            opacity: defaultRayPointerOpacity,\n            ...spreadable(cursorModelOptions),\n        });\n        onXRFrame(() => (cursorModel.visible = pointer.getEnabled() && pointer.getButtonsDown().size > 0));\n        scene.add(cursorModel);\n        undoAddCursorModel = () => scene.remove(cursorModel);\n    }\n    return () => {\n        pointer.exit({ timeStamp: performance.now() });\n        space.remove(raySpace);\n        scene.add(teleportPointerRayGroup);\n        undoAddRayModel?.();\n        undoAddCursorModel?.();\n        unbind();\n        unregister();\n    };\n}\nexport function createDefaultXRInputSourceGrabPointer(scene, getCamera, space, state, gripSpace, session, event, options, combined, makeDefault) {\n    //the space must be created before the pointer to make sure that the space is updated before the pointer\n    const gripSpaceObject = new XRSpace(gripSpace);\n    const pointer = createGrabPointer(getCamera, { current: gripSpaceObject }, state, options);\n    const unregister = combined.register(pointer, makeDefault);\n    const unbind = bindPointerXRInputSourceEvent(pointer, session, state.inputSource, event, state.events);\n    space.add(gripSpaceObject);\n    let undoAddCursorModel;\n    if (options?.cursorModel !== false) {\n        const cursorModel = new PointerCursorModel(gripSpaceObject, pointer, {\n            opacity: defaultGrabPointerOpacity,\n        });\n        scene.add(cursorModel);\n        undoAddCursorModel = () => scene.remove(cursorModel);\n    }\n    return () => {\n        unregister();\n        pointer.exit({ timeStamp: performance.now() });\n        space.remove(gripSpaceObject);\n        undoAddCursorModel?.();\n        unbind();\n    };\n}\nexport function createDefaultXRHandTouchPointer(scene, getCamera, space, state, options, combined, makeDefault) {\n    //the space must be created before the pointer to make sure that the space is updated before the pointer\n    const touchSpaceObject = new XRSpace(state.inputSource.hand.get('index-finger-tip'));\n    const pointer = createTouchPointer(getCamera, { current: touchSpaceObject }, state, options);\n    const unregister = combined.register(pointer, makeDefault);\n    space.add(touchSpaceObject);\n    let undoAddCursorModel;\n    const { cursorModel: cursorModelOptions = true } = options ?? {};\n    if (cursorModelOptions !== false) {\n        const cursorModel = new PointerCursorModel(touchSpaceObject, pointer, {\n            opacity: defaultTouchPointerOpacity,\n            ...spreadable(cursorModelOptions),\n        });\n        scene.add(cursorModel);\n        undoAddCursorModel = () => scene.remove(cursorModel);\n    }\n    return () => {\n        unregister();\n        pointer.exit({ timeStamp: performance.now() });\n        space.remove(touchSpaceObject);\n        undoAddCursorModel?.();\n    };\n}\nexport function createDefaultXRHand(scene, getCamera, space, state, session, { grabPointer: grabPointerOptions = true, rayPointer: rayPointerOptions = true, teleportPointer: teleportPointerOptions = false, model: modelOptions = true, touchPointer: touchPointerOptions = true, } = {}, combined) {\n    const combinedPointer = new CombinedPointer(false);\n    const unregisterPointer = combined.register(combinedPointer);\n    let destroyRayPointer;\n    if (rayPointerOptions !== false) {\n        const rayPointerRayModelOptions = spreadable(rayPointerOptions)?.rayModel;\n        destroyRayPointer = createDefaultXRInputSourceRayPointer(scene, getCamera, space, state, session, {\n            minDistance: 0.2,\n            ...spreadable(rayPointerOptions),\n            rayModel: rayPointerRayModelOptions === false\n                ? false\n                : {\n                    maxLength: 0.2,\n                    ...spreadable(rayPointerRayModelOptions),\n                },\n        }, combinedPointer, true);\n    }\n    const destroyTeleportPointer = teleportPointerOptions === false\n        ? undefined\n        : createDefaultXRInputSourceTeleportPointer(scene, getCamera, space, state, session, spreadable(teleportPointerOptions), combinedPointer);\n    const destroyGrabPointer = grabPointerOptions === false\n        ? undefined\n        : createDefaultXRInputSourceGrabPointer(scene, getCamera, space, state, state.inputSource.hand.get('index-finger-tip'), session, 'select', spreadable(grabPointerOptions), combinedPointer);\n    const destroyTouchPointer = touchPointerOptions === false\n        ? undefined\n        : createDefaultXRHandTouchPointer(scene, getCamera, space, state, spreadable(touchPointerOptions), combinedPointer);\n    let removeModel;\n    if (modelOptions !== false) {\n        const model = new XRHandModel(state, spreadable(modelOptions));\n        space.add(model);\n        removeModel = () => space.remove(model);\n    }\n    return () => {\n        unregisterPointer();\n        destroyRayPointer?.();\n        destroyGrabPointer?.();\n        destroyTouchPointer?.();\n        destroyTeleportPointer?.();\n        removeModel?.();\n    };\n}\nexport function createDefaultXRController(scene, getCamera, space, state, session, { rayPointer: rayPointerOptions = true, grabPointer: grabPointerOptions = true, teleportPointer: teleportPointerOptions = false, model: modelOptions = true, } = {}, combined) {\n    const combinedPointer = new CombinedPointer(true);\n    const unregisterPointer = combined.register(combinedPointer);\n    const destroyRayPointer = rayPointerOptions === false\n        ? undefined\n        : createDefaultXRInputSourceRayPointer(scene, getCamera, space, state, session, { minDistance: 0.2, ...spreadable(rayPointerOptions) }, combinedPointer, true);\n    const destroyTeleportPointer = teleportPointerOptions === false\n        ? undefined\n        : createDefaultXRInputSourceTeleportPointer(scene, getCamera, space, state, session, spreadable(teleportPointerOptions), combinedPointer);\n    const destroyGrabPointer = grabPointerOptions === false\n        ? undefined\n        : createDefaultXRInputSourceGrabPointer(scene, getCamera, space, state, state.inputSource.gripSpace, session, 'squeeze', spreadable(grabPointerOptions), combinedPointer);\n    let removeModel;\n    if (modelOptions !== false) {\n        const model = new XRControllerModel(state, spreadable(modelOptions));\n        space.add(model);\n        removeModel = () => space.remove(model);\n    }\n    return () => {\n        unregisterPointer();\n        destroyTeleportPointer?.();\n        destroyRayPointer?.();\n        destroyGrabPointer?.();\n        removeModel?.();\n    };\n}\nexport function createDefaultXRTransientPointer(scene, getCamera, space, state, session, options, combined) {\n    //the space must be created before the pointer to make sure that the space is updated before the pointer\n    const raySpace = new XRSpace(state.inputSource.targetRaySpace);\n    const pointer = createRayPointer(getCamera, { current: raySpace }, state, options);\n    const unregister = combined.register(pointer);\n    const unbind = bindPointerXRInputSourceEvent(pointer, session, state.inputSource, 'select', state.events);\n    space.add(raySpace);\n    let undoAddCursorModel;\n    const { cursorModel: cursorModelOptions = true } = options ?? {};\n    if (cursorModelOptions !== false) {\n        const cursorModel = new PointerCursorModel(raySpace, pointer, {\n            opacity: defaultRayPointerOpacity,\n            ...spreadable(cursorModelOptions),\n        });\n        scene.add(cursorModel);\n        undoAddCursorModel = () => scene.remove(cursorModel);\n    }\n    return () => {\n        unregister();\n        pointer.exit({ timeStamp: performance.now() });\n        space.remove(raySpace);\n        undoAddCursorModel?.();\n        unbind();\n    };\n}\nexport function createDefaultXRGaze(scene, getCamera, space, state, session, options, combined) {\n    //the space must be created before the pointer to make sure that the space is updated before the pointer\n    const raySpace = new XRSpace(state.inputSource.targetRaySpace);\n    const pointer = createRayPointer(getCamera, { current: raySpace }, state, options);\n    const unregister = combined.register(pointer);\n    const unbind = bindPointerXRInputSourceEvent(pointer, session, state.inputSource, 'select', state.events);\n    space.add(raySpace);\n    let undoAddCursorModel;\n    const { cursorModel: cursorModelOptions = true } = options ?? {};\n    if (cursorModelOptions !== false) {\n        const cursorModel = new PointerCursorModel(raySpace, pointer, {\n            opacity: defaultRayPointerOpacity,\n            ...spreadable(cursorModelOptions),\n        });\n        scene.add(cursorModel);\n        undoAddCursorModel = () => scene.remove(cursorModel);\n    }\n    return () => {\n        unregister();\n        pointer.exit({ timeStamp: performance.now() });\n        space.remove(raySpace);\n        undoAddCursorModel?.();\n        unbind();\n    };\n}\nexport function createDefaultXRScreenInput(scene, getCamera, space, state, session, options, combined) {\n    //the space must be created before the pointer to make sure that the space is updated before the pointer\n    const raySpace = new XRSpace(state.inputSource.targetRaySpace);\n    const pointer = createRayPointer(getCamera, { current: raySpace }, state, options);\n    const unregister = combined.register(pointer);\n    const unbind = bindPointerXRInputSourceEvent(pointer, session, state.inputSource, 'select', state.events);\n    space.add(raySpace);\n    return () => {\n        unregister();\n        space.remove(raySpace);\n        pointer.exit({ timeStamp: performance.now() });\n        unbind();\n    };\n}\nfunction spreadable(value) {\n    if (value === true) {\n        return undefined;\n    }\n    return value;\n}\n", "import { Object3D } from 'three';\nimport { onXRFrame } from './utils.js';\nimport { configureXRHandModel, createUpdateXRHandVisuals, loadXRHandModel } from '../hand/index.js';\nimport { getSpaceFromAncestors } from '../space.js';\nexport class XRHandModel extends Object3D {\n    constructor(state, options) {\n        super();\n        let update = () => { };\n        onXRFrame((frame) => update(frame));\n        loadXRHandModel(state.assetPath).then((model) => {\n            this.add(model);\n            state.object = model;\n            configureXRHandModel(model, options);\n            update = createUpdateXRHandVisuals(state.inputSource.hand, model, () => getSpaceFromAncestors(this));\n        });\n    }\n}\n", "import { BoxGeometry, Mesh, PlaneGeometry } from 'three';\nimport { onXRFrame } from './utils.js';\nimport { PointerCursorMaterial, updatePointerCursorModel } from '../pointer/cursor.js';\nimport { PointerRayMaterial, updatePointerRayModel } from '../pointer/ray.js';\nconst pointerRayGeometry = new BoxGeometry();\nexport class PointerRayModel extends Mesh {\n    constructor(pointer, options = {}) {\n        const MaterialClass = options.materialClass ?? PointerRayMaterial;\n        const material = new MaterialClass();\n        super(pointerRayGeometry, material);\n        this.renderOrder = options.renderOrder ?? 2;\n        onXRFrame(() => updatePointerRayModel(this, material, pointer, options));\n    }\n}\nconst pointerCursorGeometry = new PlaneGeometry();\nexport class PointerCursorModel extends Mesh {\n    constructor(pointerGroup, pointer, options = {}) {\n        const MaterialClass = options.materialClass ?? PointerCursorMaterial;\n        const material = new MaterialClass();\n        super(pointerCursorGeometry, material);\n        this.renderOrder = options.renderOrder ?? 1;\n        onXRFrame(() => updatePointerCursorModel(pointerGroup, this, material, pointer, options));\n    }\n}\n", "import { Object3D } from 'three';\nimport { configureXRControllerModel, loadXRControllerModel } from '../controller/model.js';\nimport { createUpdateXRControllerVisuals } from '../controller/visual.js';\nimport { onXRFrame } from './utils.js';\n/**\n * Component for rendering a 3D model for the XRController\n * @param state: XRControllerState\n * @param options: XRControllerModelOptions\n */\nexport class XRControllerModel extends Object3D {\n    constructor(state, options) {\n        super();\n        let update = () => { };\n        onXRFrame(() => update());\n        loadXRControllerModel(state.layout).then((model) => {\n            this.add(model);\n            state.object = model;\n            configureXRControllerModel(model, options);\n            update = createUpdateXRControllerVisuals(model, state.layout, state.gamepad);\n        });\n    }\n}\n", "import { Material, Mesh } from 'three';\nimport { DefaultGltfLoader } from '../index.js';\nexport async function loadXRControllerModel(layout, loader = DefaultGltfLoader) {\n    const { scene } = await loader.loadAsync(layout.assetPath);\n    return scene.clone(true);\n}\n/**\n * function for getting the object of a specific component from the xr controller model\n */\nexport function getXRControllerComponentObject(model, layout, componentId) {\n    const component = layout.components[componentId];\n    const firstVisualResponse = component.visualResponses[Object.keys(component.visualResponses)[0]];\n    if (firstVisualResponse == null) {\n        return undefined;\n    }\n    return model.getObjectByName(firstVisualResponse.valueNodeName);\n}\nexport function configureXRControllerModel(model, options) {\n    model.renderOrder = options?.renderOrder ?? 0;\n    model.traverse((child) => {\n        if (child instanceof Mesh && child.material instanceof Material) {\n            child.material.colorWrite = options?.colorWrite ?? true;\n        }\n    });\n}\n", "import { Vector2 } from 'three';\nexport function createUpdateXRControllerVisuals(model, layout, gamepadState) {\n    const updateVisuals = [];\n    for (const componentName in layout.components) {\n        const component = layout.components[componentName];\n        let state = gamepadState[componentName];\n        if (state == null) {\n            gamepadState[componentName] = state = {\n                state: 'default',\n            };\n        }\n        updateVisuals.push(...Object.values(component.visualResponses).map((visualResponse) => createUpdateVisualResponse(model, state, visualResponse)));\n    }\n    return () => {\n        const length = updateVisuals.length;\n        for (let i = 0; i < length; i++) {\n            updateVisuals[i]();\n        }\n    };\n}\nfunction createUpdateVisualResponse(model, componentState, visualResponse) {\n    const valueNode = model.getObjectByName(visualResponse.valueNodeName);\n    componentState.object = valueNode;\n    if (valueNode == null) {\n        return () => { };\n    }\n    if (visualResponse.valueNodeProperty === 'visibility') {\n        return () => (valueNode.visible = visualResponse.states.includes(componentState.state));\n    }\n    const minNode = model.getObjectByName(visualResponse.minNodeName);\n    const maxNode = model.getObjectByName(visualResponse.maxNodeName);\n    if (minNode == null || maxNode == null) {\n        return () => { };\n    }\n    return () => {\n        const value = getVisualReponseValue(componentState, visualResponse);\n        valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n        valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        valueNode.updateMatrix();\n    };\n}\n/**\n * @returns a value between 0 and 1\n */\nfunction getVisualReponseValue(componentState, { componentProperty, states }) {\n    const stateIsActive = states.includes(componentState.state);\n    switch (componentProperty) {\n        case 'xAxis':\n            return stateIsActive ? getNormalizesAxis(componentState).x : 0.5;\n        case 'yAxis':\n            return stateIsActive ? getNormalizesAxis(componentState).y : 0.5;\n        case 'button':\n            return stateIsActive ? (componentState.button ?? 0) : 0;\n        case 'state':\n            return stateIsActive ? 1.0 : 0.0;\n    }\n}\nconst vector2Helper = new Vector2();\n/**\n * project the point (x: [-1, 1], y: [-1, 1]) onto a circle\n */\nfunction getNormalizesAxis({ xAxis = 0, yAxis = 0 }) {\n    const hypotenuse = vector2Helper.lengthSq(); //we can use the length squared since \"1 * 1 = 1\"\n    if (hypotenuse > 1) {\n        const theta = Math.atan2(yAxis, xAxis);\n        vector2Helper.set(Math.cos(theta), Math.sin(theta));\n    }\n    else {\n        //point is inside the circle\n        vector2Helper.set(xAxis, yAxis);\n    }\n    vector2Helper.multiplyScalar(0.5).addScalar(0.5);\n    return vector2Helper;\n}\n", "import { Mesh } from 'three';\nimport { updateXRMeshGeometry } from '../mesh.js';\nexport class XRMeshModel extends Mesh {\n    constructor(mesh) {\n        super(updateXRMeshGeometry(mesh, undefined));\n        this.onBeforeRender = () => {\n            const newGeometry = updateXRMeshGeometry(mesh, this.geometry);\n            if (newGeometry != this.geometry) {\n                this.geometry.dispose();\n            }\n            this.geometry = newGeometry;\n        };\n    }\n}\n", "import { BufferAttribute, BufferGeometry } from 'three';\nexport function updateXRMeshGeometry(mesh, geometry) {\n    if (geometry != null && geometry.createdAt != null && geometry.createdAt >= mesh.lastChangedTime) {\n        return geometry;\n    }\n    const newGeometry = new BufferGeometry();\n    newGeometry.setIndex(new BufferAttribute(mesh.indices, 1));\n    newGeometry.setAttribute('position', new BufferAttribute(mesh.vertices, 3));\n    return Object.assign(newGeometry, { creationTime: mesh.lastChangedTime });\n}\n", "import { Mesh } from 'three';\nimport { updateXRPlaneGeometry } from '../plane.js';\nexport class XRPlaneModel extends Mesh {\n    constructor(plane) {\n        super(updateXRPlaneGeometry(plane, undefined));\n        this.onBeforeRender = () => {\n            const newGeometry = updateXRPlaneGeometry(plane, this.geometry);\n            if (newGeometry != this.geometry) {\n                this.geometry.dispose();\n            }\n            this.geometry = newGeometry;\n        };\n    }\n}\n", "import { Box2, BufferGeometry, Shape, ShapeGeometry, Vector2 } from 'three';\nexport function updateXRPlaneGeometry(plane, geometry) {\n    if (geometry != null && geometry.createdAt != null && geometry.createdAt >= plane.lastChangedTime) {\n        return geometry;\n    }\n    return Object.assign(createGeometryFromPolygon(plane.polygon), { createdAt: plane.lastChangedTime });\n}\nconst boxHelper = new Box2();\nconst sizeHelper = new Vector2();\nfunction createGeometryFromPolygon(polygon) {\n    if (polygon.length === 0) {\n        return new BufferGeometry();\n    }\n    const shape = new Shape();\n    const points = polygon.map(({ x, z }) => new Vector2(x, z));\n    //we measure the size and scale & unscale to have normalized UVs for the geometry\n    boxHelper.setFromPoints(points);\n    boxHelper.getSize(sizeHelper);\n    for (const point of points) {\n        point.sub(boxHelper.min);\n        point.divide(sizeHelper);\n    }\n    shape.setFromPoints(points);\n    const geometry = new ShapeGeometry(shape);\n    geometry.scale(sizeHelper.x, sizeHelper.y, 1);\n    geometry.translate(boxHelper.min.x, boxHelper.min.y, 0);\n    geometry.rotateX(Math.PI / 2);\n    return geometry;\n}\n", "import { Group } from 'three';\nexport class XROrigin extends Group {\n    constructor(camera) {\n        super();\n        this.add(camera);\n    }\n}\n", "import { Mesh, MeshBasicMaterial, WebGLRenderTarget } from 'three';\nimport { createXRLayer, createXRLayerGeometry, getXRLayerSrcTexture, setupXRImageLayer, updateXRLayerProperties, updateXRLayerTransform, waitForXRLayerSrcSize, } from '../layer.js';\nexport class XRLayer extends Mesh {\n    store;\n    options;\n    properties;\n    layerRenderOrder;\n    layerEntry;\n    cleanup;\n    cleanupSubscription;\n    constructor(store, renderer, options, properties = {}, layerRenderOrder = 0) {\n        super(createXRLayerGeometry(options.shape ?? 'quad', properties), new MeshBasicMaterial({ toneMapped: false }));\n        this.store = store;\n        this.options = options;\n        this.properties = properties;\n        this.layerRenderOrder = layerRenderOrder;\n        this.frustumCulled = false; //to prevent onBeforeRender from not beeing called\n        let aborted = false;\n        this.cleanup = () => (aborted = true);\n        waitForXRLayerSrcSize(options.src).then(() => {\n            if (aborted) {\n                return;\n            }\n            const update = ({ session, originReferenceSpace }, prevState) => {\n                if (originReferenceSpace == null) {\n                    return;\n                }\n                if (prevState != null && session === prevState.session) {\n                    return;\n                }\n                this.cleanup?.();\n                const layersEnabled = session?.enabledFeatures?.includes('layers') === true;\n                this.material.colorWrite = !layersEnabled;\n                this.renderOrder = layersEnabled ? -Infinity : 0;\n                if (!layersEnabled) {\n                    this.material.colorWrite = true;\n                    const texture = getXRLayerSrcTexture(options.src);\n                    this.material.map = texture;\n                    this.material.needsUpdate = true;\n                    this.cleanup = options.src instanceof WebGLRenderTarget ? () => { } : () => texture.dispose();\n                    return;\n                }\n                this.material.map = null;\n                const layer = createXRLayer(options.src, store.getState(), originReferenceSpace, renderer.xr, this, options, properties);\n                if (layer == null) {\n                    this.cleanup = () => { };\n                    return;\n                }\n                const layerEntry = (this.layerEntry = { layer, renderOrder: this.layerRenderOrder, object3D: this });\n                store.addLayerEntry(this.layerEntry);\n                if (options.src instanceof HTMLVideoElement || options.src instanceof WebGLRenderTarget) {\n                    this.cleanup = () => this.store.removeLayerEntry(layerEntry);\n                    return;\n                }\n                const cleanupXRImageLayer = setupXRImageLayer(renderer, store, layer, options.src);\n                this.cleanup = () => {\n                    this.store.removeLayerEntry(layerEntry);\n                    cleanupXRImageLayer();\n                };\n            };\n            update(store.getState());\n            this.cleanupSubscription = store.subscribe(update);\n        });\n    }\n    setLayerRenderOrder(layerRenderOrder) {\n        this.layerRenderOrder = layerRenderOrder;\n        if (this.layerEntry != null) {\n            this.layerEntry.renderOrder = layerRenderOrder;\n        }\n    }\n    setProperties(properties = {}) {\n        this.properties = properties;\n        this.geometry.dispose();\n        this.geometry = createXRLayerGeometry(this.options.shape ?? 'quad', properties);\n        if (this.layerEntry != null) {\n            updateXRLayerProperties(this.layerEntry.layer, properties);\n        }\n    }\n    destroy() {\n        this.cleanupSubscription?.();\n        this.cleanup?.();\n    }\n    onBeforeRender() {\n        if (this.layerEntry == null) {\n            return;\n        }\n        updateXRLayerTransform(this.store.getState(), this.layerEntry?.layer, this.properties.centralAngle, this);\n    }\n}\n", "import { CylinderGeometry, DepthTexture, HalfFloatType, LinearFilter, Matrix4, PlaneGeometry, Quaternion, SphereGeometry, SRGBColorSpace, Texture, Vector3, VideoTexture, WebGLRenderTarget, } from 'three';\nimport { getSpaceFromAncestors } from './space.js';\nimport { nanToDefault, toDOMPointInit } from './utils.js';\nconst DefaultCentralAngle = (60 / 180) * Math.PI;\nconst DefaultCentralHorizontalAngle = (60 / 180) * Math.PI;\nconst DefaultLowerVerticalAngle = (-30 / 180) * Math.PI;\nconst DefaultUpperVerticalAngle = (30 / 180) * Math.PI;\nexport function createXRLayer(src, state, originReferenceSpace, xrManager, relativeTo, options, properties) {\n    return src instanceof HTMLVideoElement\n        ? createXRVideoLayer(src, state, originReferenceSpace, relativeTo, options, properties)\n        : createXRNormalLayer(src, state.origin, originReferenceSpace, xrManager, relativeTo, options, properties);\n}\nfunction createXRVideoLayer(src, state, originReferenceSpace, relativeTo, { invertStereo, layout, shape = 'quad' }, properties = {}) {\n    const space = getSpaceFromAncestors(relativeTo, state.origin, originReferenceSpace, matrixHelper);\n    const transform = matrixToRigidTransform(matrixHelper, scaleHelper);\n    const init = {\n        invertStereo,\n        layout,\n        space,\n        transform,\n    };\n    applyXRLayerScale(shape, init, properties.centralAngle, scaleHelper);\n    const fnName = `create${capitalize(shape)}Layer`;\n    const layer = state.mediaBinding?.[fnName](src, init);\n    if (layer == null) {\n        return undefined;\n    }\n    updateXRLayerProperties(layer, properties);\n    return layer;\n}\nfunction createXRNormalLayer(src, origin, originReferenceSpace, xrManager, relativeTo, { shape = 'quad', ...options }, properties = {}) {\n    const space = getSpaceFromAncestors(relativeTo, origin, originReferenceSpace, matrixHelper);\n    const transform = matrixToRigidTransform(matrixHelper, scaleHelper);\n    const init = {\n        ...options,\n        isStatic: !(src instanceof WebGLRenderTarget),\n        textureType: 'texture',\n        viewPixelWidth: options.layout === 'stereo-left-right' ? src.width / 2 : src.width,\n        viewPixelHeight: options.layout === 'stereo-top-bottom' ? src.height / 2 : src.height,\n        space,\n        transform,\n    };\n    applyXRLayerScale(shape, init, properties.centralAngle, scaleHelper);\n    const fnName = `create${capitalize(shape)}Layer`;\n    const layer = xrManager.getBinding()?.[fnName](init);\n    if (layer == null) {\n        return undefined;\n    }\n    updateXRLayerProperties(layer, properties);\n    return layer;\n}\nconst matrixHelper = new Matrix4();\nconst vectorHelper = new Vector3();\nconst quaternionHelper = new Quaternion();\nconst scaleHelper = new Vector3();\n/**\n * @param matrix is allowed to contain nan values\n */\nfunction matrixToRigidTransform(matrix, scaleTarget = scaleHelper) {\n    //assume matrix can contain nan values\n    matrix.decompose(vectorHelper, quaternionHelper, scaleTarget);\n    scaleTarget.x = nanToDefault(scaleTarget.x);\n    scaleTarget.y = nanToDefault(scaleTarget.y);\n    scaleTarget.z = nanToDefault(scaleTarget.z);\n    return new XRRigidTransform(toDOMPointInit(vectorHelper), toDOMPointInit(quaternionHelper));\n}\nconst segmentPerAngle = 64 / Math.PI;\nfunction computeSegmentAmount(angle) {\n    return Math.ceil(angle * segmentPerAngle);\n}\nexport function setXRLayerRenderTarget(renderer, renderTarget, layerEntry, frame) {\n    if (layerEntry != null && frame != null) {\n        const subImage = renderer.xr.getBinding().getSubImage(layerEntry.layer, frame);\n        renderer.setRenderTargetTextures(renderTarget, subImage.colorTexture);\n    }\n    renderer.setRenderTarget(renderTarget);\n}\nexport function createXRLayerGeometry(shape, properties) {\n    switch (shape) {\n        case 'cylinder':\n            const centralAngle = properties.centralAngle ?? DefaultCentralAngle;\n            return new CylinderGeometry(1, 1, 1, computeSegmentAmount(centralAngle), 1, true, Math.PI - centralAngle / 2, centralAngle).scale(-1, 1, 1);\n        case 'equirect': {\n            const centralHorizontalAngle = properties.centralHorizontalAngle ?? DefaultCentralHorizontalAngle;\n            const upperVerticalAngle = properties.upperVerticalAngle ?? DefaultUpperVerticalAngle;\n            const lowerVerticalAngle = properties.lowerVerticalAngle ?? DefaultLowerVerticalAngle;\n            const centralVerticalAngle = upperVerticalAngle - lowerVerticalAngle;\n            return new SphereGeometry(1, computeSegmentAmount(centralHorizontalAngle), computeSegmentAmount(centralVerticalAngle), -Math.PI / 2 - centralHorizontalAngle / 2, centralHorizontalAngle, Math.PI / 2 - upperVerticalAngle, centralVerticalAngle).scale(-1, 1, 1);\n        }\n        case 'quad':\n            return new PlaneGeometry();\n    }\n}\nfunction capitalize(text) {\n    return `${text[0].toUpperCase()}${text.slice(1)}`;\n}\nexport function updateXRLayerProperties(target, properties = {}) {\n    target.chromaticAberrationCorrection = properties.chromaticAberrationCorrection;\n    target.quality = properties.quality ?? 'default';\n    target.blendTextureSourceAlpha = properties.blendTextureSourceAlpha ?? false;\n    if (target instanceof XRCylinderLayer) {\n        target.centralAngle = properties?.centralAngle ?? DefaultCentralAngle;\n        return;\n    }\n    if (target instanceof XREquirectLayer) {\n        target.centralHorizontalAngle = properties?.centralHorizontalAngle ?? DefaultCentralHorizontalAngle;\n        target.lowerVerticalAngle = properties?.lowerVerticalAngle ?? DefaultLowerVerticalAngle;\n        target.upperVerticalAngle = properties?.upperVerticalAngle ?? DefaultUpperVerticalAngle;\n    }\n}\nexport function setupXRImageLayer(renderer, store, layer, src) {\n    let stop = false;\n    const draw = async () => {\n        const frame = await store.requestFrame();\n        if (stop) {\n            return;\n        }\n        writeContentToXRLayer(renderer, layer, frame, src);\n    };\n    layer.addEventListener('redraw', draw);\n    draw();\n    return () => {\n        stop = true;\n        layer.removeEventListener('redraw', draw);\n    };\n}\nexport async function waitForXRLayerSrcSize(src) {\n    if (src instanceof HTMLImageElement && !src.complete) {\n        await new Promise((resolve) => {\n            const onResolve = () => {\n                resolve();\n                src.removeEventListener('load', onResolve);\n            };\n            src.addEventListener('load', onResolve);\n        });\n    }\n    if (src instanceof HTMLVideoElement && src.readyState < 1) {\n        return new Promise((resolve) => {\n            const onResolve = () => {\n                resolve();\n                src.removeEventListener('loadedmetadata', onResolve);\n            };\n            src.addEventListener('loadedmetadata', onResolve);\n        });\n    }\n}\nexport function getXRLayerSrcTexture(src) {\n    if (src instanceof WebGLRenderTarget) {\n        return src.texture;\n    }\n    const texture = src instanceof HTMLVideoElement ? new VideoTexture(src) : new Texture(src);\n    texture.colorSpace = SRGBColorSpace;\n    texture.needsUpdate = true;\n    return texture;\n}\nfunction writeContentToXRLayer(renderer, layer, frame, content) {\n    const context = renderer.getContext();\n    const subImage = renderer.xr.getBinding().getSubImage(layer, frame);\n    renderer.state.bindTexture(context.TEXTURE_2D, subImage.colorTexture);\n    context.pixelStorei(context.UNPACK_FLIP_Y_WEBGL, true);\n    context.texSubImage2D(context.TEXTURE_2D, 0, 0, 0, content.width, content.height, context.RGBA, context.UNSIGNED_BYTE, content);\n}\nexport function updateXRLayerTransform(state, target, centralAngle, relativeTo) {\n    if (state.originReferenceSpace == null) {\n        return;\n    }\n    target.space = getSpaceFromAncestors(relativeTo, state.origin, state.originReferenceSpace, matrixHelper);\n    target.transform = matrixToRigidTransform(matrixHelper, scaleHelper);\n    applyXRLayerScale(getLayerShape(target), target, centralAngle, scaleHelper);\n}\nfunction applyXRLayerScale(shape, target, centralAngle, scale) {\n    if (shape === 'cylinder') {\n        //0.5 * avg of x and z axis\n        const scaleXZ = (scale.x + scale.z) / 2;\n        const radius = scaleXZ;\n        const layerWidth = radius * (centralAngle ?? DefaultCentralAngle);\n        target.radius = radius;\n        target.aspectRatio = scale.y === 0 ? 1 : layerWidth / scale.y;\n    }\n    else if (shape === 'quad') {\n        target.width = scale.x / 2;\n        target.height = scale.y / 2;\n    }\n    else {\n        target.radius = (scale.x + scale.y + scale.z) / 3;\n    }\n}\nexport function getLayerShape(layer) {\n    if (layer instanceof XRCylinderLayer) {\n        return 'cylinder';\n    }\n    if (layer instanceof XREquirectLayer) {\n        return 'equirect';\n    }\n    return 'quad';\n}\nexport function createXRLayerRenderTarget(pixelWidth, pixelHeight, dpr) {\n    return new WebGLRenderTarget(pixelWidth * dpr, pixelHeight * dpr, {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        type: HalfFloatType,\n        depthTexture: new DepthTexture(pixelWidth, pixelHeight),\n    });\n}\n", "/**\n * @param value is allowed to contain nan values\n */\nexport function toDOMPointInit(value, defaultW = 1) {\n    if (value == null) {\n        return undefined;\n    }\n    return {\n        x: nanToDefault(value.x),\n        y: nanToDefault(value.y),\n        z: nanToDefault(value.z),\n        w: 'w' in value ? nanToDefault(value.w, defaultW) : defaultW,\n    };\n}\nexport function nanToDefault(value, defaultValue = 0) {\n    if (isNaN(value)) {\n        return defaultValue;\n    }\n    return value;\n}\n", "import { MeshLineGeometry, MeshLineMaterial } from 'meshline';\nimport { Euler, Mesh, QuadraticBezierCurve3, Quaternion, Vector3, } from 'three';\nimport { clamp } from 'three/src/math/MathUtils.js';\n/**\n * marks its children as teleportable\n */\nexport function makeTeleportTarget(root, camera, onTeleport) {\n    root.traverse((object) => (object.userData.teleportTarget = true));\n    const listener = (e) => {\n        if ('point' in e && e.point instanceof Vector3) {\n            const c = typeof camera === 'function' ? camera() : camera;\n            const point = new Vector3().setFromMatrixPosition(c.matrix).negate().setComponent(1, 0).add(e.point);\n            onTeleport(point, e);\n        }\n    };\n    root.addEventListener('pointerup', listener);\n    return () => {\n        root.traverse((object) => (object.userData.teleportTarget = false));\n        root.removeEventListener('pointerup', listener);\n    };\n}\nconst eulerHelper = new Euler(0, 0, 0, 'YXZ');\nconst quaternionHelper = new Quaternion();\n/**\n * @param space\n * @param rayGroup must be placed directly into the scene\n */\nexport function syncTeleportPointerRayGroup(space, rayGroup, deltaTimeMs) {\n    space.updateWorldMatrix(true, false);\n    space.matrixWorld.decompose(rayGroup.position, quaternionHelper, rayGroup.scale);\n    eulerHelper.setFromQuaternion(quaternionHelper);\n    eulerHelper.z = 0;\n    eulerHelper.x = clamp(eulerHelper.x - (10 * Math.PI) / 180, -Math.PI / 2, (1.1 * Math.PI) / 4);\n    quaternionHelper.setFromEuler(eulerHelper);\n    rayGroup.quaternion.slerp(quaternionHelper, deltaTimeMs / 100);\n}\n/**\n * check if the object is marked as teleportable\n */\nexport function isTeleportTarget(object) {\n    return object.userData.teleportTarget === true;\n}\nexport function buildTeleportTargetFilter(options = {}) {\n    return (object, pointerEvents, pointerEventsType, pointerEventsOrder) => {\n        if (!isTeleportTarget(object)) {\n            return false;\n        }\n        if (options.filter != null && !options.filter(object, pointerEvents, pointerEventsType, pointerEventsOrder)) {\n            return false;\n        }\n        return true;\n    };\n}\nexport function createTeleportRayLine() {\n    const curve = new QuadraticBezierCurve3(new Vector3(0, 0, 0), new Vector3(0, 0, -8), new Vector3(0, -20, -15));\n    return curve.getPoints(20);\n}\nexport class TeleportPointerRayModel extends Mesh {\n    multiplier;\n    lineLengths;\n    options = {};\n    constructor(points) {\n        const geometry = new MeshLineGeometry();\n        const float32Array = new Float32Array(points.length * 3);\n        for (let i = 0; i < points.length; i++) {\n            points[i].toArray(float32Array, i * 3);\n        }\n        geometry.setPoints(float32Array);\n        const multiplier = (points.length * 3 - 3) / (points.length * 3 - 1);\n        const material = new MeshLineMaterial({\n            lineWidth: 0.1,\n            resolution: undefined,\n            visibility: multiplier,\n        });\n        super(geometry, material);\n        this.material.transparent = true;\n        this.multiplier = multiplier;\n        this.material = material;\n        this.lineLengths = points.slice(0, -1).map((p, i) => p.distanceTo(points[i + 1]));\n    }\n    update(pointer) {\n        const enabled = pointer.getEnabled();\n        const intersection = pointer.getIntersection();\n        if (!enabled || pointer.getButtonsDown().size === 0 || intersection == null) {\n            this.visible = false;\n            return;\n        }\n        this.visible = true;\n        if (intersection.details.type != 'lines') {\n            this.material.visibility = this.multiplier;\n            return;\n        }\n        const { distanceOnLine, lineIndex } = intersection.details;\n        const lineLength = this.lineLengths[lineIndex];\n        this.material.visibility = (this.multiplier * (lineIndex + distanceOnLine / lineLength)) / this.lineLengths.length;\n        const { color = 'white', opacity = 0.4, size = 0.01 } = this.options;\n        this.material.lineWidth = size;\n        this.material.opacity = typeof opacity === 'function' ? opacity(pointer) : opacity;\n        const resolvedColor = typeof color === 'function' ? color(pointer) : color;\n        if (Array.isArray(resolvedColor)) {\n            this.material.color.set(...resolvedColor);\n        }\n        else {\n            this.material.color.set(resolvedColor);\n        }\n    }\n}\n", "import { Matrix4, Quaternion, Vector3 } from 'three';\nimport { getSpaceFromAncestors } from './internals.js';\nimport { toDOMPointInit } from './utils.js';\nconst matrixHelper = new Matrix4();\nconst vectorHelper = new Vector3();\nconst scaleHelper = new Vector3();\nconst quaternionHelper = new Quaternion();\nexport async function createXRHitTestSource(store, session, relativeTo, trackableType = ['point', 'plane', 'mesh']) {\n    if (typeof relativeTo === 'string') {\n        relativeTo = await session.requestReferenceSpace(relativeTo);\n    }\n    const entityTypes = Array.isArray(trackableType) ? trackableType : [trackableType];\n    //necassary data for request and compute hit test results\n    let options;\n    let baseSpace;\n    let object;\n    const state = store.getState();\n    if (relativeTo instanceof XRSpace) {\n        //configure for request and compute hit test results\n        options = { space: relativeTo, entityTypes };\n        object = state.origin;\n    }\n    else {\n        //compute space\n        const space = getSpaceFromAncestors(relativeTo, state.origin, state.originReferenceSpace, matrixHelper);\n        if (space == null) {\n            return undefined;\n        }\n        //compute offset ray\n        matrixHelper.decompose(vectorHelper, quaternionHelper, scaleHelper);\n        const point = toDOMPointInit(vectorHelper);\n        vectorHelper.set(0, 0, -1).applyQuaternion(quaternionHelper);\n        const offsetRay = new XRRay(point, toDOMPointInit(vectorHelper, 0));\n        //configure for request and compute hit test results\n        object = relativeTo;\n        options = { space, offsetRay, entityTypes };\n        baseSpace = space;\n    }\n    const source = await session?.requestHitTestSource?.(options);\n    if (source == null) {\n        return undefined;\n    }\n    return {\n        source,\n        getWorldMatrix: computeWorldMatrixFromXRHitTestResult.bind(null, store, baseSpace, object),\n    };\n}\nexport async function requestXRHitTest(store, relativeTo, trackableType) {\n    const session = store.getState().session;\n    if (session == null) {\n        return;\n    }\n    const sourceData = await createXRHitTestSource(store, session, relativeTo, trackableType);\n    if (sourceData == null) {\n        return undefined;\n    }\n    const { source, getWorldMatrix } = sourceData;\n    const frame = await store.requestFrame();\n    const results = frame.getHitTestResults?.(source) ?? [];\n    source.cancel();\n    if (results == null) {\n        return undefined;\n    }\n    return { results, getWorldMatrix };\n}\nfunction computeWorldMatrixFromXRHitTestResult(store, baseSpace, object, target, result) {\n    baseSpace ??= store.getState().originReferenceSpace;\n    if (baseSpace == null) {\n        return false;\n    }\n    const pose = result.getPose(baseSpace);\n    if (pose == null) {\n        return false;\n    }\n    //target = ObjectMatrixWorld? * HitTestMatrix\n    target.fromArray(pose.transform.matrix);\n    if (object != null) {\n        object.updateWorldMatrix(true, false);\n        target.premultiply(object.matrixWorld);\n    }\n    return true;\n}\n", "import { Matrix4, Quaternion, Vector3 } from 'three';\nimport { toDOMPointInit } from './utils.js';\nconst OneVector = new Vector3(1, 1, 1);\nconst ZeroVector = new Vector3(0, 0, 0);\nconst NeutralQuaternion = new Quaternion();\nconst matrixHelper1 = new Matrix4();\nconst matrixHelper2 = new Matrix4();\nconst quaternionHelper = new Quaternion();\nconst positionHelper = new Vector3();\nconst vectorHelper = new Vector3();\nexport async function requestXRAnchor(store, options) {\n    if (options.relativeTo === 'hit-test-result') {\n        return options.hitTestResult.createAnchor?.(new XRRigidTransform(toDOMPointInit(options.offsetPosition), toDOMPointInit(options.offsetQuaternion)));\n    }\n    let frame;\n    let space;\n    if (options.relativeTo === 'world') {\n        frame = options.frame ?? (await store.requestFrame());\n        const { origin, originReferenceSpace } = store.getState();\n        if (originReferenceSpace == null) {\n            return undefined;\n        }\n        space = originReferenceSpace;\n        const { worldPosition, worldQuaternion } = options;\n        if (origin != null) {\n            //compute vectorHelper and quaternionHelper in the local space of the origin\n            origin.updateWorldMatrix(true, false);\n            matrixHelper1.copy(origin.matrixWorld).invert();\n            matrixHelper2.compose(worldPosition, worldQuaternion, OneVector).multiply(matrixHelper1);\n            matrixHelper2.decompose(positionHelper, quaternionHelper, vectorHelper);\n        }\n        else {\n            positionHelper.copy(worldPosition);\n            quaternionHelper.copy(worldQuaternion);\n        }\n    }\n    else {\n        frame = options.frame ?? (await store.requestFrame());\n        space = options.space;\n        const { offsetPosition, offsetQuaternion } = options;\n        positionHelper.copy(offsetPosition ?? ZeroVector);\n        quaternionHelper.copy(offsetQuaternion ?? NeutralQuaternion);\n    }\n    return frame.createAnchor?.(new XRRigidTransform(toDOMPointInit(positionHelper), toDOMPointInit(quaternionHelper)), space);\n}\n", "import { Euler, MathUtils, Quaternion, Vector3 } from 'three';\n// useXRControllerLocomotion defaults and constants\nconst defaultSpeed = 2;\nconst defaultSmoothTurningSpeed = 2;\nconst defaultSnapDegrees = 45;\nconst defaultDeadZone = 0.5;\nconst thumbstickPropName = 'xr-standard-thumbstick';\nconst vectorHelper = new Vector3();\nconst quaternionHelper = new Quaternion();\nconst eulerHelper = new Euler();\nconst positionHelper = new Vector3();\nconst scaleHelper = new Vector3();\n/**\n * Function for handling controller based locomotion in VR\n * @param target Either an `Object`, or a callback function. Recieves translation and rotation input (required).\n * @param translationOptions Options that control the translation of the user. Set to `false` to disable.\n * @param translationOptions.speed The speed at which the user moves.\n * @param rotationOptions Options that control the rotation of the user. Set to `false` to disable.\n * @param rotationOptions.deadZone How far the joystick must be pushed to trigger a turn.\n * @param rotationOptions.type Controls how rotation using the controller functions. Can be either 'smooth' or 'snap'.\n * @param rotationOptions.degrees If `type` is 'snap', this specifies the number of degrees to snap the user's view by.\n * @param rotationOptions.speed If `type` is 'smooth', this specifies the speed at which the user's view rotates.\n * @param translationControllerHand Specifies which hand will control the translation. Can be either 'left' or 'right'.\n */\nexport function createXRControllerLocomotionUpdate() {\n    let canRotate = true;\n    return (target, store, camera, delta, translationOptions = {}, rotationOptions = {}, translationControllerHand = 'left', ...params) => {\n        const { inputSourceStates } = store.getState();\n        const rotationControllerHand = translationControllerHand === 'left' ? 'right' : 'left';\n        const translationController = inputSourceStates.find((state) => isControllerWithHandedness(state, translationControllerHand));\n        const rotationController = inputSourceStates.find((state) => isControllerWithHandedness(state, rotationControllerHand));\n        if (translationController == null || rotationController == null) {\n            return;\n        }\n        const translationThumbstickState = translationController.gamepad[thumbstickPropName];\n        const translationXAxis = translationThumbstickState?.xAxis ?? 0;\n        const translationYAxis = translationThumbstickState?.yAxis ?? 0;\n        const rotationXAxis = rotationController.gamepad[thumbstickPropName]?.xAxis ?? 0;\n        //handle rotation\n        let yRotationChange;\n        if (rotationOptions !== false) {\n            if (rotationOptions === true) {\n                rotationOptions = {};\n            }\n            if (rotationOptions.type === 'smooth') {\n                if (Math.abs(rotationXAxis) > (rotationOptions.deadZone ?? defaultDeadZone)) {\n                    yRotationChange = (rotationXAxis < 0 ? -1 : 1) * delta * (rotationOptions.speed ?? defaultSmoothTurningSpeed);\n                }\n            }\n            else {\n                if (Math.abs(rotationXAxis) < (rotationOptions.deadZone ?? defaultDeadZone)) {\n                    canRotate = true;\n                }\n                else if (canRotate) {\n                    canRotate = false;\n                    yRotationChange =\n                        (rotationXAxis > 0 ? -1 : 1) * MathUtils.degToRad(rotationOptions.degrees ?? defaultSnapDegrees);\n                }\n            }\n        }\n        //handle translation\n        const translationChanged = translationXAxis != 0 || translationYAxis != 0;\n        if (translationOptions !== false && translationChanged) {\n            if (translationOptions === true) {\n                translationOptions = {};\n            }\n            const { speed = defaultSpeed } = translationOptions;\n            vectorHelper.set(translationXAxis * speed, 0, translationYAxis * speed);\n            camera.matrixWorld.decompose(positionHelper, quaternionHelper, scaleHelper);\n            vectorHelper.applyQuaternion(quaternionHelper);\n            if (yRotationChange) {\n                vectorHelper.applyEuler(eulerHelper.set(0, yRotationChange, 0, 'YXZ'));\n            }\n        }\n        if (!translationChanged && yRotationChange == null) {\n            return;\n        }\n        //apply translation and rotation:\n        if (typeof target === 'function') {\n            target(vectorHelper, yRotationChange ?? 0, ...params);\n            return;\n        }\n        if (target == null) {\n            return;\n        }\n        target.position.x += vectorHelper.x * delta;\n        target.position.z += vectorHelper.z * delta;\n        target.rotation.y += yRotationChange ?? 0;\n    };\n}\nfunction isControllerWithHandedness(state, handedness) {\n    return state.type === 'controller' && state.inputSource.handedness === handedness;\n}\n", "export function syncAsync(fn, ...fns) {\n    let value = fn();\n    for (const fnEntry of fns) {\n        if (value instanceof Promise) {\n            value = value.then(fnEntry);\n        }\n        else {\n            value = fnEntry(value);\n        }\n    }\n    return value;\n}\n", "import { DefaultAssetBasePath } from '../index.js';\nimport { syncAsync } from './utils.js';\nconst DefaultDefaultControllerProfileId = 'generic-trigger';\nexport class XRControllerLayoutLoader {\n    baseAssetPath;\n    defaultProfileId;\n    //cache\n    profilesListCache;\n    profileCacheMap = new Map();\n    constructor(options) {\n        this.baseAssetPath = options?.baseAssetPath ?? DefaultAssetBasePath;\n        this.defaultProfileId = options?.defaultControllerProfileId ?? DefaultDefaultControllerProfileId;\n    }\n    load(inputSourceProfileIds, handedness) {\n        return syncAsync(\n        //load profile\n        () => this.loadProfile(inputSourceProfileIds), \n        //get controller layout from profile\n        (profile) => {\n            for (const key in profile.layouts) {\n                if (!key.includes(handedness)) {\n                    continue;\n                }\n                return profile.layouts[key];\n            }\n            throw new Error(`No matching layout for \"${handedness}\", in profile ${profile.profileId} with layouts ${Object.keys(profile.layouts).join(', ')}.`);\n        });\n    }\n    //alias for Loader compatibility\n    loadAsync = this.load;\n    loadProfile(inputSourceProfileIds) {\n        return syncAsync(\n        //load profiles list\n        () => this.profilesListCache ??\n            fetchJson(new URL('profilesList.json', this.baseAssetPath).href).then((profilesList) => (this.profilesListCache = profilesList)), \n        //load profile\n        (profilesList) => {\n            const length = inputSourceProfileIds.length;\n            let profileInfo;\n            for (let i = 0; i < length; i++) {\n                profileInfo = profilesList[inputSourceProfileIds[i]];\n                if (profileInfo != null) {\n                    break;\n                }\n            }\n            profileInfo ??= profilesList[this.defaultProfileId];\n            if (profileInfo == null) {\n                throw new Error(`no matching profile found for profiles \"${inputSourceProfileIds.join(', ')}\" in profile list ${JSON.stringify(profilesList)}`);\n            }\n            return this.loadProfileFromPath(profileInfo.path);\n        });\n    }\n    loadProfileFromPath(relativeProfilePath) {\n        const result = this.profileCacheMap.get(relativeProfilePath);\n        if (result != null) {\n            return result;\n        }\n        const absoluteProfilePath = new URL(relativeProfilePath, this.baseAssetPath).href;\n        return fetchJson(absoluteProfilePath).then((profile) => {\n            //overwrite the relative assetPath into an absolute path\n            for (const key in profile.layouts) {\n                const layout = profile.layouts[key];\n                if (layout == null) {\n                    continue;\n                }\n                layout.assetPath = new URL(layout.assetPath, absoluteProfilePath).href;\n            }\n            this.profileCacheMap.set(relativeProfilePath, profile);\n            return profile;\n        });\n    }\n}\nasync function fetchJson(url) {\n    let response = await fetch(url);\n    if (!response.ok) {\n        return Promise.reject(new Error(response.statusText));\n    }\n    return response.json();\n}\n", "import { updateXRControllerGamepadState } from './gamepad.js';\nimport { syncAsync } from './utils.js';\nexport function createXRControllerState(id, inputSource, layoutLoader, events, isPrimary) {\n    return syncAsync(() => layoutLoader.load(inputSource.profiles, inputSource.handedness), (layout) => {\n        const gamepad = {};\n        updateXRControllerGamepadState(gamepad, inputSource, layout);\n        return {\n            id,\n            isPrimary,\n            events,\n            type: 'controller',\n            inputSource,\n            gamepad,\n            layout,\n        };\n    });\n}\nexport function updateXRControllerState({ gamepad, inputSource, layout }) {\n    updateXRControllerGamepadState(gamepad, inputSource, layout);\n}\n", "import { createContext } from 'react';\nexport const xrContext = createContext(undefined);\nexport const xrInputSourceStateContext = createContext(undefined);\nexport const xrSpaceContext = createContext(undefined);\nexport const combinedPointerContext = createContext(undefined);\n", "import { bindXRInputSourceEvent, } from '@pmndrs/xr/internals';\nimport { useContext, useEffect } from 'react';\nimport { xrInputSourceStateContext } from './contexts.js';\nimport { useXR } from './xr.js';\nexport function useXRInputSourceStates() {\n    return useXR((xr) => xr.inputSourceStates);\n}\nexport function useXRInputSourceState(type, handedness) {\n    return useXR((s) => s.inputSourceStates.find((state) => state.type === type && (handedness == null || state.inputSource.handedness === handedness)));\n}\nexport function useXRInputSourceStateContext(type) {\n    const state = useContext(xrInputSourceStateContext);\n    if (state == null) {\n        throw new Error(`useXRInputSourceStateContext() can only be used inside the xr store config`);\n    }\n    if (type != null && state.type != type) {\n        throw new Error(`useXRInputSourceStateContext(${type}) can not be used inside a component for input type \"${state.type}\"`);\n    }\n    return state;\n}\n/**\n * Hook for listening to xr input source events\n * @param inputSource The input source to listen to, or 'all' to listen to all input sources\n * @param event The event to listen to. ([List of events](https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent))\n * @param fn Callback function called when the event is triggered.\n * @param deps Retriggers the binding of the event when the dependencies change.\n */\nexport function useXRInputSourceEvent(inputSource, event, fn, deps) {\n    const session = useXR((xr) => xr.session);\n    useEffect(() => {\n        if (session == null || inputSource == null) {\n            return;\n        }\n        return bindXRInputSourceEvent(session, inputSource, event, fn);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [event, inputSource, session, ...deps]);\n}\n", "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { CombinedPointer } from '@pmndrs/pointer-events';\nimport { setupSyncIsVisible } from '@pmndrs/xr';\nimport { createXRStore as createXRStoreImpl, } from '@pmndrs/xr/internals';\nimport { useFrame, useStore as useRootStore, useThree } from '@react-three/fiber';\nimport { useContext, useEffect, useMemo } from 'react';\nimport { useStore } from 'zustand';\nimport { combinedPointerContext, xrContext } from './contexts.js';\nimport { XRElements } from './elements.js';\n/**\n * Starting point for each XR application.\n * Allows to configure the session's features and defaults such as what controllers are rendered and how they can interact with the scene\n * @returns A new XR store\n */\nexport function createXRStore(options) {\n    return createXRStoreImpl(options);\n}\n/**\n * Core XR component for connecting the `XRStore` with the scene.\n * Requires an `XRStore` which it will provide to its children.\n *\n * @param props\n * #### `children` - Children to be rendered inside the context.\n * #### `store` - The `XRStore` to be used for the session.\n */\nexport function XR({ children, store }) {\n    store.setWebXRManager(useThree((s) => s.gl.xr));\n    const rootStore = useRootStore();\n    useEffect(() => {\n        let initialCamera;\n        return store.subscribe((state, prevState) => {\n            if (state.session === prevState.session) {\n                return;\n            }\n            //session has changed\n            if (state.session != null) {\n                const { camera, gl } = rootStore.getState();\n                initialCamera = camera;\n                rootStore.setState({ camera: gl.xr.getCamera() });\n                return;\n            }\n            if (initialCamera == null) {\n                //we always were in xr?\n                return;\n            }\n            rootStore.setState({ camera: initialCamera });\n        });\n    }, [rootStore, store]);\n    useFrame((state, _delta, frame) => store.onBeforeFrame(state.scene, state.camera, frame), -1000);\n    useFrame(() => store.onBeforeRender());\n    return (_jsx(xrContext.Provider, { value: store, children: _jsxs(RootCombinedPointer, { children: [_jsx(XRElements, {}), children] }) }));\n}\n/**\n * Component for hiding the xr context to all child components. Can be used to create virtual displays and similar allowing the components inside the display to think they are not inside an XR environment, making them behave like when outside XR.\n *\n * @param props\n * @param props.children Children to be rendered inside the context.\n */\nexport function NotInXR({ children }) {\n    const emptyStore = useMemo(() => createXRStore(), []);\n    return _jsx(xrContext.Provider, { value: emptyStore, children: children });\n}\nexport function RootCombinedPointer({ children }) {\n    const store = useXRStore();\n    const pointer = useMemo(() => new CombinedPointer(true), []);\n    useEffect(() => setupSyncIsVisible(store, (visible) => pointer.setEnabled(visible, { timeStamp: performance.now() })), [store, pointer]);\n    useFrame((state) => pointer.move(state.scene, { timeStamp: performance.now() }), -50);\n    return _jsx(combinedPointerContext.Provider, { value: pointer, children: children });\n}\n/**\n * Hook for getting the xr store from the context\n */\nexport function useXRStore() {\n    const store = useContext(xrContext);\n    if (store == null) {\n        throw new Error(`XR features can only be used inside the <XR> component`);\n    }\n    return store;\n}\n/**\n * Returns the XR store object from a parent {@link XR} component. If no component is found `undefined` is returned.\n * You most likely should be using {@link useXRStore} instead.\n */\nexport function UNSAFE_useXRStore() {\n    const store = useContext(xrContext);\n    return store;\n}\n/**\n * Hook for reading the state from the xr store\n */\nexport function useXR(selector = (state) => state, equalityFn) {\n    return useStore(useXRStore(), selector, equalityFn);\n}\n", "const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, getInitialState, subscribe, destroy };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n", "import { createStore } from 'zustand/vanilla';\nexport * from 'zustand/vanilla';\nimport ReactExports from 'react';\nimport useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector.js';\n\nconst { useDebugValue } = ReactExports;\nconst { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;\nlet didWarnAboutEqualityFn = false;\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity, equalityFn) {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && equalityFn && !didWarnAboutEqualityFn) {\n    console.warn(\n      \"[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937\"\n    );\n    didWarnAboutEqualityFn = true;\n  }\n  const slice = useSyncExternalStoreWithSelector(\n    api.subscribe,\n    api.getState,\n    api.getServerState || api.getInitialState,\n    selector,\n    equalityFn\n  );\n  useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && typeof createState !== \"function\") {\n    console.warn(\n      \"[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.\"\n    );\n  }\n  const api = typeof createState === \"function\" ? createStore(createState) : createState;\n  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\nvar react = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.\"\n    );\n  }\n  return create(createState);\n};\n\nexport { create, react as default, useStore };\n", "import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { resolveInputSourceImplementation } from '@pmndrs/xr/internals';\nimport { context, reconciler, useStore } from '@react-three/fiber';\nimport { Suspense, useMemo } from 'react';\nimport { shallow } from 'zustand/shallow';\nimport { xrInputSourceStateContext, xrSpaceContext } from './contexts.js';\nimport { DefaultXRController, DefaultXRGaze, DefaultXRHand, DefaultXRScreenInput, DefaultXRTransientPointer, } from './default.js';\nimport { useXRSessionVisibilityState } from './hooks.js';\nimport { XRSpace } from './space.js';\nimport { objectToKey } from './utils.js';\nimport { useXR } from './xr.js';\nexport function XRElements({ children }) {\n    const referenceSpace = useXR((xr) => xr.originReferenceSpace);\n    const origin = useXR((xr) => xr.origin);\n    const visible = useXRSessionVisibilityState() === 'visible';\n    const store = useStore();\n    const storeWithOriginAsScene = useMemo(() => Object.assign({}, store, {\n        getState() {\n            return { ...store.getState(), scene: origin };\n        },\n    }), [origin, store]);\n    if (origin == null || referenceSpace == null) {\n        return null;\n    }\n    return (_jsx(_Fragment, { children: reconciler.createPortal(_jsx(context.Provider, { value: store, children: _jsxs(xrSpaceContext.Provider, { value: referenceSpace, children: [_jsxs(\"group\", { matrixAutoUpdate: false, visible: visible, children: [_jsx(XRControllers, {}), _jsx(XRHands, {}), _jsx(XRTransientPointers, {}), _jsx(XRGazes, {}), _jsx(XRScreenInputs, {})] }), children] }) }), storeWithOriginAsScene, null) }));\n}\nfunction XRControllers() {\n    const controllerStates = useXR((xr) => xr.inputSourceStates.filter((state) => state.type === 'controller'), shallow);\n    let Implementation = useXR((xr) => xr.controller);\n    if (Implementation === false) {\n        return null;\n    }\n    return (_jsx(_Fragment, { children: controllerStates.map((state) => {\n            const ResolvedImpl = resolveInputSourceImplementation(Implementation, state.inputSource.handedness, {});\n            if (ResolvedImpl === false) {\n                return null;\n            }\n            return (_jsx(xrInputSourceStateContext.Provider, { value: state, children: _jsx(XRSpace, { space: \"target-ray-space\", children: _jsx(Suspense, { children: typeof ResolvedImpl === 'function' ? _jsx(ResolvedImpl, {}) : _jsx(DefaultXRController, { ...ResolvedImpl }) }) }) }, state.id));\n        }) }));\n}\nfunction XRHands() {\n    const handStates = useXR((xr) => xr.inputSourceStates.filter((state) => state.type === 'hand'), shallow);\n    const Implementation = useXR((xr) => xr.hand);\n    if (Implementation === false) {\n        return null;\n    }\n    return (_jsx(_Fragment, { children: handStates.map((state) => {\n            const ResolvedImpl = resolveInputSourceImplementation(Implementation, state.inputSource.handedness, {});\n            if (ResolvedImpl === false) {\n                return null;\n            }\n            return (_jsx(xrInputSourceStateContext.Provider, { value: state, children: _jsx(XRSpace, { space: \"target-ray-space\", children: _jsx(Suspense, { children: typeof ResolvedImpl === 'function' ? _jsx(ResolvedImpl, {}) : _jsx(DefaultXRHand, { ...ResolvedImpl }) }) }) }, objectToKey(state)));\n        }) }));\n}\nfunction XRTransientPointers() {\n    const transientPointerStates = useXR((xr) => xr.inputSourceStates.filter((state) => state.type === 'transientPointer'), shallow);\n    const Implementation = useXR((xr) => xr.transientPointer);\n    if (Implementation === false) {\n        return null;\n    }\n    return (_jsx(_Fragment, { children: transientPointerStates.map((state) => {\n            const ResolvedImpl = resolveInputSourceImplementation(Implementation, state.inputSource.handedness, {});\n            if (ResolvedImpl === false) {\n                return null;\n            }\n            return (_jsx(xrInputSourceStateContext.Provider, { value: state, children: _jsx(XRSpace, { space: \"target-ray-space\", children: _jsx(Suspense, { children: typeof ResolvedImpl === 'function' ? (_jsx(ResolvedImpl, {})) : (_jsx(DefaultXRTransientPointer, { ...ResolvedImpl })) }) }) }, objectToKey(state)));\n        }) }));\n}\nfunction XRGazes() {\n    const gazeStates = useXR((xr) => xr.inputSourceStates.filter((state) => state.type === 'gaze'), shallow);\n    const Implementation = useXR((xr) => xr.gaze);\n    if (Implementation === false) {\n        return null;\n    }\n    return (_jsx(_Fragment, { children: gazeStates.map((state) => {\n            return (_jsx(xrInputSourceStateContext.Provider, { value: state, children: _jsx(XRSpace, { space: \"target-ray-space\", children: _jsx(Suspense, { children: typeof Implementation === 'function' ? (_jsx(Implementation, {})) : (_jsx(DefaultXRGaze, { ...spreadable(Implementation) })) }) }) }, objectToKey(state)));\n        }) }));\n}\nfunction XRScreenInputs() {\n    const screenInputStates = useXR((xr) => xr.inputSourceStates.filter((state) => state.type === 'screenInput'), shallow);\n    const Implementation = useXR((xr) => xr.screenInput);\n    if (Implementation === false) {\n        return null;\n    }\n    return (_jsx(_Fragment, { children: screenInputStates.map((state) => {\n            return (_jsx(xrInputSourceStateContext.Provider, { value: state, children: _jsx(XRSpace, { space: \"target-ray-space\", children: _jsx(Suspense, { children: typeof Implementation === 'function' ? (_jsx(Implementation, {})) : (_jsx(DefaultXRScreenInput, { ...spreadable(Implementation) })) }) }) }, objectToKey(state)));\n        }) }));\n}\nfunction spreadable(value) {\n    if (value === true) {\n        return undefined;\n    }\n    return value;\n}\n", "function shallow$1(objA, objB) {\n  if (Object.is(objA, objB)) {\n    return true;\n  }\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n  if (objA instanceof Map && objB instanceof Map) {\n    if (objA.size !== objB.size) return false;\n    for (const [key, value] of objA) {\n      if (!Object.is(value, objB.get(key))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (objA instanceof Set && objB instanceof Set) {\n    if (objA.size !== objB.size) return false;\n    for (const value of objA) {\n      if (!objB.has(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const keysA = Object.keys(objA);\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n  for (const keyA of keysA) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keyA) || !Object.is(objA[keyA], objB[keyA])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nvar shallow = (objA, objB) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { shallow } from 'zustand/shallow'`.\"\n    );\n  }\n  return shallow$1(objA, objB);\n};\n\nexport { shallow as default, shallow$1 as shallow };\n", "import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { buildTeleportTargetFilter, createTeleportRayLine, defaultGrabPointerOpacity, defaultRayPointerOpacity, defaultTouchPointerOpacity, syncTeleportPointerRayGroup, } from '@pmndrs/xr/internals';\nimport { createPortal, useFrame, useThree } from '@react-three/fiber';\nimport { Suspense, useContext, useMemo, useRef } from 'react';\nimport { xrInputSourceStateContext } from './contexts.js';\nimport { XRControllerModel } from './controller.js';\nimport { XRHandModel } from './hand.js';\nimport { useXRInputSourceStateContext } from './input.js';\nimport { CombinedPointer, PointerCursorModel, PointerRayModel, useGrabPointer, useLinesPointer, usePointerXRInputSourceEvents, useRayPointer, useTouchPointer, } from './pointer.js';\nimport { XRSpace as XRSpaceImpl } from './space.js';\nimport { TeleportPointerRayModel } from './teleport.js';\nexport { defaultGrabPointerOpacity, defaultRayPointerOpacity, defaultTouchPointerOpacity, } from '@pmndrs/xr/internals';\nfunction DefaultXRInputSourceGrabPointer(event, spaceType, options) {\n    const state = useContext(xrInputSourceStateContext);\n    if (state == null) {\n        throw new Error(`DefaultXRInputSourceGrabPointer can only be used inside a XRInputSource`);\n    }\n    const ref = useRef(null);\n    const pointer = useGrabPointer(ref, state, options);\n    usePointerXRInputSourceEvents(pointer, state.inputSource, event, state.events);\n    const cursorModelOptions = options.cursorModel;\n    return (_jsx(XRSpaceImpl, { ref: ref, space: spaceType, children: cursorModelOptions !== false && (_jsx(PointerCursorModel, { pointer: pointer, opacity: defaultGrabPointerOpacity, ...spreadable(cursorModelOptions) })) }));\n}\n/**\n * Grab pointer for the XRHand\n *\n * @param {DefaultXRInputSourceGrabPointerOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between `pointerdown` and `pointerup` to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a `dblclick` event\n * #### `contextMenuButton` - The button that triggers context menu events\n * #### `makeDefault` - Used the set the default pointer inside a combined pointer\n * #### `cursorModel` - Properties for configuring how the cursor should look\n * #### `radius` - The size of the intersection sphere\n * #### `customSort` - Overrides the default sort function to use for sorting the intersection results\n */\nexport const DefaultXRHandGrabPointer = DefaultXRInputSourceGrabPointer.bind(null, 'select', 'index-finger-tip');\n/**\n * Grab pointer for the XRController\n *\n * @param {DefaultXRInputSourceGrabPointerOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between `pointerdown` and `pointerup` to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a `dblclick` event\n * #### `contextMenuButton` - The button that triggers context menu events\n * #### `makeDefault` - Used the set the default pointer inside a combined pointer\n * #### `cursorModel` - Properties for configuring how the cursor should look\n * #### `radius` - The size of the intersection sphere\n * #### `customSort` - Overrides the default sort function to use for sorting the intersection results\n */\nexport const DefaultXRControllerGrabPointer = DefaultXRInputSourceGrabPointer.bind(null, 'squeeze', 'grip-space');\n/**\n * Ray pointer for the XRInputSource\n *\n * @param {DefaultXRInputSourceRayPointerOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between pointerdown and pointerup to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a dblclick event\n * #### `contextMenuButton` - The button that triggers contextmenu events\n * #### `makeDefault` - Used the set the default pointer inside a combined pointer\n * #### `radius` - The size of the intersection sphere\n * #### `minDistance` - Minimal distance to trigger interactions\n * #### `linePoints` - The points thay make up the shape of the ray if undefined the ray goes in a straight line\n * #### `direction` - The direction of the ray\n * #### `rayModel` - Properties for configuring how the ray should look\n * #### `cursorModel` - Properties for configuring how the cursor should look\n */\nexport function DefaultXRInputSourceRayPointer(props) {\n    const state = useXRInputSourceStateContext();\n    const ref = useRef(null);\n    const pointer = useRayPointer(ref, state, props);\n    usePointerXRInputSourceEvents(pointer, state.inputSource, 'select', state.events);\n    const rayModelOptions = props.rayModel;\n    const cursorModelOptions = props.cursorModel;\n    return (_jsxs(XRSpaceImpl, { ref: ref, space: \"target-ray-space\", children: [rayModelOptions !== false && (_jsx(PointerRayModel, { pointer: pointer, opacity: defaultRayPointerOpacity, ...spreadable(rayModelOptions) })), cursorModelOptions !== false && (_jsx(PointerCursorModel, { pointer: pointer, opacity: defaultRayPointerOpacity, ...spreadable(cursorModelOptions) }))] }));\n}\n/**\n * Touch pointer for the XRHand\n *\n * @param {DefaultXRHandTouchPointerOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between `pointerdown` and `pointerup` to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a `dblclick` event\n * #### `contextMenuButton` - The button that triggers context menu events\n * #### `makeDefault` - Used the set the default pointer inside a combined pointer\n * #### `cursorModel` - Properties for configuring how the cursor should look\n * #### `hoverRadius` - The size of the intersection sphere\n * #### `downRadius` - The distance to the touch center to trigger a `pointerdown` event\n * #### `button` - The id of the button that is triggered when touching\n */\nexport function DefaultXRHandTouchPointer(props) {\n    const state = useXRInputSourceStateContext('hand');\n    const ref = useRef(null);\n    const pointer = useTouchPointer(ref, state, props);\n    const cursorModelOptions = props.cursorModel;\n    return (_jsx(XRSpaceImpl, { ref: ref, space: state.inputSource.hand.get('index-finger-tip'), children: cursorModelOptions !== false && (_jsx(PointerCursorModel, { pointer: pointer, opacity: defaultTouchPointerOpacity, ...spreadable(cursorModelOptions) })) }));\n}\n/**\n * Default controller implementation with grab and ray pointers\n *\n * @param {DefaultXRControllerOptions} props\n * #### `model` - Options for configuring the controller apperance\n * #### `grabPointer` - Options for configuring the grab pointer\n * #### `rayPointer` - Options for configuring the ray pointer\n */\nexport function DefaultXRController(props) {\n    const modelOptions = props.model;\n    const grabPointerOptions = props.grabPointer;\n    const rayPointerOptions = props.rayPointer;\n    const teleportPointerOptions = props.teleportPointer ?? false;\n    return (_jsxs(_Fragment, { children: [modelOptions !== false && (_jsx(Suspense, { children: _jsx(XRControllerModel, { ...spreadable(modelOptions) }) })), _jsxs(CombinedPointer, { children: [grabPointerOptions !== false && _jsx(DefaultXRControllerGrabPointer, { ...spreadable(grabPointerOptions) }), rayPointerOptions !== false && (_jsx(DefaultXRInputSourceRayPointer, { makeDefault: true, minDistance: 0.2, ...spreadable(rayPointerOptions) })), teleportPointerOptions !== false && (_jsx(DefaultXRInputSourceTeleportPointer, { ...spreadable(teleportPointerOptions) }))] })] }));\n}\n/**\n * Default hand implementation with touch, grab and ray pointers\n *\n * @param {DefaultXRHandOptions} props\n * #### `model` - Options for configuring the hand appearance\n * #### `grabPointer` - Options for configuring the grab pointer\n * #### `rayPointer` - Options for configuring the ray pointer\n * #### `touchPointer` - Options for configuring the touch pointer\n */\nexport function DefaultXRHand(props) {\n    const modelOptions = props.model;\n    const grabPointerOptions = props.grabPointer;\n    const rayPointerOptions = props.rayPointer;\n    const touchPointerOptions = props.touchPointer;\n    const teleportPointerOptions = props.teleportPointer ?? false;\n    const rayPointerRayModelOptions = rayPointerOptions === false ? false : spreadable(rayPointerOptions)?.rayModel;\n    return (_jsxs(_Fragment, { children: [modelOptions !== false && (_jsx(Suspense, { children: _jsx(XRHandModel, { ...spreadable(modelOptions) }) })), _jsxs(CombinedPointer, { children: [grabPointerOptions !== false && _jsx(DefaultXRHandGrabPointer, { ...spreadable(grabPointerOptions) }), touchPointerOptions !== false && _jsx(DefaultXRHandTouchPointer, { ...spreadable(touchPointerOptions) }), rayPointerOptions !== false && (_jsx(DefaultXRInputSourceRayPointer, { makeDefault: true, minDistance: 0.2, ...spreadable(rayPointerOptions), rayModel: rayPointerRayModelOptions === false ? false : { maxLength: 0.2, ...spreadable(rayPointerRayModelOptions) } })), teleportPointerOptions !== false && (_jsx(DefaultXRInputSourceTeleportPointer, { ...spreadable(teleportPointerOptions) }))] })] }));\n}\n/**\n * Default transient-pointer implementation with ray pointer\n *\n * @param {DefaultXRTransientPointerOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between `pointerdown` and `pointerup` to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a `dblclick` event\n * #### `contextMenuButton` - The button that triggers context menu events\n * #### `minDistance` - Minimal distance to trigger interactions\n * #### `linePoints` - The points thay make up the shape of the ray if undefined the ray goes in a straight line\n * #### `direction` - The direction of the ray\n * #### `cursorModel` - Properties for configuring how the cursor should look\n */\nexport function DefaultXRTransientPointer(props) {\n    return _jsx(DefaultXRInputSourceRayPointer, { ...props, rayModel: false });\n}\n/**\n * Default gaze implementation with ray pointer\n *\n * @param {DefaultXRGazeOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between `pointerdown` and `pointerup` to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a `dblclick` event\n * #### `contextMenuButton` - The button that triggers context menu events\n * #### `minDistance` - Minimal distance to trigger interactions\n * #### `linePoints` - The points thay make up the shape of the ray if undefined the ray goes in a straight line\n * #### `direction` - The direction of the ray\n * #### `cursorModel` - Properties for configuring how the cursor should look\n */\nexport function DefaultXRGaze(props) {\n    return _jsx(DefaultXRInputSourceRayPointer, { ...props, rayModel: false });\n}\n/**\n * Default screen-input implementation with ray pointer\n *\n * @param {DefaultXRScreenInputOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between `pointerdown` and `pointerup` to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a `dblclick` event\n * #### `contextMenuButton` - The button that triggers context menu events\n * #### `minDistance` - Minimal distance to trigger interactions\n * #### `linePoints` - The points thay make up the shape of the ray if undefined the ray goes in a straight line\n * #### `direction` - The direction of the ray\n */\nexport function DefaultXRScreenInput(props) {\n    return _jsx(DefaultXRInputSourceRayPointer, { ...props, cursorModel: false, rayModel: false });\n}\n/**\n * Telport pointer for the XRInputSource.\n * Emits a downward bend ray that only interesects with meshes marked as teleportable\n *\n * @param {DefaultXRInputSourceTeleportPointerOptions} props\n * #### `clickThresholdMs` - Time in milliseconds between `pointerdown` and `pointerup` to trigger a click event\n * #### `dblClickThresholdMs` - Time in milliseconds between the first click and the second click to trigger a `dblclick` event\n * #### `contextMenuButton` - The button that triggers context menu events\n * #### `makeDefault` - Used the set the default pointer inside a combined pointer\n * #### `radius` - The size of the intersection sphere\n * #### `minDistance` - Minimal distance to trigger interactions\n * #### `direction` - The direction of the ray\n * #### `rayModel` - Properties for configuring how the ray should look\n * #### `cursorModel` - Properties for configuring how the cursor should look\n */\nexport function DefaultXRInputSourceTeleportPointer(props) {\n    const state = useContext(xrInputSourceStateContext);\n    if (state == null) {\n        throw new Error(`DefaultXRInputSourceRayPointer can only be used inside a XRInputSource`);\n    }\n    const ref = useRef(null);\n    const groupRef = useRef(null);\n    const linePoints = useMemo(() => createTeleportRayLine(), []);\n    const pointer = useLinesPointer(groupRef, state, {\n        ...props,\n        linePoints,\n        filter: buildTeleportTargetFilter(props),\n    }, 'teleport');\n    usePointerXRInputSourceEvents(pointer, state.inputSource, 'select', state.events);\n    const rayModelOptions = props.rayModel;\n    const cursorModelOptions = props.cursorModel;\n    const scene = useThree((state) => state.scene);\n    const cursorRef = useRef(null);\n    useFrame((_, delta) => {\n        if (cursorRef.current != null) {\n            cursorRef.current.visible = pointer.getEnabled() && pointer.getButtonsDown().size > 0;\n        }\n        const target = groupRef.current;\n        const source = ref.current;\n        if (target == null || source == null) {\n            return;\n        }\n        syncTeleportPointerRayGroup(source, target, delta * 1000);\n    });\n    return (_jsxs(_Fragment, { children: [_jsx(XRSpaceImpl, { ref: ref, space: \"target-ray-space\" }), createPortal(_jsxs(\"group\", { ref: groupRef, children: [rayModelOptions !== false && (_jsx(TeleportPointerRayModel, { linePoints: linePoints, pointer: pointer, opacity: defaultRayPointerOpacity, ...spreadable(rayModelOptions) })), cursorModelOptions !== false && (_jsx(PointerCursorModel, { ref: cursorRef, pointer: pointer, opacity: defaultRayPointerOpacity, ...spreadable(cursorModelOptions) }))] }), scene)] }));\n}\nfunction spreadable(value) {\n    if (value === true) {\n        return undefined;\n    }\n    return value;\n}\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { configureXRControllerModel, createUpdateXRControllerVisuals, loadXRControllerModel, XRControllerLayoutLoader, } from '@pmndrs/xr/internals';\nimport { createPortal, useFrame } from '@react-three/fiber';\nimport { forwardRef, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { suspend } from 'suspend-react';\nimport { useXRInputSourceStateContext } from './input.js';\nimport { XRSpace } from './space.js';\n/**\n * Component for placing content in the controller anchored at a specific component such as the Thumbstick\n *\n * @param props\n * #### `id` - `XRControllerGamepadComponentId` Is the id of the component where content should be placed (e.g. `\"a-button\"`)\n * #### `onPress?` - `Function` Is an optional callback to receive when the component is pressed\n * #### `onRelease?` - `Function` Is an optional callback to receive when the component is released\n * #### `children?` - `ReactNode` Children to be placed inside the componenent (e.g. visualizing a tooltip over the button...)\n *\n * @function\n */\nexport const XRControllerComponent = forwardRef(({ id, children, onPress, onRelease }, ref) => {\n    const state = useXRInputSourceStateContext('controller');\n    const [object, setObject] = useState(undefined);\n    useImperativeHandle(ref, () => object, [object]);\n    useXRControllerButtonEvent(state, id, (state) => (state === 'pressed' ? onPress?.() : onRelease?.()));\n    useFrame(() => setObject(state.gamepad[id]?.object));\n    if (object == null) {\n        return;\n    }\n    return createPortal(children, object);\n});\n/**\n * Hook for subscribing to a button state change event on the controller\n * @param controller the controller to listen for the event\n * @param id of the button\n * @param onChange callback that gets executed when the state of the button changes\n */\nexport function useXRControllerButtonEvent(controller, id, onChange) {\n    const state = useRef(undefined);\n    useFrame(() => {\n        const currentState = controller?.gamepad[id]?.state;\n        if (currentState != null && currentState != state.current) {\n            onChange(currentState);\n        }\n        state.current = currentState;\n    });\n}\nconst LoadXRControllerModelSymbol = Symbol('loadXRControllerModel');\n/**\n * Component for rendering a 3D model for the XRController\n * @param props\n * #### `colorWrite` - Configures the colorWrite property of the model\n * #### `renderOrder` - Configures the render order model\n * @function\n */\nexport const XRControllerModel = forwardRef((options, ref) => {\n    const state = useXRInputSourceStateContext('controller');\n    const model = suspend(loadXRControllerModel, [state.layout, undefined, LoadXRControllerModelSymbol]);\n    configureXRControllerModel(model, options);\n    state.object = model;\n    useImperativeHandle(ref, () => model, [model]);\n    const update = useMemo(() => createUpdateXRControllerVisuals(model, state.layout, state.gamepad), [model, state.layout, state.gamepad]);\n    useFrame(update);\n    return (_jsx(XRSpace, { space: \"grip-space\", children: _jsx(\"primitive\", { object: model }) }));\n});\nconst LoadXRControllerLayoutSymbol = Symbol('loadXRControllerLayout');\n/**\n * For rendering a controller that is not included in WebXR. (e.g controller tutorials/demos)\n *\n * @param profileIds\n * @param handedness\n * @param XRControllerLayoutLoaderOptions\n * @returns Promise<XRControllerLayout>\n */\nexport function useLoadXRControllerLayout(profileIds, handedness, { baseAssetPath, defaultControllerProfileId } = {}) {\n    const loader = useMemo(() => new XRControllerLayoutLoader({ baseAssetPath, defaultControllerProfileId }), [baseAssetPath, defaultControllerProfileId]);\n    return suspend(() => {\n        const result = loader.loadAsync(profileIds, handedness);\n        return result instanceof Promise ? result : Promise.resolve(result);\n    }, [LoadXRControllerLayoutSymbol, handedness, ...profileIds]);\n}\n/**\n * Loads the controller model for the given layout. This is a suspendable function, so it can be used with React Suspense.\n * @param layout: XRControllerLayout\n * @returns Promise<THREE.Group>\n */\nexport function useLoadXRControllerModel(layout) {\n    return suspend(loadXRControllerModel, [layout, undefined, LoadXRControllerModelSymbol]);\n}\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { cloneXRHandGltf, configureXRHandModel, createUpdateXRHandVisuals, } from '@pmndrs/xr/internals';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { forwardRef, useImperativeHandle, useMemo } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { useXRInputSourceStateContext } from './input.js';\nimport { XRSpace, useXRSpace } from './space.js';\n/**\n * Component for rendering a 3D model for the XRHand\n *\n * @param props\n * #### `colorWrite` - Configures color writing\n * #### `renderOrder` - Configures the render order of the model\n * @function\n */\nexport const XRHandModel = forwardRef((options, ref) => {\n    const state = useXRInputSourceStateContext('hand');\n    const gltf = useLoader(GLTFLoader, state.assetPath);\n    const model = useMemo(() => cloneXRHandGltf(gltf), [gltf]);\n    configureXRHandModel(model, options);\n    state.object = model;\n    useImperativeHandle(ref, () => model, [model]);\n    const referenceSpace = useXRSpace();\n    const update = useMemo(() => createUpdateXRHandVisuals(state.inputSource.hand, model, referenceSpace), [state.inputSource, model, referenceSpace]);\n    useFrame((_state, _delta, frame) => update(frame));\n    return _jsx(\"primitive\", { object: model });\n});\n/**\n * Component for placing content in the hand anchored at a specific joint such as the index finger tip.\n *\n * @param props\n * #### `joint` - [XRHandJoint](https://developer.mozilla.org/en-US/docs/Web/API/XRHand#hand_joints) Is the name of the joint where content should be placed (e.g. `\"wrist\"`)\n * #### `children` - Components to be placed inside the joint (e.g. For visualizing a tooltip over the index finger tip)\n *\n * @function\n * @deprecated use `<XRSpace space=\"wrist\">` instead of `<XRHandJoint joint=\"wrist\">`\n */\nexport const XRHandJoint = forwardRef(({ joint, children }, ref) => {\n    return (_jsx(XRSpace, { ref: ref, space: joint, children: children }));\n});\n", "import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { CombinedPointer as CombinedPointerImpl, Pointer, createGrabPointer, createLinesPointer, createRayPointer, createTouchPointer, } from '@pmndrs/pointer-events';\nimport { PointerCursorMaterial, PointerRayMaterial, bindPointerXRInputSourceEvent, updatePointerCursorModel, updatePointerRayModel, } from '@pmndrs/xr/internals';\nimport { createPortal, useFrame, useStore, useThree } from '@react-three/fiber';\nimport { forwardRef, useContext, useEffect, useImperativeHandle, useMemo, useRef } from 'react';\nimport { combinedPointerContext } from './contexts.js';\nimport { useXR } from './xr.js';\n//for checking if `event.pointerState` is from an xr input source\nexport { isXRInputSourceState } from '@pmndrs/xr/internals';\n/**\n * Component for combining multiple Pointers into one so that only one pointer is active at a time\n *\n * @param props\n * @param props.children? - `Pointer` components to combine\n */\nexport function CombinedPointer({ children }) {\n    const pointer = useMemo(() => new CombinedPointerImpl(false), []);\n    useSetupPointer(pointer);\n    return _jsx(combinedPointerContext.Provider, { value: pointer, children: children });\n}\nfunction clearObject(object) {\n    for (const key of Object.keys(object)) {\n        delete object[key];\n    }\n}\n/**\n * Hook for creating a grab pointer\n */\nexport function useGrabPointer(spaceRef, pointerState, currentOptions, pointerType) {\n    const options = useMemo(() => ({}), []);\n    clearObject(options);\n    Object.assign(options, currentOptions);\n    const store = useStore();\n    const pointer = useMemo(() => createGrabPointer(() => store.getState().camera, spaceRef, pointerState, options, pointerType), [store, spaceRef, pointerState, options, pointerType]);\n    useSetupPointer(pointer, currentOptions?.makeDefault);\n    return pointer;\n}\n/**\n * Hook for creating a ray pointer\n */\nexport function useRayPointer(spaceRef, pointerState, currentOptions, pointerType) {\n    const options = useMemo(() => ({}), []);\n    clearObject(options);\n    Object.assign(options, currentOptions);\n    const store = useStore();\n    const pointer = useMemo(() => createRayPointer(() => store.getState().camera, spaceRef, pointerState, options, pointerType), [store, spaceRef, pointerState, options, pointerType]);\n    useSetupPointer(pointer, currentOptions?.makeDefault);\n    return pointer;\n}\n/**\n * Hook for creating a ray pointer\n */\nexport function useLinesPointer(spaceRef, pointerState, currentOptions, pointerType) {\n    const options = useMemo(() => ({}), []);\n    clearObject(options);\n    Object.assign(options, currentOptions);\n    const store = useStore();\n    const pointer = useMemo(() => createLinesPointer(() => store.getState().camera, spaceRef, pointerState, options, pointerType), [store, spaceRef, pointerState, options, pointerType]);\n    useSetupPointer(pointer, currentOptions?.makeDefault);\n    return pointer;\n}\n/**\n * Hook for creating a touch pointer\n */\nexport function useTouchPointer(spaceRef, pointerState, currentOptions, pointerType) {\n    const options = useMemo(() => ({}), []);\n    clearObject(options);\n    Object.assign(options, currentOptions);\n    const store = useStore();\n    const pointer = useMemo(() => createTouchPointer(() => store.getState().camera, spaceRef, pointerState, options, pointerType), [store, spaceRef, pointerState, options, pointerType]);\n    useSetupPointer(pointer, currentOptions?.makeDefault);\n    return pointer;\n}\n/**\n * Component for rendering a ray for a pointer\n * @param props\n * #### `materialClass` - Material to use for the ray\n * #### `pointer` - Pointer to use for the ray\n * #### `renderOrder` - Render order for the ray\n * @function\n */\nexport const PointerRayModel = forwardRef((props, ref) => {\n    const material = useMemo(() => {\n        const MaterialClass = props.materialClass ?? PointerRayMaterial;\n        return new MaterialClass();\n    }, [props.materialClass]);\n    const internalRef = useRef(null);\n    useImperativeHandle(ref, () => internalRef.current, []);\n    useFrame(() => internalRef.current != null && updatePointerRayModel(internalRef.current, material, props.pointer, props));\n    return (_jsx(\"mesh\", { matrixAutoUpdate: false, renderOrder: props.renderOrder ?? 2, ref: internalRef, material: material, children: _jsx(\"boxGeometry\", {}) }));\n});\n/**\n * Component for rendering a cursor as a pointer\n *\n * @param props\n * #### `materialClass` - Class of the material to use for the cursor\n * #### `pointer` - Pointer to use for the cursor\n * #### `renderOrder` - Render order for the cursor\n * @function\n */\nexport const PointerCursorModel = forwardRef((props, ref) => {\n    const material = useMemo(() => {\n        const MaterialClass = props.materialClass ?? PointerCursorMaterial;\n        return new MaterialClass();\n    }, [props.materialClass]);\n    const internalRef = useRef(null);\n    const groupRef = useRef(null);\n    useImperativeHandle(ref, () => internalRef.current, []);\n    useFrame(() => internalRef.current != null &&\n        groupRef.current != null &&\n        updatePointerCursorModel(groupRef.current, internalRef.current, material, props.pointer, props));\n    const scene = useThree((s) => s.scene);\n    return (_jsxs(_Fragment, { children: [_jsx(\"group\", { ref: groupRef }), createPortal(_jsx(\"mesh\", { renderOrder: props.renderOrder ?? 1, ref: internalRef, matrixAutoUpdate: false, material: material, children: _jsx(\"planeGeometry\", {}) }), scene)] }));\n});\n/**\n * Hook for binding the xr session events such as `selectstart` to the provided pointer down/up events\n */\nexport function usePointerXRInputSourceEvents(pointer, inputSource, event, missingEvents) {\n    const session = useXR((xr) => xr.session);\n    useEffect(() => {\n        if (session == null) {\n            return;\n        }\n        return bindPointerXRInputSourceEvent(pointer, session, inputSource, event, missingEvents);\n    }, [event, inputSource, pointer, session, missingEvents]);\n}\nfunction useSetupPointer(pointer, makeDefault = false) {\n    const combinedPointer = useContext(combinedPointerContext);\n    if (combinedPointer == null) {\n        throw new Error(`xr pointers can only be used inside the XR component`);\n    }\n    useEffect(() => {\n        const unregister = combinedPointer.register(pointer, makeDefault);\n        return () => {\n            unregister();\n        };\n    }, [combinedPointer, pointer, makeDefault]);\n    useEffect(() => {\n        if (!(pointer instanceof Pointer)) {\n            return;\n        }\n        return () => pointer.exit({ timeStamp: performance.now() });\n    }, [pointer]);\n}\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { makeTeleportTarget, TeleportPointerRayModel as TeleportPointerRayModelImpl, } from '@pmndrs/xr';\nimport { useFrame, useStore } from '@react-three/fiber';\nimport { forwardRef, useEffect, useImperativeHandle, useMemo, useRef } from 'react';\n/**\n * Component that allows to declare its children as teleport targets.\n * @param props\n * @param props.onTeleport Function that is called when the teleport target is hit\n */\nexport function TeleportTarget({ children, onTeleport, }) {\n    const ref = useRef(null);\n    const teleportRef = useRef(onTeleport);\n    teleportRef.current = onTeleport;\n    const store = useStore();\n    useEffect(() => {\n        if (ref.current == null) {\n            return;\n        }\n        return makeTeleportTarget(ref.current, () => store.getState().camera, (point, event) => teleportRef.current?.(point, event));\n    }, [store]);\n    return (_jsx(\"group\", { pointerEventsType: { allow: 'teleport' }, ref: ref, children: children }));\n}\nexport const TeleportPointerRayModel = forwardRef(({ pointer, linePoints, ...options }, ref) => {\n    const mesh = useMemo(() => new TeleportPointerRayModelImpl(linePoints), [linePoints]);\n    useImperativeHandle(ref, () => mesh, [mesh]);\n    mesh.options = options;\n    useFrame(() => mesh.update(pointer));\n    return _jsx(\"primitive\", { object: mesh });\n});\n", "import { useEffect, useMemo, useRef, useState, useSyncExternalStore } from 'react';\nimport { useXR } from './xr.js';\nexport function useHover(ref, onChange) {\n    let setHover;\n    let hover;\n    if (onChange == null) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [_hover, _setHover] = useState(false);\n        setHover = _setHover;\n        hover = _hover;\n    }\n    else {\n        setHover = onChange;\n    }\n    useEffect(() => {\n        const { current } = ref;\n        if (current == null) {\n            return;\n        }\n        const set = new Set();\n        const enter = (e) => {\n            if (set.size === 0) {\n                setHover(true, e);\n            }\n            set.add(e.pointerId);\n        };\n        const leave = (e) => {\n            set.delete(e.pointerId);\n            if (set.size === 0) {\n                setHover(false, e);\n            }\n        };\n        current.addEventListener('pointerenter', enter);\n        current.addEventListener('pointerleave', leave);\n        return () => {\n            current.removeEventListener('pointerenter', enter);\n            current.removeEventListener('pointerleave', leave);\n        };\n    }, [ref, setHover]);\n    return hover;\n}\n/**\n * Gets the visibility state of the XR session.\n *\n * @returns The visibility state of the XR session.\n */\nexport function useXRSessionVisibilityState() {\n    return useXR((xr) => xr.visibilityState);\n}\n/**\n * Initilizes the room capture process.\n *\n * @returns A function to initiate room capture, or undefined if unavailable.\n */\nexport function useInitRoomCapture() {\n    return useXR((xr) => xr.session?.initiateRoomCapture?.bind(xr.session));\n}\n/**\n * Checks whether a specific XRSessionMode is supported or not\n *\n * @param {XRSessionMode} mode - The `XRSessionMode` to check against.\n * @param {(error: any) => void} [onError] - Callback executed when an error occurs.\n */\nexport function useXRSessionModeSupported(mode, onError) {\n    const onErrorRef = useRef(onError);\n    onErrorRef.current = onError;\n    const [subscribe, getSnapshot] = useMemo(() => {\n        let sessionSupported = undefined;\n        return [\n            (onChange) => {\n                let canceled = false;\n                if (typeof navigator === 'undefined' || navigator.xr == null) {\n                    sessionSupported = false;\n                    return () => { };\n                }\n                navigator.xr\n                    .isSessionSupported(mode)\n                    .then((isSupported) => {\n                    sessionSupported = isSupported;\n                    if (canceled) {\n                        return;\n                    }\n                    onChange();\n                })\n                    .catch((e) => {\n                    if (canceled) {\n                        return;\n                    }\n                    onErrorRef.current?.(e);\n                });\n                return () => (canceled = true);\n            },\n            () => sessionSupported,\n        ];\n    }, [mode]);\n    return useSyncExternalStore(subscribe, getSnapshot);\n}\n/**\n * @deprecated use `useXRSessionModeSupported` instead\n */\nexport const useSessionModeSupported = useXRSessionModeSupported;\n/**\n * Checks if a specific XR session feature is enabled.\n *\n * @param {string} feature - The XR session feature to check against.\n * @returns {boolean} Whether the feature is enabled.\n */\nexport function useXRSessionFeatureEnabled(feature) {\n    return useXR(({ session }) => session?.enabledFeatures?.includes(feature) ?? false);\n}\n/**\n * @deprecated use `useXRSessionFeatureEnabled` instead\n */\nexport const useSessionFeatureEnabled = useXRSessionFeatureEnabled;\n", "let i = 0;\nconst map = new Map();\nexport function objectToKey(object) {\n    let key = map.get(object);\n    if (key == null) {\n        map.set(object, (key = i++));\n    }\n    return key;\n}\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { updateXRMeshGeometry } from '@pmndrs/xr/internals';\nimport { useFrame } from '@react-three/fiber';\nimport { forwardRef, useEffect, useMemo, useState } from 'react';\nimport { useXR } from './xr.js';\n/**\n * Component for rendering a mesh for the XRMesh based on the detected mesh geometry\n *\n * @param props\n * Accepts the same props as a ThreeJs [Mesh](https://threejs.org/docs/#api/en/objects/Mesh)\n * @function\n */\nexport const XRMeshModel = forwardRef(({ mesh, ...rest }, ref) => {\n    const geometry = useXRMeshGeometry(mesh);\n    return _jsx(\"mesh\", { ref: ref, geometry: geometry, ...rest });\n});\n/**\n * Hook for getting all detected meshes with the provided semantic label\n */\nexport function useXRMeshes(semanticLabel) {\n    const meshes = useXR((xr) => xr.detectedMeshes);\n    return useMemo(() => (semanticLabel == null ? meshes : meshes.filter((mesh) => mesh.semanticLabel === semanticLabel)), [meshes, semanticLabel]);\n}\n/**\n * Hook for getting the geometry from the detected mesh\n *\n * @param mesh the detected mesh\n * @param disposeBuffer allows to disable auto disposing the geometry buffer\n */\nexport function useXRMeshGeometry(mesh, disposeBuffer = true) {\n    const [geometry, setGeometry] = useState(updateXRMeshGeometry(mesh, undefined));\n    useFrame(() => setGeometry((geometry) => updateXRMeshGeometry(mesh, geometry)));\n    useEffect(() => {\n        if (!disposeBuffer) {\n            return;\n        }\n        return () => geometry.dispose();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [geometry]);\n    return geometry;\n}\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { updateXRPlaneGeometry } from '@pmndrs/xr/internals';\nimport { useFrame } from '@react-three/fiber';\nimport { forwardRef, useEffect, useMemo, useState } from 'react';\nimport { useXR } from './xr.js';\n/**\n * Component for rendering a mesh for the XRPlane based on the detected plane geometry\n *\n * @param props\n * Accepts the same props as a ThreeJs [Mesh](https://threejs.org/docs/#api/en/objects/Mesh)\n * @function\n */\nexport const XRPlaneModel = forwardRef(({ plane, ...rest }, ref) => {\n    const geometry = useXRPlaneGeometry(plane);\n    return _jsx(\"mesh\", { ref: ref, geometry: geometry, ...rest });\n});\n/**\n * Hook for getting all dected planes with the provided semantic label\n */\nexport function useXRPlanes(semanticLabel) {\n    const planes = useXR((xr) => xr.detectedPlanes);\n    return useMemo(() => (semanticLabel == null ? planes : planes.filter((plane) => plane.semanticLabel === semanticLabel)), [planes, semanticLabel]);\n}\n/**\n * Hook for getting the geometry from the detected plane\n *\n * @param plane the detected plane\n * @param disposeBuffer allows to disable auto disposing the geometry buffer\n */\nexport function useXRPlaneGeometry(plane, disposeBuffer = true) {\n    const [geometry, setGeometry] = useState(updateXRPlaneGeometry(plane, undefined));\n    useFrame(() => setGeometry((geometry) => updateXRPlaneGeometry(plane, geometry)));\n    useEffect(() => {\n        if (!disposeBuffer) {\n            return;\n        }\n        return () => geometry.dispose();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [geometry]);\n    return geometry;\n}\n", "import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { isFacingCamera } from '@pmndrs/xr';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { useRef, useState } from 'react';\nfunction useIsFacingCamera(ref, set, direction, angle) {\n    const camera = useThree((state) => state.camera);\n    useFrame(() => {\n        if (ref.current == null) {\n            return;\n        }\n        set(isFacingCamera(camera, ref.current, direction, angle));\n    });\n}\n/**\n * Guard that only **shows** its children by toggling their visibility if the camera is facing the object.\n * Calculation is based on the provided angle and direction.\n *\n * @param props\n * #### `children` - `ReactNode` The ReactNode elements to conditionally show.\n * #### `direction` - [Vector3](https://threejs.org/docs/#api/en/math/Vector3) Direction vector to check against the camera's facing direction.\n * #### `angle` - `number` The angle in radians to determine visibility. Defaults to `Math.PI / 2` (90 degrees).\n */\nexport function ShowIfFacingCamera({ children, direction, angle = Math.PI / 2 }) {\n    const ref = useRef(null);\n    useIsFacingCamera(ref, (visible) => {\n        if (ref.current == null) {\n            return;\n        }\n        ref.current.visible = visible;\n    }, direction, angle);\n    return _jsx(\"group\", { ref: ref, children: children });\n}\n/**\n * Guard that only **renders** its children into the scene if the camera is facing the object.\n * Calculation is based on the provided angle and direction.\n *\n * @param props\n * #### `children` - `ReactNode` The ReactNode elements to conditionally render.\n * #### `direction` - [Vector3](https://threejs.org/docs/#api/en/math/Vector3) Direction vector to check against the camera's facing direction.\n * #### `angle` - `number` The angle in radians to determine visibility. Defaults to `Math.PI / 2` (90 degrees).\n */\nexport function IfFacingCamera({ children, direction, angle = Math.PI / 2 }) {\n    const ref = useRef(null);\n    const [show, setShow] = useState(false);\n    useIsFacingCamera(ref, setShow, direction, angle);\n    return show ? _jsx(_Fragment, { children: children }) : null;\n}\n", "import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useXR } from '../index.js';\nfunction useIsInSessionMode(allow, deny) {\n    const mode = useXR((state) => state.mode);\n    if (deny != null) {\n        return Array.isArray(deny) ? !deny.includes(mode) : deny != mode;\n    }\n    if (allow != null) {\n        return Array.isArray(allow) ? allow.includes(mode) : allow === mode;\n    }\n    return mode !== null;\n}\n/**\n * Guard that only **shows** its children by toggling their visibility based on the current session mode.\n * If neither `allow` nor `deny` are provided, the visiblity will be based on whether or not any mode is currently being used.\n *\n * @param props\n * #### `children?` - `ReactNode` The ReactNode elements to conditionally show.\n * #### `allow?` - `XRSessionMode | ReadonlyArray<XRSessionMode | undefined>` The session mode(s) where the children will be shown. If not provided, the children will be shown in all modes except the ones in `deny`.\n * #### `deny?` - `XRSessionMode | ReadonlyArray<XRSessionMode | undefined>` The session mode(s) where the children will be hidden.\n */\nexport function ShowIfInSessionMode({ children, allow, deny }) {\n    const visible = useIsInSessionMode(allow, deny);\n    return _jsx(\"group\", { visible: visible, children: children });\n}\n/**\n * Guard that only **renders** its children to the scene based on the current session mode.\n * If neither `allow` nor `deny` are provided, the elements will be rendered based on whether or not any mode is currently being used.\n *\n * @param props\n * #### `children?` - `ReactNode` The ReactNode elements to conditionally render.\n * #### `allow?` - `XRSessionMode | ReadonlyArray<XRSessionMode | undefined>` The session mode(s) where the children will be rendered. If not provided, the children will be rendered in all modes except the ones in `deny`.\n * #### `deny?` - `XRSessionMode | ReadonlyArray<XRSessionMode | undefined>` The session mode(s) where the children will not be rendered.\n */\nexport function IfInSessionMode({ children, allow, deny }) {\n    const visible = useIsInSessionMode(allow, deny);\n    return visible ? _jsx(_Fragment, { children: children }) : null;\n}\n", "import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useXRSessionModeSupported } from '../index.js';\n/**\n * Guard that only **shows** its children by toggling their visibility based on whether the user's device supports a session mode.\n *\n * @param props\n * #### `children?` - `ReactNode` The ReactNode elements to conditionally show.\n * #### `mode` - `XRSessionMode` The session mode used to determine if the children will be shown.\n */\nexport function ShowIfSessionModeSupported({ children, mode }) {\n    const supported = useXRSessionModeSupported(mode);\n    return _jsx(\"group\", { visible: supported, children: children });\n}\n/**\n * Guard that only **renders** its children to the scene based on whether the user's device supports a session mode.\n *\n * @param props\n * #### `children?` - `ReactNode` The ReactNode elements to conditionally render.\n * #### `mode` - `XRSessionMode` The session mode used to determine if the children will be rendered.\n */\nexport function IfSessionModeSupported({ children, mode }) {\n    const supported = useXRSessionModeSupported(mode);\n    if (!supported) {\n        return null;\n    }\n    return _jsx(_Fragment, { children: children });\n}\n", "import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useXRSessionVisibilityState } from '../index.js';\n/**\n * Guard that only **shows** its children by toggling their visibility based on whether the current session is visible or not.\n * Typically used to hide/show content when operating system overlays are showing\n *\n * @param props ‎\n * #### `children?` - `ReactNode` The ReactNode elements to conditionally show.\n */\nexport function ShowIfSessionVisible({ children }) {\n    const state = useXRSessionVisibilityState();\n    return _jsx(\"group\", { visible: state == null || state === 'visible', children: children });\n}\n/**\n * Guard that only **renders** its children to the scene based on whether the current session is visible or not.\n * Typically used to hide/show content when operating system overlays are showing\n *\n * @param props ‎\n * #### `children?` - `ReactNode` The ReactNode elements to conditionally show.\n */\nexport function IfSessionVisible({ children }) {\n    const state = useXRSessionVisibilityState();\n    if (state != 'visible' && state != null) {\n        return null;\n    }\n    return _jsx(_Fragment, { children: children });\n}\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useThree } from '@react-three/fiber';\nimport { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { xrSpaceContext } from './contexts.js';\nimport { useXR } from './xr.js';\n/**\n * Component for setting the origin of the player (their feet)\n *\n * @param props\n * Accepts the same props as a ThreeJs [Group](https://threejs.org/docs/#api/en/objects/Group)\n * @function\n */\nexport const XROrigin = forwardRef(({ children, disabled, ...props }, ref) => {\n    const xrCamera = useThree((s) => s.gl.xr.getCamera());\n    const internalRef = useRef(null);\n    const referenceSpace = useXR((xr) => xr.originReferenceSpace);\n    useImperativeHandle(ref, () => internalRef.current, []);\n    useEffect(() => {\n        const group = internalRef.current;\n        if (group == null || disabled) {\n            return;\n        }\n        group.add(xrCamera);\n        return () => void group.remove(xrCamera);\n    }, [disabled, xrCamera]);\n    return (_jsx(\"group\", { ref: internalRef, ...props, children: _jsx(xrSpaceContext.Provider, { value: referenceSpace, children: children }) }));\n});\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createXRHitTestSource, requestXRHitTest } from '@pmndrs/xr';\nimport { useFrame } from '@react-three/fiber';\nimport { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { useStore } from 'zustand';\nimport { useXRStore } from './xr.js';\nexport { createXRHitTestSource, requestXRHitTest } from '@pmndrs/xr';\n/**\n * Hook for creating a hit test source originating from the provided object or xrspace\n */\nexport function useXRHitTestSource(relativeTo, trackableType) {\n    const [source, setState] = useState();\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useCreateXRHitTestSource(relativeTo, trackableType, setState);\n    return source;\n}\n/**\n * Hook for setting up a continous hit test originating from the provided object or xrspace\n */\nexport function useXRHitTest(fn, relativeTo, trackableType) {\n    const sourceRef = useRef(undefined);\n    useCreateXRHitTestSource(relativeTo, trackableType, useCallback((source) => (sourceRef.current = source), []));\n    useFrame((_s, _d, frame) => {\n        if (fn == null || frame == null || sourceRef.current == null) {\n            return;\n        }\n        fn(frame.getHitTestResults(sourceRef.current.source), sourceRef.current.getWorldMatrix);\n    });\n}\nfunction useCreateXRHitTestSource(relativeTo, trackableType, onLoad) {\n    const store = useXRStore();\n    const session = useStore(store, (s) => s.session);\n    useEffect(() => {\n        if (session == null) {\n            return;\n        }\n        let storedResult;\n        let cancelled = false;\n        const relativeToResolved = relativeTo instanceof XRSpace || typeof relativeTo === 'string' ? relativeTo : relativeTo?.current;\n        if (relativeToResolved == null) {\n            return;\n        }\n        createXRHitTestSource(store, session, relativeToResolved, trackableType).then((result) => {\n            if (cancelled) {\n                return;\n            }\n            storedResult = result;\n            onLoad(result);\n        });\n        return () => {\n            onLoad(undefined);\n            cancelled = true;\n            storedResult?.source.cancel();\n        };\n    }, [session, store, relativeTo, trackableType, onLoad]);\n}\n/**\n * Hook that returns a function to request a single hit test\n */\nexport function useXRRequestHitTest() {\n    const store = useXRStore();\n    return useCallback((relativeTo, trackableType) => {\n        const relativeToResolved = relativeTo instanceof XRSpace || typeof relativeTo === 'string' ? relativeTo : relativeTo.current;\n        if (relativeToResolved == null) {\n            return;\n        }\n        return requestXRHitTest(store, relativeToResolved, trackableType);\n    }, [store]);\n}\n/**\n * Component for getting hit tests originating based on its position in the scene graph\n *\n * @param props\n * #### `space` - [XRSpaceType](https://developer.mozilla.org/en-US/docs/Web/API/XRSpace) | [XRReferenceSpaceType](https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace#reference_space_types)\n * @function\n */\nexport const XRHitTest = forwardRef(({ trackableType, onResults, space, ...rest }, ref) => {\n    const internalRef = useRef(null);\n    useImperativeHandle(ref, () => internalRef.current);\n    useXRHitTest(onResults, space ?? internalRef, trackableType);\n    return _jsx(\"group\", { ...rest, ref: internalRef });\n});\n", "import { requestXRAnchor } from '@pmndrs/xr';\nimport { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { useXRStore } from './xr.js';\nexport { requestXRAnchor,\n//requestXRPersistentAnchor,\n//loadXRPersistentAnchor,\n//deleteXRPersistentAnchor,\n } from '@pmndrs/xr';\n/**\n * Hook that returns a function that allows to request a xr anchor\n */\nexport function useRequestXRAnchor() {\n    const store = useXRStore();\n    return useMemo(() => requestXRAnchor.bind(null, store), [store]);\n}\n/**\n * hook that returns a function that allows to request a xr persistent anchor\n *\nexport function useRequestXRPersistentAnchor() {\n  const store = useXRStore()\n  return useMemo(() => requestXRPersistentAnchor.bind(null, store), [store])\n}*/\n/**\n * hook that returns a function that allows to load a xr persistent anchor\n *\nexport function useLoadXRPersistentAnchor() {\n  const session = useXR((xr) => xr.session)\n  return useMemo(() => (session != null ? loadXRPersistentAnchor.bind(null, session) : undefined), [session])\n}*/\n/**\n * hook that returns a function that allows to delete a xr persistent anchor\n *\nexport function useDeleteXRPersistentAnchor() {\n  const store = useXRStore()\n  return useMemo(() => deleteXRPersistentAnchor.bind(null, store), [store])\n}*/\n/*\nexport function useXRPersistentAnchor(\n  id: string,\n): [anchor: XRAnchor | undefined, createAnchor: (options: XRAnchorOptions) => Promise<XRAnchor | undefined>] {\n  const cleanup = useRef<(() => void) | undefined>(() => {})\n  const store = useXRStore()\n  const session = useXR((xr) => xr.session)\n  const [anchor, setAnchor] = useState<XRAnchor | undefined>(undefined)\n  useEffect(() => {\n    if (session == null) {\n      return\n    }\n    cleanup.current?.()\n    cleanup.current = undefined\n    let cancelled = false\n    cleanup.current = () => (cancelled = true)\n    loadXRPersistentAnchor(session, id).then((anchor) => {\n      if (cancelled) {\n        anchor?.delete()\n        return\n      }\n      cleanup.current = () => anchor?.delete()\n      setAnchor(anchor)\n    })\n    return () => {\n      cleanup.current?.()\n      cleanup.current = undefined\n    }\n  }, [session, id])\n  const create = useCallback(\n    async (options: XRAnchorOptions) => {\n      await deleteXRPersistentAnchor(store, id)\n      cleanup.current?.()\n      cleanup.current = undefined\n      const abortRef = { current: false }\n      cleanup.current = () => (abortRef.current = true)\n      const anchor = await requestXRPersistentAnchor(store, id, options, abortRef)\n      if (abortRef.current) {\n        anchor?.delete()\n        return undefined\n      }\n      cleanup.current = () => anchor?.delete()\n      setAnchor(anchor)\n      return anchor\n    },\n    [id, store],\n  )\n  return [anchor, create]\n}*/\n/**\n * hook for requesting and storing a single xr anchor\n */\nexport function useXRAnchor() {\n    const [anchor, setAnchor] = useState(undefined);\n    const cleanup = useRef(() => { });\n    const store = useXRStore();\n    const create = useCallback(async (options) => {\n        cleanup.current?.();\n        cleanup.current = undefined;\n        let cancelled = false;\n        cleanup.current = () => (cancelled = true);\n        const anchor = await requestXRAnchor(store, options);\n        if (cancelled) {\n            anchor?.delete();\n            return undefined;\n        }\n        cleanup.current = () => anchor?.delete();\n        setAnchor(anchor);\n        return anchor;\n    }, [store]);\n    useEffect(() => () => void cleanup.current?.(), []);\n    return [anchor, create];\n}\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useEffect, useMemo } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport tunnel from 'tunnel-rat';\nimport { useXR } from './xr.js';\n/**\n * Renders html elements as an overlay for handheld AR experiences\n * @param props Props are forwarded to a `div` element\n * @function\n */\nexport const XRDomOverlay = forwardRef((props, ref) => {\n    const domOverlayRoot = useXR((xr) => xr.domOverlayRoot);\n    const { In, Out } = useMemo(tunnel, []);\n    useEffect(() => {\n        if (domOverlayRoot == null) {\n            return;\n        }\n        const root = createRoot(domOverlayRoot);\n        root.render(_jsx(Out, {}));\n        return () => root.unmount();\n    }, [domOverlayRoot, Out]);\n    return (_jsx(In, { children: _jsx(\"div\", { ...props, ref: ref }) }));\n});\n", "import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardObjectEvents } from '@pmndrs/pointer-events';\nimport { createXRLayer, createXRLayerGeometry, createXRLayerRenderTarget, getXRLayerSrcTexture, setupXRImageLayer, setXRLayerRenderTarget, updateXRLayerProperties, updateXRLayerTransform, waitForXRLayerSrcSize, } from '@pmndrs/xr';\nimport { addEffect, context, reconciler, useFrame, useStore, useThree, } from '@react-three/fiber';\nimport { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState, } from 'react';\nimport { OrthographicCamera, PerspectiveCamera, Raycaster, Scene, Vector2, Vector3, Vector4, WebGLRenderTarget, } from 'three';\nimport { create } from 'zustand';\nimport { useXRSessionFeatureEnabled } from './hooks.js';\nimport { useXR, useXRStore } from './xr.js';\n/**\n * Component for rendering high quality quad, cylinder, or equirect layers inside supported sessions. Also includes a fallback for non-supported sessions.\n *\n * @param props\n * #### `src` - Property for displaying images and videos onto the layer. For rendering dynamic content to the layer, leave the `src` empty and put the dynamic (3D) content into the children, so that the layer acts as a render target.\n * #### `shape` - Property to configure the shape of the layer (\"quad\", \"cylinder\", \"equirect\").\n * #### `layout` - Property to configure the layout of the display content for stereo content (\"default\", \"mono\", \"stereo-left-right\", \"stereo-top-bottom\").\n * #### `centralAngle` - Property to configure the central angle in case the layer shape is a \"cylinder\".\n * #### `centralHorizontalAngle` - Property to configure the central horizontal angle in case the layer shape is \"equirect\".\n * #### `upperVerticalAngle` - Property to configure the upper vertical angle in case the layer shape is \"equirect\".\n * #### `lowerVerticalAngle` - Property to configure the lower vertical angle in case the layer shape is \"equirect\".\n * #### `chromaticAberrationCorrection` - Property to configure whether chromatic abberration should be corrected by the layer.\n * #### `quality` - Property to configure for what type of content the layer should be optimized (\"default\", \"text-optimized\", \"graphics-optimized\").\n */\nexport function XRLayer({ src, pixelWidth = 1024, pixelHeight = 1024, dpr = 1, renderPriority = 0, children, customRender, ...props }) {\n    const [hasSize, setHasSize] = useState(false);\n    const ref = useRef(null);\n    const renderTargetRef = useRef(undefined);\n    const layerEntryRef = useRef(undefined);\n    useEffect(() => {\n        setHasSize(false);\n        let aborted = false;\n        waitForXRLayerSrcSize(src).then(() => !aborted && setHasSize(true));\n        return () => void (aborted = true);\n    }, [src]);\n    const layersEnabled = useXRSessionFeatureEnabled('layers');\n    const geometry = useMemo(() => createXRLayerGeometry(props.shape ?? 'quad', {\n        centralAngle: props.centralAngle,\n        centralHorizontalAngle: props.centralHorizontalAngle,\n        lowerVerticalAngle: props.lowerVerticalAngle,\n        upperVerticalAngle: props.upperVerticalAngle,\n    }), [props.centralAngle, props.centralHorizontalAngle, props.lowerVerticalAngle, props.shape, props.upperVerticalAngle]);\n    const store = useLayerStore(pixelWidth, pixelHeight, dpr);\n    useForwardEvents(store, ref, [hasSize, layersEnabled]);\n    if (!hasSize) {\n        return null;\n    }\n    return (_jsxs(_Fragment, { children: [src == null && (_jsx(ChildrenToRenderTarget, { customRender: customRender, store: store, renderPriority: renderPriority, renderTargetRef: renderTargetRef, layerEntryRef: layersEnabled ? layerEntryRef : undefined, children: children })), layersEnabled ? (_jsx(XRLayerImplementation, { renderTargetRef: renderTargetRef, layerEntryRef: layerEntryRef, pixelWidth: pixelWidth, pixelHeight: pixelHeight, dpr: dpr, ref: ref, ...props, src: src, geometry: geometry })) : (_jsx(FallbackXRLayerImplementation, { renderTargetRef: renderTargetRef, ref: ref, ...props, src: src, pixelWidth: pixelWidth, pixelHeight: pixelHeight, dpr: dpr, geometry: geometry }))] }));\n}\nexport const XRLayerImplementation = forwardRef(({ src, shape, colorFormat, depthFormat, layout, mipLevels, renderOrder = 0, blendTextureSourceAlpha, centralAngle, centralHorizontalAngle, chromaticAberrationCorrection, lowerVerticalAngle, quality, upperVerticalAngle, invertStereo, pixelWidth, pixelHeight, dpr, renderTargetRef, layerEntryRef, ...props }, ref) => {\n    const internalRef = useRef(null);\n    const renderer = useThree((state) => state.gl);\n    const store = useXRStore();\n    const layerProperties = {\n        blendTextureSourceAlpha,\n        centralAngle,\n        centralHorizontalAngle,\n        chromaticAberrationCorrection,\n        lowerVerticalAngle,\n        quality,\n        upperVerticalAngle,\n    };\n    const layerPropertiesRef = useRef(layerProperties);\n    layerPropertiesRef.current = layerProperties;\n    const renderOrderRef = useRef(renderOrder);\n    renderOrderRef.current = renderOrder;\n    const originReferenceSpace = useXR((s) => s.originReferenceSpace);\n    //create layer\n    useEffect(() => {\n        if (internalRef.current == null || originReferenceSpace == null) {\n            return;\n        }\n        const resolvedSrc = src ?? (renderTargetRef.current = createXRLayerRenderTarget(pixelWidth, pixelHeight, dpr));\n        const layer = createXRLayer(resolvedSrc, store.getState(), originReferenceSpace, renderer.xr, internalRef.current, {\n            colorFormat,\n            depthFormat,\n            invertStereo,\n            layout,\n            mipLevels,\n            shape,\n        }, layerPropertiesRef.current);\n        if (layer == null) {\n            return;\n        }\n        const layerEntry = (layerEntryRef.current = {\n            layer,\n            renderOrder: renderOrderRef.current,\n            object3D: internalRef.current,\n        });\n        store.addLayerEntry(layerEntry);\n        if (resolvedSrc instanceof HTMLVideoElement || resolvedSrc instanceof WebGLRenderTarget) {\n            return () => {\n                store.removeLayerEntry(layerEntry);\n                layer.destroy();\n            };\n        }\n        const cleanupXRImageLayer = setupXRImageLayer(renderer, store, layer, resolvedSrc);\n        return () => {\n            store.removeLayerEntry(layerEntry);\n            cleanupXRImageLayer();\n            layer.destroy();\n        };\n    }, [\n        originReferenceSpace,\n        colorFormat,\n        depthFormat,\n        invertStereo,\n        layerEntryRef,\n        layout,\n        mipLevels,\n        pixelHeight,\n        pixelWidth,\n        dpr,\n        renderTargetRef,\n        renderer,\n        shape,\n        src,\n        store,\n    ]);\n    //update render order\n    if (layerEntryRef.current != null) {\n        layerEntryRef.current.renderOrder = renderOrder;\n    }\n    //update layer properties\n    if (layerEntryRef.current != null) {\n        updateXRLayerProperties(layerEntryRef.current.layer, layerPropertiesRef.current);\n    }\n    //update layer transform\n    useFrame(() => {\n        if (layerEntryRef.current == null || internalRef.current == null) {\n            return;\n        }\n        updateXRLayerTransform(store.getState(), layerEntryRef.current.layer, layerPropertiesRef.current.centralAngle, internalRef.current);\n    });\n    useImperativeHandle(ref, () => internalRef.current, []);\n    return (_jsx(\"mesh\", { ...props, renderOrder: -Infinity, ref: internalRef, children: _jsx(\"meshBasicMaterial\", { colorWrite: false }) }));\n});\nexport const FallbackXRLayerImplementation = forwardRef(({ src, renderTargetRef, dpr, renderOrder, pixelWidth, pixelHeight, ...props }, ref) => {\n    const materialRef = useRef(null);\n    useEffect(() => {\n        if (materialRef.current == null) {\n            return;\n        }\n        const resolvedSrc = src ?? (renderTargetRef.current = createXRLayerRenderTarget(pixelWidth, pixelHeight, dpr));\n        const texture = getXRLayerSrcTexture(resolvedSrc);\n        materialRef.current.map = texture;\n        materialRef.current.needsUpdate = true;\n        return () => {\n            if (resolvedSrc instanceof WebGLRenderTarget) {\n                resolvedSrc.dispose();\n                return;\n            }\n            texture.dispose();\n        };\n    }, [src, pixelWidth, pixelHeight, dpr, renderTargetRef]);\n    return (_jsx(\"mesh\", { ref: ref, ...props, children: _jsx(\"meshBasicMaterial\", { ref: materialRef, toneMapped: false }) }));\n});\nfunction useForwardEvents(store, ref, deps) {\n    useEffect(() => {\n        const { current } = ref;\n        if (current == null) {\n            return;\n        }\n        let cleanup;\n        const update = (state, prevState) => {\n            if (state.camera === prevState?.camera && state.scene === prevState.scene) {\n                return;\n            }\n            cleanup?.();\n            const { destroy, update } = forwardObjectEvents(current, () => state.camera, state.scene);\n            const cleanupUpdate = addEffect(update);\n            cleanup = () => {\n                destroy();\n                cleanupUpdate();\n            };\n        };\n        update(store.getState());\n        const unsubscribe = store.subscribe(update);\n        return () => {\n            unsubscribe();\n            cleanup?.();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [store, ref, ...deps]);\n}\n// Keys that shouldn't be copied between R3F stores\nexport const privateKeys = [\n    'set',\n    'get',\n    'setSize',\n    'setFrameloop',\n    'setDpr',\n    'events',\n    'invalidate',\n    'advance',\n    'size',\n    'viewport',\n];\nexport function useLayerStore(width, height, dpr) {\n    const previousRoot = useStore();\n    const layerStore = useMemo(() => {\n        let previousState = previousRoot.getState();\n        // We have our own camera in here, separate from the main scene.\n        const camera = new PerspectiveCamera(50, 1, 0.1, 1000);\n        camera.position.set(0, 0, 5);\n        const pointer = new Vector2();\n        let ownState = {\n            events: { enabled: false, priority: 0 },\n            size: { width: 1, height: 1, left: 0, top: 0 },\n            camera,\n            scene: new Scene(),\n            raycaster: new Raycaster(),\n            pointer: pointer,\n            mouse: pointer,\n            previousRoot,\n        };\n        //we now merge in order previousState, injectState, ownState\n        const store = create((innerSet, get) => {\n            const merge = () => {\n                const result = {};\n                for (const key in previousState) {\n                    if (privateKeys.includes(key)) {\n                        continue;\n                    }\n                    result[key] = previousState[key];\n                }\n                return Object.assign(result, ownState, {\n                    events: { ...previousState.events, ...ownState.events },\n                    viewport: Object.assign({}, previousState.viewport, previousState.viewport.getCurrentViewport(camera, new Vector3(), ownState.size)),\n                });\n            };\n            const update = () => innerSet(merge());\n            return {\n                ...previousState,\n                // Set and get refer to this root-state\n                set(newOwnState) {\n                    if (typeof newOwnState === 'function') {\n                        newOwnState = newOwnState(get());\n                    }\n                    Object.assign(ownState, newOwnState);\n                    update();\n                },\n                setPreviousState(prevState) {\n                    previousState = prevState;\n                    update();\n                },\n                get,\n                setEvents() { },\n                ...merge(),\n            };\n        });\n        return Object.assign(store, {\n            setState(state) {\n                store.getState().set(state);\n            },\n        });\n    }, [previousRoot]);\n    //syncing up previous store with the current store\n    useEffect(() => previousRoot.subscribe(layerStore.getState().setPreviousState), [previousRoot, layerStore]);\n    useEffect(() => {\n        const viewport = {\n            factor: 1,\n            distance: 0,\n            dpr,\n            initialDpr: dpr,\n            left: 0,\n            top: 0,\n            getCurrentViewport: () => viewport,\n            width,\n            height,\n            aspect: width / height,\n        };\n        layerStore.setState({\n            size: { width, height, top: 0, left: 0 },\n            viewport,\n        });\n    }, [width, height, dpr, layerStore, previousRoot]);\n    return layerStore;\n}\nconst v4Helper = new Vector4();\n//required hack to support pmndrs/postprocessing\nfunction getSize(target) {\n    this.getViewport(v4Helper);\n    target.x = v4Helper.z - v4Helper.x;\n    target.y = v4Helper.w - v4Helper.y;\n    return target;\n}\nconst viewportHelper = new Vector4();\nfunction ChildrenToRenderTarget({ renderPriority, children, layerEntryRef, renderTargetRef, store, customRender, }) {\n    useEffect(() => {\n        const update = (state, prevState) => {\n            const { size, camera } = state;\n            if (camera instanceof OrthographicCamera) {\n                camera.left = size.width / -2;\n                camera.right = size.width / 2;\n                camera.top = size.height / 2;\n                camera.bottom = size.height / -2;\n            }\n            else {\n                camera.aspect = size.width / size.height;\n            }\n            if (size !== prevState?.size || camera !== prevState.camera) {\n                camera.updateProjectionMatrix();\n                // https://github.com/pmndrs/react-three-fiber/issues/178\n                // Update matrix world since the renderer is a frame late\n                camera.updateMatrixWorld();\n            }\n        };\n        update(store.getState());\n        return store.subscribe(update);\n    }, [store]);\n    let oldAutoClear;\n    let oldXrEnabled;\n    let oldIsPresenting;\n    let oldRenderTarget;\n    let oldGetDrawingBufferSize;\n    let oldGetSize;\n    //TODO: support frameloop=\"demand\"\n    useFrame((_, delta, frame) => {\n        if (renderTargetRef.current == null ||\n            (layerEntryRef != null && (layerEntryRef.current == null || frame == null))) {\n            return;\n        }\n        const state = store.getState();\n        const { gl, scene, camera } = state;\n        oldAutoClear = gl.autoClear;\n        oldXrEnabled = gl.xr.enabled;\n        oldIsPresenting = gl.xr.isPresenting;\n        oldRenderTarget = gl.getRenderTarget();\n        oldGetSize = gl.getSize;\n        oldGetDrawingBufferSize = gl.getDrawingBufferSize;\n        gl.getViewport(viewportHelper);\n        gl.autoClear = true;\n        gl.xr.enabled = false;\n        gl.xr.isPresenting = false;\n        const renderTarget = renderTargetRef.current;\n        gl.setViewport(0, 0, renderTarget.width, renderTarget.height);\n        gl.getSize = getSize;\n        gl.getDrawingBufferSize = getSize;\n        setXRLayerRenderTarget(gl, renderTarget, layerEntryRef?.current, frame);\n        if (customRender != null) {\n            customRender(renderTarget, state, delta, frame);\n        }\n        else {\n            gl.render(scene, camera);\n        }\n        gl.setRenderTarget(oldRenderTarget);\n        gl.setViewport(viewportHelper);\n        gl.autoClear = oldAutoClear;\n        gl.xr.enabled = oldXrEnabled;\n        gl.xr.isPresenting = oldIsPresenting;\n        gl.getSize = oldGetSize;\n        gl.getDrawingBufferSize = oldGetDrawingBufferSize;\n    }, renderPriority);\n    return _jsx(_Fragment, { children: reconciler.createPortal(_jsx(context.Provider, { value: store, children: children }), store, null) });\n}\n", "import { createXRControllerLocomotionUpdate, } from '@pmndrs/xr/internals';\nimport { useFrame } from '@react-three/fiber';\nimport { useMemo } from 'react';\nimport { useXRStore } from './xr.js';\n/**\n * A hook for handling basic locomotion in VR\n * @param target Either a `THREE.Group` ref, or a callback function. Recieves movement input (required).\n * @param translationOptions Options that control the translation of the user. Set to `false` to disable.\n *\n * #### `translationOptions.speed` - The speed at which the user moves.\n *\n * @param rotationOptions Options that control the rotation of the user. Set to `false` to disable.\n *\n * #### `rotationOptions.deadZone` - How far the joystick must be pushed to trigger a turn.\n * #### `rotationOptions.type` - Controls how rotation using the controller functions. Can be either 'smooth' or 'snap'.\n * #### `rotationOptions.degrees` - If `type` is 'snap', this specifies the number of degrees to snap the user's view by.\n * #### `rotationOptions.speed` - If `type` is 'smooth', this specifies the speed at which the user's view rotates.\n *\n * @param translationControllerHand Specifies which hand will control the movement. Can be either 'left' or 'right'.\n */\nexport function useXRControllerLocomotion(target, translationOptions = {}, rotationOptions = {}, translationControllerHand = 'left') {\n    const store = useXRStore();\n    const update = useMemo(() => createXRControllerLocomotionUpdate(), []);\n    useFrame((state, delta, frame) => update(typeof target === 'function' ? target : target.current, store, state.camera, delta, translationOptions, rotationOptions, translationControllerHand, delta, state, frame));\n}\n", "import { forwardHtmlEvents } from '@pmndrs/pointer-events';\nimport { addEffect, useThree } from '@react-three/fiber';\nimport { useEffect } from 'react';\nexport function PointerEvents({ batchEvents, clickThesholdMs, clickThresholdMs, contextMenuButton, customSort, dblClickThresholdMs, filter, forwardPointerCapture, intersectEveryFrame, pointerTypePrefix, }) {\n    const domElement = useThree((s) => s.gl.domElement);\n    const alwaysRendering = useThree((s) => s.frameloop === 'always');\n    const camera = useThree((s) => s.camera);\n    const scene = useThree((s) => s.scene);\n    useEffect(() => {\n        const { destroy, update } = forwardHtmlEvents(domElement, () => camera, scene, {\n            batchEvents: batchEvents ?? alwaysRendering,\n            clickThesholdMs,\n            clickThresholdMs,\n            contextMenuButton,\n            customSort,\n            dblClickThresholdMs,\n            filter,\n            forwardPointerCapture,\n            intersectEveryFrame,\n            pointerTypePrefix,\n        });\n        const cleanupUpdate = addEffect(update);\n        return () => {\n            cleanupUpdate();\n            destroy();\n        };\n    }, [\n        domElement,\n        camera,\n        scene,\n        alwaysRendering,\n        batchEvents,\n        clickThresholdMs,\n        clickThesholdMs,\n        contextMenuButton,\n        customSort,\n        dblClickThresholdMs,\n        filter,\n        forwardPointerCapture,\n        intersectEveryFrame,\n        pointerTypePrefix,\n    ]);\n    return null;\n}\nexport const noEvents = () => ({ enabled: false, priority: 0 });\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { useStore } from 'zustand';\nimport { useXRSessionModeSupported } from '../hooks.js';\n/**\n * @deprecated use `<button onClick={() => store.enterXR()}>` instead\n */\nexport const XRButton = forwardRef(({ store, mode, onError, children, ...props }, ref) => {\n    const session = useStore(store, (xr) => xr.session);\n    const supported = useXRSessionModeSupported(mode, onError);\n    return (_jsx(\"button\", { ref: ref, ...props, onClick: () => (session != null ? session.end() : store.enterXR(mode).catch(onError)), children: typeof children === 'function'\n            ? children(supported ? (session != null ? 'entered' : 'exited') : 'unsupported')\n            : children }));\n});\n/**\n * @deprecated use `<button onClick={() => store.enterAR()}>` instead\n */\nexport const ARButton = forwardRef((props, ref) => {\n    return _jsx(XRButton, { ref: ref, mode: \"immersive-ar\", ...props });\n});\n/**\n * @deprecated use `<button onClick={() => store.enterVR()}>` instead\n */\nexport const VRButton = forwardRef((props, ref) => {\n    return _jsx(XRButton, { ref: ref, mode: \"immersive-vr\", ...props });\n});\n", "import { PointerEvent } from '@pmndrs/pointer-events';\nimport { useEffect, useRef } from 'react';\nimport { useXRInputSourceState, useXRInputSourceStateContext } from '../input.js';\nimport { useXRSpace } from '../space.js';\nimport { useXR } from '../xr.js';\nconst eventTranslations = {\n    onBlur: 'pointerleave',\n    onHover: 'pointerenter',\n    onMove: 'pointermove',\n    onSelect: {\n        type: 'click',\n        filter: (e) => e.pointerType === 'ray',\n    },\n    onSelectEnd: {\n        type: 'pointerup',\n        filter: (e) => e.pointerType === 'ray',\n    },\n    onSelectStart: {\n        type: 'pointerdown',\n        filter: (e) => e.pointerType === 'ray',\n    },\n    onSqueeze: {\n        type: 'click',\n        filter: (e) => e.pointerType === 'grab',\n    },\n    onSqueezeEnd: {\n        type: 'pointerup',\n        filter: (e) => e.pointerType === 'grab',\n    },\n    onSqueezeStart: {\n        type: 'pointerdown',\n        filter: (e) => e.pointerType === 'grab',\n    },\n};\n/**\n * @deprecated Use normal react-three/fiber event listeners instead (e.g. `<mesh onClick={...} />`)\n */\nexport function useInteraction(ref, type, handler) {\n    const handlerRef = useRef(handler);\n    handlerRef.current = handler;\n    useEffect(() => {\n        const { current } = ref;\n        if (current == null) {\n            return;\n        }\n        const translation = eventTranslations[type];\n        const fn = typeof translation === 'string'\n            ? (event) => handlerRef.current?.({ intersection: event, intersections: [event], target: event.pointerState })\n            : (event) => {\n                if (event instanceof PointerEvent && !translation.filter(event)) {\n                    return;\n                }\n                handlerRef.current?.({ intersection: event, intersections: [event], target: event.pointerState });\n            };\n        const eventName = typeof translation === 'string' ? translation : translation.type;\n        current.addEventListener(eventName, fn);\n        return () => current.removeEventListener(eventName, fn);\n    }, [ref, type]);\n}\n/**\n * @deprecated Implement custom listeners instead\n */\nexport function useXREvent(type, handler, { handedness } = {}) {\n    const session = useXR((xr) => xr.session);\n    const handlerRef = useRef(handler);\n    handlerRef.current = handler;\n    useEffect(() => {\n        if (session == null) {\n            return;\n        }\n        const fn = (e) => {\n            handlerRef.current?.({\n                type: e.type,\n                data: e.inputSource,\n            });\n        };\n        session.addEventListener(type, fn);\n        return () => session.removeEventListener(type, fn);\n    }, [session, handedness, type]);\n}\nexport function useXRTransientPointerState(handedness) {\n    return handedness == null\n        ? // eslint-disable-next-line react-hooks/rules-of-hooks\n            useXRInputSourceStateContext('transientPointer')\n        : // eslint-disable-next-line react-hooks/rules-of-hooks\n            useXRInputSourceState('transientPointer', handedness);\n}\n/**\n * Hook for getting the gaze state\n *\n * @deprecated use `useXRInputSourceStateContext(\"gaze\")` instead\n */\nexport function useXRGazeState() {\n    return useXRInputSourceStateContext('gaze');\n}\n/**\n * Hook for getting the screen-input state\n *\n * @deprecated `useXRInputSourceStateContext(\"screenInput\")` instead\n */\nexport function useXRScreenInputState() {\n    return useXRInputSourceStateContext('screenInput');\n}\nexport function useXRHandState(handedness) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return handedness == null ? useXRInputSourceStateContext('hand') : useXRInputSourceState('hand', handedness);\n}\nexport function useXRControllerState(handedness) {\n    return handedness == null\n        ? // eslint-disable-next-line react-hooks/rules-of-hooks\n            useXRInputSourceStateContext('controller')\n        : // eslint-disable-next-line react-hooks/rules-of-hooks\n            useXRInputSourceState('controller', handedness);\n}\n/**\n * @deprecated use `useXRSpace` instead\n */\nexport const useXRReferenceSpace = useXRSpace;\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useInteraction } from './hooks.js';\n/**\n * @deprecated Just use `<group onClick... />`\n */\nexport const Interactive = forwardRef(({ onHover, onBlur, onSelectStart, onSelectEnd, onSelect, onSqueezeStart, onSqueezeEnd, onSqueeze, onMove, children, }, passedRef) => {\n    const ref = useRef(null);\n    useImperativeHandle(passedRef, () => ref.current);\n    useInteraction(ref, 'onHover', onHover);\n    useInteraction(ref, 'onBlur', onBlur);\n    useInteraction(ref, 'onSelectStart', onSelectStart);\n    useInteraction(ref, 'onSelectEnd', onSelectEnd);\n    //useInteraction(ref, 'onSelectMissed', onSelectMissed)\n    useInteraction(ref, 'onSelect', onSelect);\n    useInteraction(ref, 'onSqueezeStart', onSqueezeStart);\n    useInteraction(ref, 'onSqueezeEnd', onSqueezeEnd);\n    //useInteraction(ref, 'onSqueezeMissed', onSqueezeMissed)\n    useInteraction(ref, 'onSqueeze', onSqueeze);\n    useInteraction(ref, 'onMove', onMove);\n    return _jsx(\"group\", { ref: ref, children: children });\n});\n", "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { isXRInputSourceState } from '@pmndrs/xr/internals';\nimport { useFrame } from '@react-three/fiber';\nimport { forwardRef, useImperativeHandle, useMemo, useRef } from 'react';\nimport { Matrix4 } from 'three';\nimport { Interactive } from './interactive.js';\n/**\n * @deprecated use `DragControls` instead\n */\nexport const RayGrab = forwardRef(function RayGrab({ onSelectStart, onSelectEnd, children, ...rest }, forwardedRef) {\n    const grabbingController = useRef(undefined);\n    const groupRef = useRef(null);\n    const previousTransform = useMemo(() => new Matrix4(), []);\n    useImperativeHandle(forwardedRef, () => groupRef.current);\n    useFrame(() => {\n        const controller = grabbingController.current;\n        const group = groupRef.current;\n        if (!group || !controller)\n            return;\n        group.applyMatrix4(previousTransform);\n        controller.updateWorldMatrix(true, false);\n        group.applyMatrix4(controller.matrixWorld);\n        group.updateMatrixWorld();\n        previousTransform.copy(controller.matrixWorld).invert();\n    });\n    return (_jsx(Interactive, { ref: groupRef, onSelectStart: (e) => {\n            if (isXRInputSourceState(e.target) &&\n                (e.target.type === 'controller' || e.target.type === 'hand') &&\n                e.target.object != null) {\n                grabbingController.current = e.target.object;\n                e.target.object.updateWorldMatrix(true, false);\n                previousTransform.copy(e.target.object.matrixWorld).invert();\n                onSelectStart?.(e);\n            }\n        }, onSelectEnd: (e) => {\n            if (e.target.controller === grabbingController.current) {\n                grabbingController.current = undefined;\n            }\n            onSelectEnd?.(e);\n        }, ...rest, children: children }));\n});\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "i", "i", "MeshBasicMaterial", "event", "i", "Object3D", "Group", "Vector3", "Quaternion", "Vector3", "quaternionHelper", "Vector3", "emulate", "i", "Mesh", "Object3D", "Material", "Mesh", "Mesh", "Material", "i", "Mesh", "Mesh", "BufferGeometry", "Vector2", "Group", "Mesh", "MeshBasicMaterial", "WebGLRenderTarget", "Matrix4", "PlaneGeometry", "Quaternion", "Vector3", "matrixHelper", "Matrix4", "vectorHelper", "Vector3", "quaternionHelper", "Quaternion", "PlaneGeometry", "context", "Mesh", "Quaternion", "Vector3", "clamp", "quaternionHelper", "i", "Matrix4", "Quaternion", "Vector3", "matrixHelper", "Matrix4", "vectorHelper", "Vector3", "scaleHelper", "quaternionHelper", "Quaternion", "Matrix4", "Quaternion", "Vector3", "Vector3", "Quaternion", "Matrix4", "matrixHelper2", "quaternionHelper", "positionHelper", "vectorHelper", "Euler", "Quaternion", "Vector3", "vectorHelper", "quaternionHelper", "eulerHelper", "positionHelper", "scaleHelper", "i", "import_react", "import_react", "import_jsx_runtime", "import_react", "createStoreImpl", "createStore", "import_react", "ReactExports", "useSyncExternalStoreExports", "useStore", "createStore", "import_jsx_runtime", "import_react", "import_jsx_runtime", "import_react", "import_react", "state", "XRControllerModel", "_jsx", "XRSpace", "import_jsx_runtime", "import_react", "GLTFLoader", "XRHandModel", "GLTFLoader", "_jsx", "XRSpace", "import_jsx_runtime", "import_react", "CombinedPointer", "_jsx", "PointerRayModel", "PointerCursorModel", "_jsxs", "_Fragment", "import_jsx_runtime", "import_react", "_jsx", "TeleportPointerRayModel", "_jsx", "XRSpace", "PointerCursorModel", "_jsxs", "PointerRayModel", "_Fragment", "XRControllerModel", "CombinedPointer", "XRHandModel", "state", "TeleportPointerRayModel", "import_react", "map", "_jsx", "_Fragment", "_jsxs", "XRSpace", "spreadable", "createXRStore", "_jsx", "_jsxs", "useStore", "XRSpace", "_jsx", "context", "import_jsx_runtime", "import_react", "_jsx", "geometry", "import_jsx_runtime", "import_react", "_jsx", "geometry", "import_jsx_runtime", "import_react", "_jsx", "_Fragment", "import_jsx_runtime", "_jsx", "_Fragment", "import_jsx_runtime", "_jsx", "_Fragment", "import_jsx_runtime", "_jsx", "_Fragment", "import_jsx_runtime", "import_react", "_jsx", "import_jsx_runtime", "import_react", "useStore", "_jsx", "import_react", "create", "anchor", "import_jsx_runtime", "import_react", "_jsx", "import_jsx_runtime", "import_react", "Vector2", "Vector3", "WebGLRenderTarget", "_jsxs", "_Fragment", "_jsx", "WebGLRenderTarget", "update", "Vector2", "Vector3", "import_react", "import_react", "import_jsx_runtime", "import_react", "useStore", "_jsx", "import_react", "import_jsx_runtime", "import_react", "_jsx", "import_jsx_runtime", "import_react", "Matrix4", "RayGrab", "Matrix4", "_jsx"]
}
