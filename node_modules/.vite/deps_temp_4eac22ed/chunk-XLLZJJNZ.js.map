{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/abstractAudio/audioEngineV2.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractSpatialAudioListener.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/spatialAudioListener.ts", "../../../dev/core/src/AudioV2/webAudio/subProperties/spatialWebAudioListener.ts", "../../../dev/core/src/AudioV2/abstractAudio/mainAudioOut.ts", "../../../dev/core/src/AudioV2/webAudio/webAudioMainOut.ts", "../../../dev/core/src/AudioV2/webAudio/webAudioUnmuteUI.ts", "../../../dev/core/src/AudioV2/webAudio/webAudioEngine.ts", "../../../dev/core/src/Audio/audioEngine.ts"],
  "sourcesContent": ["import type { Nullable } from \"../../types\";\nimport type { IAudioParameterRampOptions } from \"../audioParameter\";\nimport type { AbstractAudioNode, AbstractNamedAudioNode } from \"./abstractAudioNode\";\nimport type { AbstractSoundSource, ISoundSourceOptions } from \"./abstractSoundSource\";\nimport type { AudioBus, IAudioBusOptions } from \"./audioBus\";\nimport type { IMainAudioBusOptions, MainAudioBus } from \"./mainAudioBus\";\nimport type { IStaticSoundOptions, StaticSound } from \"./staticSound\";\nimport type { IStaticSoundBufferOptions, StaticSoundBuffer } from \"./staticSoundBuffer\";\nimport type { IStreamingSoundOptions, StreamingSound } from \"./streamingSound\";\nimport type { AbstractSpatialAudioListener, ISpatialAudioListenerOptions } from \"./subProperties/abstractSpatialAudioListener\";\n\nconst Instances: AudioEngineV2[] = [];\n\n/**\n * Gets the most recently created v2 audio engine.\n * @returns The most recently created v2 audio engine.\n */\nexport function LastCreatedAudioEngine(): Nullable<AudioEngineV2> {\n    if (Instances.length === 0) {\n        return null;\n    }\n\n    return Instances[Instances.length - 1];\n}\n\n/**\n * Options for creating a v2 audio engine.\n */\nexport interface IAudioEngineV2Options extends ISpatialAudioListenerOptions {\n    /**\n     * The smoothing duration to use when changing audio parameters, in seconds. Defaults to `0.01` (10 milliseconds).\n     */\n    parameterRampDuration: number;\n    /**\n     * The initial output volume of the audio engine. Defaults to `1`.\n     */\n    volume: number;\n}\n\n/**\n * The state of a v2 audio engine.\n * @see {@link AudioEngineV2.state}\n */\nexport type AudioEngineV2State = \"closed\" | \"interrupted\" | \"running\" | \"suspended\";\n\n/**\n * Abstract base class for v2 audio engines.\n *\n * A v2 audio engine based on the WebAudio API can be created with the {@link CreateAudioEngineAsync} function.\n */\nexport abstract class AudioEngineV2 {\n    /** Not owned, but all items should be in `_nodes` container, too, which is owned. */\n    private readonly _mainBuses = new Set<MainAudioBus>();\n\n    /** Owned top-level sound and bus nodes. */\n    private readonly _nodes = new Set<AbstractNamedAudioNode>();\n\n    private _defaultMainBus: Nullable<MainAudioBus> = null;\n\n    private _parameterRampDuration: number = 0.01;\n\n    protected constructor(options: Partial<IAudioEngineV2Options>) {\n        Instances.push(this);\n\n        if (typeof options.parameterRampDuration === \"number\") {\n            this.parameterRampDuration = options.parameterRampDuration;\n        }\n    }\n\n    /**\n     * The elapsed time since the audio engine was started, in seconds.\n     */\n    public abstract readonly currentTime: number;\n\n    /**\n     * The default main bus that will be used for audio buses and sounds if their `outBus` option is not set.\n     * @see {@link IAudioBusOptions.outBus}\n     * @see {@link IAbstractSoundOptions.outBus}\n     */\n    public get defaultMainBus(): Nullable<MainAudioBus> {\n        if (this._mainBuses.size === 0) {\n            return null;\n        }\n\n        if (!this._defaultMainBus) {\n            this._defaultMainBus = Array.from(this._mainBuses)[0];\n        }\n\n        return this._defaultMainBus;\n    }\n\n    /**\n     * The spatial audio listener properties for the audio engine.\n     * - Each audio engine has exactly one listener.\n     */\n    public abstract readonly listener: AbstractSpatialAudioListener;\n\n    /**\n     * The main output node.\n     * - This is the last node in the audio graph before the audio is sent to the speakers.\n     */\n    public abstract readonly mainOut: AbstractAudioNode;\n\n    /**\n     * The current state of the audio engine.\n     *\n     * Possible values are:\n     * - `\"closed\"`: The audio engine has been closed.\n     * - `\"interrupted\"`: The audio engine has been interrupted and is not running.\n     * - `\"running\"`: The audio engine is running normally.\n     * - `\"suspended\"`: The audio engine is suspended and is not running.\n     */\n    public abstract readonly state: AudioEngineV2State;\n\n    /**\n     * The output volume of the audio engine.\n     */\n    public abstract volume: number;\n\n    /**\n     * The smoothing duration to use when changing audio parameters, in seconds. Defaults to `0.01` (10 milliseconds).\n     *\n     * Due to limitations in some browsers, it is not recommended to set this value to longer than `0.01` seconds.\n     *\n     * Setting this value to longer than `0.01` seconds may result in errors being throw when setting audio parameters.\n     */\n    public get parameterRampDuration(): number {\n        return this._parameterRampDuration;\n    }\n\n    public set parameterRampDuration(value: number) {\n        this._parameterRampDuration = Math.max(0, value);\n    }\n\n    /**\n     * Creates a new audio bus.\n     * @param name - The name of the audio bus.\n     * @param options - The options to use when creating the audio bus.\n     * @returns A promise that resolves with the created audio bus.\n     */\n    public abstract createBusAsync(name: string, options?: Partial<IAudioBusOptions>): Promise<AudioBus>;\n\n    /**\n     * Creates a new main audio bus.\n     * @param name - The name of the main audio bus.\n     * @param options - The options to use when creating the main audio bus.\n     * @returns A promise that resolves with the created main audio bus.\n     */\n    public abstract createMainBusAsync(name: string, options?: Partial<IMainAudioBusOptions>): Promise<MainAudioBus>;\n\n    /**\n     * Creates a new microphone sound source.\n     * @param name - The name of the sound.\n     * @param options - The options for the sound source.\n     * @returns A promise that resolves to the created sound source.\n     */\n    public abstract createMicrophoneSoundSourceAsync(name: string, options?: Partial<ISoundSourceOptions>): Promise<AbstractSoundSource>;\n\n    /**\n     * Creates a new static sound.\n     * @param name - The name of the sound.\n     * @param source - The source of the sound.\n     * @param options - The options for the static sound.\n     * @returns A promise that resolves to the created static sound.\n     */\n    public abstract createSoundAsync(\n        name: string,\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options?: Partial<IStaticSoundOptions>\n    ): Promise<StaticSound>;\n\n    /**\n     * Creates a new static sound buffer.\n     * @param source - The source of the sound buffer.\n     * @param options - The options for the static sound buffer.\n     * @returns A promise that resolves to the created static sound buffer.\n     */\n    public abstract createSoundBufferAsync(\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options?: Partial<IStaticSoundBufferOptions>\n    ): Promise<StaticSoundBuffer>;\n\n    /**\n     * Creates a new sound source.\n     * @param name - The name of the sound.\n     * @param source - The source of the sound.\n     * @param options - The options for the sound source.\n     * @returns A promise that resolves to the created sound source.\n     */\n    public abstract createSoundSourceAsync(name: string, source: AudioNode, options?: Partial<ISoundSourceOptions>): Promise<AbstractSoundSource>;\n\n    /**\n     * Creates a new streaming sound.\n     * @param name - The name of the sound.\n     * @param source - The source of the sound.\n     * @param options - The options for the streaming sound.\n     * @returns A promise that resolves to the created streaming sound.\n     */\n    public abstract createStreamingSoundAsync(name: string, source: HTMLMediaElement | string | string[], options?: Partial<IStreamingSoundOptions>): Promise<StreamingSound>;\n\n    /**\n     * Releases associated resources.\n     */\n    public dispose(): void {\n        if (Instances.includes(this)) {\n            Instances.splice(Instances.indexOf(this), 1);\n        }\n\n        const nodeIt = this._nodes.values();\n        for (let next = nodeIt.next(); !next.done; next = nodeIt.next()) {\n            next.value.dispose();\n        }\n\n        this._mainBuses.clear();\n        this._nodes.clear();\n\n        this._defaultMainBus = null;\n    }\n\n    /**\n     * Checks if the specified format is valid.\n     * @param format The format to check as an audio file extension like \"mp3\" or \"wav\".\n     * @returns `true` if the format is valid; otherwise `false`.\n     */\n    public abstract isFormatValid(format: string): boolean;\n\n    /**\n     * Pauses the audio engine if it is running.\n     * @returns A promise that resolves when the audio engine is paused.\n     */\n    public abstract pauseAsync(): Promise<void>;\n\n    /**\n     * Resumes the audio engine if it is not running.\n     * @returns A promise that resolves when the audio engine is running.\n     */\n    public abstract resumeAsync(): Promise<void>;\n\n    /**\n     * Sets the audio output volume with optional ramping.\n     * If the duration is 0 then the volume is set immediately, otherwise it is ramped to the new value over the given duration using the given shape.\n     * If a ramp is already in progress then the volume is not set and an error is thrown.\n     * @param value The value to set the volume to.\n     * @param options The options to use for ramping the volume change.\n     */\n    public abstract setVolume(value: number, options?: Partial<IAudioParameterRampOptions>): void;\n\n    /**\n     * Unlocks the audio engine if it is locked.\n     * - Note that the returned promise may already be resolved if the audio engine is already unlocked.\n     * @returns A promise that is resolved when the audio engine is unlocked.\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    public unlockAsync(): Promise<void> {\n        return this.resumeAsync();\n    }\n\n    protected _addMainBus(mainBus: MainAudioBus): void {\n        this._mainBuses.add(mainBus);\n\n        this._addNode(mainBus);\n    }\n\n    protected _removeMainBus(mainBus: MainAudioBus): void {\n        this._mainBuses.delete(mainBus);\n        this._defaultMainBus = null;\n\n        this._removeNode(mainBus);\n    }\n\n    protected _addNode(node: AbstractNamedAudioNode): void {\n        this._nodes.add(node);\n    }\n\n    protected _removeNode(node: AbstractNamedAudioNode): void {\n        this._nodes.delete(node);\n    }\n}\n\n/**\n * @internal\n * @param engine - The given audio engine. If `null` then the last created audio engine is used.\n * @returns the given audio engine or the last created audio engine.\n * @throws An error if the resulting engine is `null`.\n */\nexport function _GetAudioEngine(engine: Nullable<AudioEngineV2>): AudioEngineV2 {\n    if (!engine) {\n        engine = LastCreatedAudioEngine();\n    }\n\n    if (engine) {\n        return engine;\n    }\n\n    throw new Error(\"No audio engine.\");\n}\n\n/**\n * Creates a new audio bus.\n * @param name - The name of the audio bus.\n * @param options - The options to use when creating the audio bus.\n * @param engine - The audio engine.\n * @returns A promise that resolves with the created audio bus.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateAudioBusAsync(name: string, options: Partial<IAudioBusOptions> = {}, engine: Nullable<AudioEngineV2> = null): Promise<AudioBus> {\n    engine = _GetAudioEngine(engine);\n    return engine.createBusAsync(name, options);\n}\n\n/**\n * Creates a new main audio bus.\n * @param name - The name of the main audio bus.\n * @param options - The options to use when creating the main audio bus.\n * @param engine - The audio engine.\n * @returns A promise that resolves with the created main audio bus.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateMainAudioBusAsync(name: string, options: Partial<IMainAudioBusOptions> = {}, engine: Nullable<AudioEngineV2> = null): Promise<MainAudioBus> {\n    engine = _GetAudioEngine(engine);\n    return engine.createMainBusAsync(name, options);\n}\n\n/**\n * Creates a new microphone sound source.\n * @param name - The name of the sound.\n * @param options - The options for the sound source.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created sound source.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateMicrophoneSoundSourceAsync(name: string, options: Partial<ISoundSourceOptions> = {}, engine: Nullable<AudioEngineV2> = null): Promise<AbstractSoundSource> {\n    engine = _GetAudioEngine(engine);\n    return engine.createMicrophoneSoundSourceAsync(name, options);\n}\n\n/**\n * Creates a new static sound.\n * @param name - The name of the sound.\n * @param source - The source of the sound.\n * @param options - The options for the static sound.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created static sound.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateSoundAsync(\n    name: string,\n    source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n    options: Partial<IStaticSoundOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<StaticSound> {\n    engine = _GetAudioEngine(engine);\n    return engine.createSoundAsync(name, source, options);\n}\n\n/**\n * Creates a new static sound buffer.\n * @param source - The source of the sound buffer.\n * @param options - The options for the static sound buffer.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created static sound buffer.\n */\nexport async function CreateSoundBufferAsync(\n    source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n    options: Partial<IStaticSoundBufferOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<StaticSoundBuffer> {\n    engine = _GetAudioEngine(engine);\n    return await engine.createSoundBufferAsync(source, options);\n}\n\n/**\n * Creates a new sound source.\n * @param name - The name of the sound.\n * @param source - The source of the sound.\n * @param options - The options for the sound source.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created sound source.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateSoundSourceAsync(\n    name: string,\n    source: AudioNode,\n    options: Partial<ISoundSourceOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<AbstractSoundSource> {\n    engine = _GetAudioEngine(engine);\n    return engine.createSoundSourceAsync(name, source, options);\n}\n\n/**\n * Creates a new streaming sound.\n * @param name - The name of the sound.\n * @param source - The source of the sound.\n * @param options - The options for the streaming sound.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created streaming sound.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateStreamingSoundAsync(\n    name: string,\n    source: HTMLMediaElement | string | string[],\n    options: Partial<IStreamingSoundOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<StreamingSound> {\n    engine = _GetAudioEngine(engine);\n    return engine.createStreamingSoundAsync(name, source, options);\n}\n", "import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport type { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\n\nexport const _SpatialAudioListenerDefaults = {\n    position: Vector3.Zero(),\n    rotation: Vector3.Zero(),\n    rotationQuaternion: new Quaternion(),\n} as const;\n\n/**\n * Options for spatial audio.\n */\nexport interface ISpatialAudioListenerOptions {\n    /**\n     * Whether to automatically update the position and rotation of the listener. Defaults to `true`.\n     */\n    listenerAutoUpdate: boolean;\n    /**\n     * Set to `true` to enable the listener. Defaults to `false`.\n     */\n    listenerEnabled: boolean;\n    /**\n     * The minimum update time in seconds of the listener if it is attached to a mesh, scene or transform node. Defaults to `0`.\n     * - The listener's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    listenerMinUpdateTime: number;\n    /**\n     * The listener position. Defaults to (0, 0, 0).\n     */\n    listenerPosition: Vector3;\n    /**\n     * The listener rotation, as Euler angles. Defaults to (0, 0, 0).\n     */\n    listenerRotation: Vector3;\n    /**\n     * The listener rotation, as a quaternion. Defaults to (0, 0, 0, 1).\n     */\n    listenerRotationQuaternion: Quaternion;\n}\n\n/**\n * @param options The spatial audio listener options to check.\n * @returns `true` if spatial audio listener options are defined, otherwise `false`.\n */\nexport function _HasSpatialAudioListenerOptions(options: Partial<ISpatialAudioListenerOptions>): boolean {\n    return (\n        options.listenerEnabled ||\n        options.listenerMinUpdateTime !== undefined ||\n        options.listenerPosition !== undefined ||\n        options.listenerRotation !== undefined ||\n        options.listenerRotationQuaternion !== undefined\n    );\n}\n\n/**\n * Abstract class representing the spatial audio `listener` property on an audio engine.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport abstract class AbstractSpatialAudioListener {\n    /**\n     * Whether the listener is attached to a camera, mesh or transform node.\n     */\n    public abstract isAttached: boolean;\n\n    /**\n     * The minimum update time in seconds of the listener if it is attached to a mesh, scene or transform node. Defaults to `0`.\n     * - The listener's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    public abstract minUpdateTime: number;\n\n    /**\n     * The listener position. Defaults to (0, 0, 0).\n     */\n    public abstract position: Vector3;\n\n    /**\n     * The listener rotation, as Euler angles. Defaults to (0, 0, 0).\n     */\n    public abstract rotation: Vector3;\n\n    /**\n     * The listener rotation, as a quaternion. Defaults to (0, 0, 0, 1).\n     */\n    public abstract rotationQuaternion: Quaternion;\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public abstract attach(sceneNode: Nullable<Node>, useBoundingBox?: boolean, attachmentType?: SpatialAudioAttachmentType): void;\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public abstract detach(): void;\n\n    /**\n     * Updates the position and rotation of the associated audio engine object in the audio rendering graph.\n     *\n     * This is called automatically by default and only needs to be called manually if automatic updates are disabled.\n     */\n    public abstract update(): void;\n}\n", "import type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\nimport { _SpatialAudioAttacherComponent } from \"../components/spatialAudioAttacherComponent\";\nimport type { ISpatialAudioListenerOptions } from \"./abstractSpatialAudioListener\";\nimport { _SpatialAudioListenerDefaults, AbstractSpatialAudioListener } from \"./abstractSpatialAudioListener\";\n\n/** @internal */\nexport abstract class _SpatialAudioListener extends AbstractSpatialAudioListener {\n    protected _attacherComponent: Nullable<_SpatialAudioAttacherComponent> = null;\n\n    protected constructor() {\n        super();\n\n        this._attacherComponent = new _SpatialAudioAttacherComponent(this);\n    }\n\n    /** @internal */\n    public get isAttached(): boolean {\n        return this._attacherComponent !== null && this._attacherComponent.isAttached;\n    }\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public attach(sceneNode: Nullable<Node>, useBoundingBox: boolean = false, attachmentType: SpatialAudioAttachmentType = SpatialAudioAttachmentType.PositionAndRotation): void {\n        if (!this._attacherComponent) {\n            this._attacherComponent = new _SpatialAudioAttacherComponent(this);\n        }\n        this._attacherComponent.attach(sceneNode, useBoundingBox, attachmentType);\n    }\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public detach(): void {\n        this._attacherComponent?.detach();\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._attacherComponent?.dispose();\n        this._attacherComponent = null;\n    }\n\n    /** @internal */\n    public setOptions(options: Partial<ISpatialAudioListenerOptions>): void {\n        if (options.listenerMinUpdateTime !== undefined) {\n            this.minUpdateTime = options.listenerMinUpdateTime;\n        }\n\n        if (options.listenerPosition) {\n            this.position = options.listenerPosition.clone();\n        }\n\n        if (options.listenerRotationQuaternion) {\n            this.rotationQuaternion = options.listenerRotationQuaternion.clone();\n        } else if (options.listenerRotation) {\n            this.rotation = options.listenerRotation.clone();\n        } else {\n            this.rotationQuaternion = _SpatialAudioListenerDefaults.rotationQuaternion.clone();\n        }\n\n        this.update();\n    }\n\n    public abstract _updatePosition(): void;\n    public abstract _updateRotation(): void;\n}\n", "import { Matrix, Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport { _SpatialAudioListener } from \"../../abstractAudio/subProperties/spatialAudioListener\";\nimport { _SpatialWebAudioUpdaterComponent } from \"../components/spatialWebAudioUpdaterComponent\";\nimport { _WebAudioParameterComponent } from \"../components/webAudioParameterComponent\";\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\n\nconst TmpMatrix = Matrix.Zero();\nconst TmpQuaternion = new Quaternion();\nconst TmpVector1 = Vector3.Zero();\nconst TmpVector2 = Vector3.Zero();\n\n/** @internal */\nexport function _CreateSpatialAudioListener(engine: _WebAudioEngine, autoUpdate: boolean, minUpdateTime: number): _SpatialAudioListener {\n    const listener = engine._audioContext.listener;\n    if (\n        listener.forwardX &&\n        listener.forwardY &&\n        listener.forwardZ &&\n        listener.positionX &&\n        listener.positionY &&\n        listener.positionZ &&\n        listener.upX &&\n        listener.upY &&\n        listener.upZ\n    ) {\n        return new _SpatialWebAudioListener(engine, autoUpdate, minUpdateTime);\n    } else {\n        return new _SpatialWebAudioListenerFallback(engine, autoUpdate, minUpdateTime);\n    }\n}\n\nabstract class _AbstractSpatialWebAudioListener extends _SpatialAudioListener {\n    protected readonly _listener: AudioListener;\n\n    protected _lastPosition: Vector3 = Vector3.Zero();\n    protected _lastRotation: Vector3 = Vector3.Zero();\n    protected _lastRotationQuaternion: Quaternion = new Quaternion();\n    protected _updaterComponent: _SpatialWebAudioUpdaterComponent;\n\n    /** @internal */\n    public readonly engine: _WebAudioEngine;\n\n    /** @internal */\n    public readonly position: Vector3 = Vector3.Zero();\n    /** @internal */\n    public readonly rotation: Vector3 = Vector3.Zero();\n    /** @internal */\n    public readonly rotationQuaternion: Quaternion = new Quaternion();\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine, autoUpdate: boolean, minUpdateTime: number) {\n        super();\n\n        this._listener = engine._audioContext.listener;\n        this.engine = engine;\n\n        this._updaterComponent = new _SpatialWebAudioUpdaterComponent(this, autoUpdate, minUpdateTime);\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._updaterComponent.dispose();\n        this._updaterComponent = null!;\n    }\n\n    /** @internal */\n    public get minUpdateTime(): number {\n        return this._updaterComponent.minUpdateTime;\n    }\n\n    /** @internal */\n    public set minUpdateTime(value: number) {\n        this._updaterComponent.minUpdateTime = value;\n    }\n\n    /** @internal */\n    public update(): void {\n        if (this.isAttached) {\n            this._attacherComponent?.update();\n        } else {\n            this._updatePosition();\n            this._updateRotation();\n        }\n    }\n\n    public _updatePosition(): void {\n        if (this._lastPosition.equalsWithEpsilon(this.position)) {\n            return;\n        }\n\n        this._setWebAudioPosition(this.position);\n\n        this._lastPosition.copyFrom(this.position);\n    }\n\n    public _updateRotation(): void {\n        if (!this._lastRotationQuaternion.equalsWithEpsilon(this.rotationQuaternion)) {\n            TmpQuaternion.copyFrom(this.rotationQuaternion);\n            this._lastRotationQuaternion.copyFrom(this.rotationQuaternion);\n        } else if (!this._lastRotation.equalsWithEpsilon(this.rotation)) {\n            Quaternion.FromEulerAnglesToRef(this.rotation.x, this.rotation.y, this.rotation.z, TmpQuaternion);\n            this._lastRotation.copyFrom(this.rotation);\n        } else {\n            return;\n        }\n\n        Matrix.FromQuaternionToRef(TmpQuaternion, TmpMatrix);\n\n        // NB: The WebAudio API is right-handed.\n        Vector3.TransformNormalToRef(Vector3.RightHandedForwardReadOnly, TmpMatrix, TmpVector1);\n        Vector3.TransformNormalToRef(Vector3.Up(), TmpMatrix, TmpVector2);\n\n        this._setWebAudioOrientation(TmpVector1, TmpVector2);\n    }\n\n    protected abstract _setWebAudioPosition(position: Vector3): void;\n    protected abstract _setWebAudioOrientation(forward: Vector3, up: Vector3): void;\n}\n\n/**\n * Full-featured spatial audio listener for the Web Audio API.\n *\n * Used in browsers that support the `forwardX/Y/Z`, `positionX/Y/Z`, and `upX/Y/Z` properties on the AudioContext listener.\n *\n * NB: Firefox falls back to using this implementation.\n *\n * @see _SpatialWebAudioListenerFallback for the implementation used if only `setPosition` and `setOrientation` are available.\n *\n * NB: This sub property is not backed by a sub node and all properties are set directly on the audio context listener.\n *\n * @internal\n */\nclass _SpatialWebAudioListener extends _AbstractSpatialWebAudioListener {\n    private _forwardX: _WebAudioParameterComponent;\n    private _forwardY: _WebAudioParameterComponent;\n    private _forwardZ: _WebAudioParameterComponent;\n    private _positionX: _WebAudioParameterComponent;\n    private _positionY: _WebAudioParameterComponent;\n    private _positionZ: _WebAudioParameterComponent;\n    private _upX: _WebAudioParameterComponent;\n    private _upY: _WebAudioParameterComponent;\n    private _upZ: _WebAudioParameterComponent;\n\n    public constructor(engine: _WebAudioEngine, autoUpdate: boolean, minUpdateTime: number) {\n        super(engine, autoUpdate, minUpdateTime);\n\n        const listener = engine._audioContext.listener;\n        this._forwardX = new _WebAudioParameterComponent(engine, listener.forwardX);\n        this._forwardY = new _WebAudioParameterComponent(engine, listener.forwardY);\n        this._forwardZ = new _WebAudioParameterComponent(engine, listener.forwardZ);\n        this._positionX = new _WebAudioParameterComponent(engine, listener.positionX);\n        this._positionY = new _WebAudioParameterComponent(engine, listener.positionY);\n        this._positionZ = new _WebAudioParameterComponent(engine, listener.positionZ);\n        this._upX = new _WebAudioParameterComponent(engine, listener.upX);\n        this._upY = new _WebAudioParameterComponent(engine, listener.upY);\n        this._upZ = new _WebAudioParameterComponent(engine, listener.upZ);\n    }\n\n    protected override _setWebAudioPosition(position: Vector3): void {\n        // If attached and there is a ramp in progress, we assume another update is coming soon that we can wait for.\n        // We don't do this for unattached nodes because there may not be another update coming.\n        if (this.isAttached && (this._positionX.isRamping || this._positionY.isRamping || this._positionZ.isRamping)) {\n            return;\n        }\n\n        this._positionX.targetValue = position.x;\n        this._positionY.targetValue = position.y;\n        this._positionZ.targetValue = position.z;\n    }\n\n    protected override _setWebAudioOrientation(forward: Vector3, up: Vector3): void {\n        // If attached and there is a ramp in progress, we assume another update is coming soon that we can wait for.\n        // We don't do this for unattached nodes because there may not be another update coming.\n        if (\n            this.isAttached &&\n            (this._forwardX.isRamping || this._forwardY.isRamping || this._forwardZ.isRamping || this._upX.isRamping || this._upY.isRamping || this._upZ.isRamping)\n        ) {\n            return;\n        }\n\n        this._forwardX.targetValue = forward.x;\n        this._forwardY.targetValue = forward.y;\n        this._forwardZ.targetValue = forward.z;\n\n        this._upX.targetValue = up.x;\n        this._upY.targetValue = up.y;\n        this._upZ.targetValue = up.z;\n    }\n}\n\n/**\n * Fallback spatial audio listener for the Web Audio API.\n *\n * Used in browsers that do not support the `forwardX/Y/Z`, `positionX/Y/Z`, and `upX/Y/Z` properties on the\n * AudioContext listener.\n *\n * @see _SpatialWebAudioListener for the implementation used if the `forwardX/Y/Z`, `positionX/Y/Z`, and `upX/Y/Z`\n * properties are available.\n *\n * NB: This sub property is not backed by a sub node and all properties are set directly on the audio context listener.\n *\n * @internal\n */\nclass _SpatialWebAudioListenerFallback extends _AbstractSpatialWebAudioListener {\n    protected override _setWebAudioPosition(position: Vector3): void {\n        this._listener.setPosition(position.x, position.y, position.z);\n    }\n\n    protected override _setWebAudioOrientation(forward: Vector3, up: Vector3): void {\n        this._listener.setOrientation(forward.x, forward.y, forward.z, up.x, up.y, up.z);\n    }\n}\n", "import { AudioNodeType, AbstractAudioNode } from \"./abstractAudioNode\";\nimport type { AudioEngineV2 } from \"./audioEngineV2\";\n\n/**\n * Abstract class for the main audio output node.\n *\n * A main audio output is the last audio node in the audio graph before the audio is sent to the speakers.\n *\n * @see {@link AudioEngineV2.mainOut}\n * @internal\n */\nexport abstract class _MainAudioOut extends AbstractAudioNode {\n    protected constructor(engine: AudioEngineV2) {\n        super(engine, AudioNodeType.HAS_INPUTS);\n    }\n}\n", "import type { Nullable } from \"../../types\";\nimport { _MainAudioOut } from \"../abstractAudio/mainAudioOut\";\nimport type { IAudioParameterRampOptions } from \"../audioParameter\";\nimport { _WebAudioParameterComponent } from \"./components/webAudioParameterComponent\";\nimport type { _WebAudioEngine } from \"./webAudioEngine\";\nimport type { IWebAudioInNode } from \"./webAudioNode\";\n\n/** @internal */\nexport class _WebAudioMainOut extends _MainAudioOut implements IWebAudioInNode {\n    private _gainNode: GainNode;\n    private _volume: _WebAudioParameterComponent;\n\n    /** @internal */\n    public override readonly engine: _WebAudioEngine;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine) {\n        super(engine);\n\n        this._setGainNode(new GainNode(engine._audioContext));\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._volume.dispose();\n        this._gainNode.disconnect();\n        this._destinationNode.disconnect();\n    }\n\n    /** @internal */\n    public get _inNode(): GainNode {\n        return this._gainNode;\n    }\n\n    public set _inNode(value: GainNode) {\n        if (this._gainNode === value) {\n            return;\n        }\n\n        this._setGainNode(value);\n    }\n\n    /** @internal */\n    public get volume(): number {\n        return this._volume.targetValue;\n    }\n\n    /** @internal */\n    public set volume(value: number) {\n        this._volume.targetValue = value;\n    }\n\n    private get _destinationNode(): AudioNode {\n        return this.engine._audioDestination;\n    }\n\n    /** @internal */\n    public getClassName(): string {\n        return \"_WebAudioMainOut\";\n    }\n\n    /** @internal */\n    public setVolume(value: number, options: Nullable<Partial<IAudioParameterRampOptions>> = null): void {\n        this._volume.setTargetValue(value, options);\n    }\n\n    private _setGainNode(gainNode: GainNode): void {\n        if (this._gainNode === gainNode) {\n            return;\n        }\n\n        this._gainNode?.disconnect();\n        gainNode.connect(this._destinationNode);\n\n        this._volume = new _WebAudioParameterComponent(this.engine, gainNode.gain);\n\n        this._gainNode = gainNode;\n    }\n}\n", "import type { Nullable } from \"../../types\";\nimport { EngineStore } from \"../../Engines/engineStore\";\nimport type { _WebAudioEngine } from \"./webAudioEngine\";\n\n/**\n * Adds a UI button that starts the audio engine's underlying audio context when the user presses it.\n * @internal\n */\nexport class _WebAudioUnmuteUI {\n    private _button: Nullable<HTMLButtonElement> = null;\n    private _enabled: boolean = true;\n    private _engine: _WebAudioEngine;\n    private _style: Nullable<HTMLStyleElement> = null;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine, parentElement?: HTMLElement) {\n        this._engine = engine;\n        const parent = parentElement || EngineStore.LastCreatedEngine?.getInputElement()?.parentElement || document.body;\n        const top = (parent?.offsetTop || 0) + 20;\n\n        this._style = document.createElement(\"style\");\n        this._style.appendChild(\n            document.createTextNode(\n                `.babylonUnmute{position:absolute;top:${top}px;margin-left:20px;height:40px;width:60px;background-color:rgba(51,51,51,0.7);background-image:url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2239%22%20height%3D%2232%22%20viewBox%3D%220%200%2039%2032%22%3E%3Cpath%20fill%3D%22white%22%20d%3D%22M9.625%2018.938l-0.031%200.016h-4.953q-0.016%200-0.031-0.016v-12.453q0-0.016%200.031-0.016h4.953q0.031%200%200.031%200.016v12.453zM12.125%207.688l8.719-8.703v27.453l-8.719-8.719-0.016-0.047v-9.938zM23.359%207.875l1.406-1.406%204.219%204.203%204.203-4.203%201.422%201.406-4.219%204.219%204.219%204.203-1.484%201.359-4.141-4.156-4.219%204.219-1.406-1.422%204.219-4.203z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\");background-size:80%;background-repeat:no-repeat;background-position:center;background-position-y:4px;border:none;outline:none;transition:transform 0.125s ease-out;cursor:pointer;z-index:9999;}.babylonUnmute:hover{transform:scale(1.05)}`\n            )\n        );\n        document.head.appendChild(this._style);\n\n        this._button = document.createElement(\"button\");\n        this._button.className = \"babylonUnmute\";\n        this._button.id = \"babylonUnmuteButton\";\n\n        this._button.addEventListener(\"click\", () => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._engine.unlockAsync();\n        });\n\n        parent.appendChild(this._button);\n\n        this._engine.stateChangedObservable.add(this._onStateChanged);\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._button?.remove();\n        this._button = null;\n\n        this._style?.remove();\n        this._style = null;\n\n        this._engine.stateChangedObservable.removeCallback(this._onStateChanged);\n    }\n\n    /** @internal */\n    public get enabled(): boolean {\n        return this._enabled;\n    }\n\n    public set enabled(value: boolean) {\n        this._enabled = value;\n        if (value) {\n            if (this._engine.state !== \"running\") {\n                this._show();\n            }\n        } else {\n            this._hide();\n        }\n    }\n\n    private _show(): void {\n        if (!this._button) {\n            return;\n        }\n\n        this._button.style.display = \"block\";\n    }\n\n    private _hide(): void {\n        if (!this._button) {\n            return;\n        }\n\n        this._button.style.display = \"none\";\n    }\n\n    private _onStateChanged = () => {\n        if (!this._button) {\n            return;\n        }\n\n        if (this._engine.state === \"running\") {\n            this._hide();\n        } else {\n            this._show();\n        }\n    };\n}\n", "import { Observable } from \"../../Misc/observable\";\nimport type { Nullable } from \"../../types\";\nimport type { AbstractNamedAudioNode } from \"../abstractAudio/abstractAudioNode\";\nimport type { AbstractSoundSource, ISoundSourceOptions } from \"../abstractAudio/abstractSoundSource\";\nimport type { AudioBus, IAudioBusOptions } from \"../abstractAudio/audioBus\";\nimport type { AudioEngineV2State, IAudioEngineV2Options } from \"../abstractAudio/audioEngineV2\";\nimport { AudioEngineV2 } from \"../abstractAudio/audioEngineV2\";\nimport type { IMainAudioBusOptions, MainAudioBus } from \"../abstractAudio/mainAudioBus\";\nimport type { IStaticSoundOptions, StaticSound } from \"../abstractAudio/staticSound\";\nimport type { IStaticSoundBufferOptions, StaticSoundBuffer } from \"../abstractAudio/staticSoundBuffer\";\nimport type { IStreamingSoundOptions, StreamingSound } from \"../abstractAudio/streamingSound\";\nimport type { AbstractSpatialAudioListener } from \"../abstractAudio/subProperties/abstractSpatialAudioListener\";\nimport { _HasSpatialAudioListenerOptions } from \"../abstractAudio/subProperties/abstractSpatialAudioListener\";\nimport type { _SpatialAudioListener } from \"../abstractAudio/subProperties/spatialAudioListener\";\nimport type { IAudioParameterRampOptions } from \"../audioParameter\";\nimport { _CreateSpatialAudioListener } from \"./subProperties/spatialWebAudioListener\";\nimport { _WebAudioMainOut } from \"./webAudioMainOut\";\nimport { _WebAudioUnmuteUI } from \"./webAudioUnmuteUI\";\n\n/**\n * Options for creating a v2 audio engine that uses the WebAudio API.\n */\nexport interface IWebAudioEngineOptions extends IAudioEngineV2Options {\n    /**\n     * The audio context to be used by the engine.\n     */\n    audioContext: AudioContext;\n    /**\n     * The default UI's parent element. Defaults to the last created graphics engine's canvas if it exists; otherwise the HTML document's body.\n     */\n    defaultUIParentElement?: HTMLElement;\n    /**\n     * Set to `true` to disable the default UI. Defaults to `false`.\n     */\n    disableDefaultUI?: boolean;\n    /**\n     * Set to `true` to automatically resume the audio context when the user interacts with the page. Defaults to `true`.\n     */\n    resumeOnInteraction: boolean;\n    /**\n     * Set to `true` to automatically resume the audio context when the browser pauses audio playback. Defaults to `true`.\n     */\n    resumeOnPause: boolean;\n    /**\n     * The interval in milliseconds to try resuming audio playback when `resumeOnPause` is `true`. Defaults to `1000`.\n     */\n    resumeOnPauseRetryInterval: number;\n}\n\n/**\n * Creates a new v2 audio engine that uses the WebAudio API.\n * @param options - The options for creating the audio engine.\n * @returns A promise that resolves with the created audio engine.\n */\nexport async function CreateAudioEngineAsync(options: Partial<IWebAudioEngineOptions> = {}): Promise<AudioEngineV2> {\n    const engine = new _WebAudioEngine(options);\n    await engine._initAsync(options);\n    return engine;\n}\n\nconst FormatMimeTypes: { [key: string]: string } = {\n    aac: \"audio/aac\",\n    ac3: \"audio/ac3\",\n    flac: \"audio/flac\",\n    m4a: \"audio/mp4\",\n    mp3: 'audio/mpeg; codecs=\"mp3\"',\n    mp4: \"audio/mp4\",\n    ogg: 'audio/ogg; codecs=\"vorbis\"',\n    wav: \"audio/wav\",\n    webm: 'audio/webm; codecs=\"vorbis\"',\n};\n\n/** @internal */\nexport class _WebAudioEngine extends AudioEngineV2 {\n    private _audioContextStarted = false;\n    private _destinationNode: Nullable<AudioNode> = null;\n    private _invalidFormats = new Set<string>();\n    private _isUpdating = false;\n    private _listener: Nullable<_SpatialAudioListener> = null;\n    private readonly _listenerAutoUpdate: boolean = true;\n    private readonly _listenerMinUpdateTime: number = 0;\n    private _mainOut: _WebAudioMainOut;\n    private _pauseCalled = false;\n    private _resumeOnInteraction = true;\n    private _resumeOnPause = true;\n    private _resumeOnPauseRetryInterval = 1000;\n    private _resumeOnPauseTimerId: any = null;\n    private _resumePromise: Nullable<Promise<void>> = null;\n    private _silentHtmlAudio: Nullable<HTMLAudioElement> = null;\n    private _unmuteUI: Nullable<_WebAudioUnmuteUI> = null;\n    private _updateObservable: Nullable<Observable<void>> = null;\n    private readonly _validFormats = new Set<string>();\n    private _volume = 1;\n\n    /** @internal */\n    public readonly _audioContext: AudioContext;\n\n    /** @internal */\n    public readonly _isUsingOfflineAudioContext: boolean = false;\n\n    /** @internal */\n    public readonly isReadyPromise: Promise<void> = new Promise((resolve) => {\n        this._resolveIsReadyPromise = resolve;\n    });\n\n    /** @internal */\n    public stateChangedObservable: Observable<string> = new Observable();\n\n    /** @internal */\n    public userGestureObservable: Observable<void> = new Observable();\n\n    /** @internal */\n    public constructor(options: Partial<IWebAudioEngineOptions> = {}) {\n        super(options);\n\n        if (typeof options.listenerAutoUpdate === \"boolean\") {\n            this._listenerAutoUpdate = options.listenerAutoUpdate;\n        }\n\n        if (typeof options.listenerMinUpdateTime === \"number\") {\n            this._listenerMinUpdateTime = options.listenerMinUpdateTime;\n        }\n\n        this._volume = options.volume ?? 1;\n\n        if (options.audioContext) {\n            this._isUsingOfflineAudioContext = options.audioContext instanceof OfflineAudioContext;\n            this._audioContext = options.audioContext;\n        } else {\n            this._audioContext = new AudioContext();\n        }\n\n        if (!options.disableDefaultUI) {\n            this._unmuteUI = new _WebAudioUnmuteUI(this, options.defaultUIParentElement);\n        }\n    }\n\n    /** @internal */\n    public async _initAsync(options: Partial<IWebAudioEngineOptions>): Promise<void> {\n        this._resumeOnInteraction = typeof options.resumeOnInteraction === \"boolean\" ? options.resumeOnInteraction : true;\n        this._resumeOnPause = typeof options.resumeOnPause === \"boolean\" ? options.resumeOnPause : true;\n        this._resumeOnPauseRetryInterval = options.resumeOnPauseRetryInterval ?? 1000;\n\n        document.addEventListener(\"click\", this._onUserGestureAsync);\n\n        await this._initAudioContextAsync();\n\n        if (_HasSpatialAudioListenerOptions(options)) {\n            this._listener = _CreateSpatialAudioListener(this, this._listenerAutoUpdate, this._listenerMinUpdateTime);\n            this._listener.setOptions(options);\n        }\n\n        this._resolveIsReadyPromise();\n    }\n\n    /** @internal */\n    public get currentTime(): number {\n        return this._audioContext.currentTime ?? 0;\n    }\n\n    /** @internal */\n    public get _inNode(): AudioNode {\n        return this._audioContext.destination;\n    }\n\n    /** @internal */\n    public get mainOut(): _WebAudioMainOut {\n        return this._mainOut;\n    }\n\n    /** @internal */\n    public get listener(): AbstractSpatialAudioListener {\n        return this._listener ?? (this._listener = _CreateSpatialAudioListener(this, this._listenerAutoUpdate, this._listenerMinUpdateTime));\n    }\n\n    /** @internal */\n    public get state(): AudioEngineV2State {\n        // Always return \"running\" for OfflineAudioContext so sound `play` calls work while the context is suspended.\n        return this._isUsingOfflineAudioContext ? \"running\" : this._audioContext.state;\n    }\n\n    /** @internal */\n    public get volume(): number {\n        return this._volume;\n    }\n\n    /** @internal */\n    public set volume(value: number) {\n        if (this._volume === value) {\n            return;\n        }\n\n        this._volume = value;\n\n        if (this._mainOut) {\n            this._mainOut.volume = value;\n        }\n    }\n\n    /**\n     * This property should only be used by the legacy audio engine.\n     * @internal\n     * */\n    public get _audioDestination(): AudioNode {\n        return this._destinationNode ? this._destinationNode : (this._destinationNode = this._audioContext.destination);\n    }\n\n    public set _audioDestination(value: Nullable<AudioNode>) {\n        this._destinationNode = value;\n    }\n\n    /**\n     * This property should only be used by the legacy audio engine.\n     * @internal\n     */\n    public get _unmuteUIEnabled(): boolean {\n        return this._unmuteUI ? this._unmuteUI.enabled : false;\n    }\n\n    public set _unmuteUIEnabled(value: boolean) {\n        if (this._unmuteUI) {\n            this._unmuteUI.enabled = value;\n        }\n    }\n\n    /** @internal */\n    public async createBusAsync(name: string, options: Partial<IAudioBusOptions> = {}): Promise<AudioBus> {\n        const module = await import(\"./webAudioBus\");\n\n        const bus = new module._WebAudioBus(name, this, options);\n        await bus._initAsync(options);\n\n        return bus;\n    }\n\n    /** @internal */\n    public async createMainBusAsync(name: string, options: Partial<IMainAudioBusOptions> = {}): Promise<MainAudioBus> {\n        const module = await import(\"./webAudioMainBus\");\n\n        const bus = new module._WebAudioMainBus(name, this);\n        await bus._initAsync(options);\n\n        return bus;\n    }\n\n    /** @internal */\n    public async createMicrophoneSoundSourceAsync(name: string, options?: Partial<ISoundSourceOptions>): Promise<AbstractSoundSource> {\n        let mediaStream: MediaStream;\n\n        try {\n            mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        } catch (e) {\n            throw new Error(\"Unable to access microphone: \" + e);\n        }\n\n        return await this.createSoundSourceAsync(name, new MediaStreamAudioSourceNode(this._audioContext, { mediaStream }), {\n            outBusAutoDefault: false,\n            ...options,\n        });\n    }\n\n    /** @internal */\n    public async createSoundAsync(\n        name: string,\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options: Partial<IStaticSoundOptions> = {}\n    ): Promise<StaticSound> {\n        const module = await import(\"./webAudioStaticSound\");\n\n        const sound = new module._WebAudioStaticSound(name, this, options);\n        await sound._initAsync(source, options);\n\n        return sound;\n    }\n\n    /** @internal */\n    public async createSoundBufferAsync(\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options: Partial<IStaticSoundBufferOptions> = {}\n    ): Promise<StaticSoundBuffer> {\n        const module = await import(\"./webAudioStaticSound\");\n\n        const soundBuffer = new module._WebAudioStaticSoundBuffer(this);\n        await soundBuffer._initAsync(source, options);\n\n        return soundBuffer;\n    }\n\n    /** @internal */\n    public async createSoundSourceAsync(name: string, source: AudioNode, options: Partial<ISoundSourceOptions> = {}): Promise<AbstractSoundSource> {\n        const module = await import(\"./webAudioSoundSource\");\n\n        const soundSource = new module._WebAudioSoundSource(name, source, this, options);\n        await soundSource._initAsync(options);\n\n        return soundSource;\n    }\n\n    /** @internal */\n    public async createStreamingSoundAsync(name: string, source: HTMLMediaElement | string | string[], options: Partial<IStreamingSoundOptions> = {}): Promise<StreamingSound> {\n        const module = await import(\"./webAudioStreamingSound\");\n\n        const sound = new module._WebAudioStreamingSound(name, this, options);\n        await sound._initAsync(source, options);\n\n        return sound;\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._listener?.dispose();\n        this._listener = null;\n\n        // Note that OfflineAudioContext does not have a `close` method.\n        if (this._audioContext.state !== \"closed\" && !this._isUsingOfflineAudioContext) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._audioContext.close();\n        }\n\n        document.removeEventListener(\"click\", this._onUserGestureAsync);\n        this._audioContext.removeEventListener(\"statechange\", this._onAudioContextStateChange);\n\n        this._silentHtmlAudio?.remove();\n\n        this._updateObservable?.clear();\n        this._updateObservable = null;\n\n        this._unmuteUI?.dispose();\n        this._unmuteUI = null;\n\n        this.stateChangedObservable.clear();\n    }\n\n    /** @internal */\n    public flagInvalidFormat(format: string): void {\n        this._invalidFormats.add(format);\n    }\n\n    /** @internal */\n    public isFormatValid(format: string): boolean {\n        if (this._validFormats.has(format)) {\n            return true;\n        }\n\n        if (this._invalidFormats.has(format)) {\n            return false;\n        }\n\n        const mimeType = FormatMimeTypes[format];\n        if (mimeType === undefined) {\n            return false;\n        }\n\n        const audio = new Audio();\n        if (audio.canPlayType(mimeType) === \"\") {\n            this._invalidFormats.add(format);\n            return false;\n        }\n\n        this._validFormats.add(format);\n\n        return true;\n    }\n\n    /** @internal */\n    public override async pauseAsync(): Promise<void> {\n        await this._audioContext.suspend();\n\n        this._pauseCalled = true;\n    }\n\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    public override resumeAsync(): Promise<void> {\n        this._pauseCalled = false;\n\n        if (this._resumePromise) {\n            return this._resumePromise;\n        }\n\n        this._resumePromise = this._audioContext.resume();\n        return this._resumePromise;\n    }\n\n    /** @internal */\n    public setVolume(value: number, options: Nullable<Partial<IAudioParameterRampOptions>> = null): void {\n        if (this._mainOut) {\n            this._mainOut.setVolume(value, options);\n        } else {\n            throw new Error(\"Main output not initialized yet.\");\n        }\n    }\n\n    /** @internal */\n    public override _addMainBus(mainBus: MainAudioBus): void {\n        super._addMainBus(mainBus);\n    }\n\n    /** @internal */\n    public override _removeMainBus(mainBus: MainAudioBus): void {\n        super._removeMainBus(mainBus);\n    }\n\n    /** @internal */\n    public override _addNode(node: AbstractNamedAudioNode): void {\n        super._addNode(node);\n    }\n\n    /** @internal */\n    public override _removeNode(node: AbstractNamedAudioNode): void {\n        super._removeNode(node);\n    }\n\n    /** @internal */\n    public _addUpdateObserver(callback: () => void): void {\n        if (!this._updateObservable) {\n            this._updateObservable = new Observable<void>();\n        }\n\n        this._updateObservable.add(callback);\n        this._startUpdating();\n    }\n\n    public _removeUpdateObserver(callback: () => void): void {\n        if (this._updateObservable) {\n            this._updateObservable.removeCallback(callback);\n        }\n    }\n\n    private _initAudioContextAsync: () => Promise<void> = async () => {\n        this._audioContext.addEventListener(\"statechange\", this._onAudioContextStateChange);\n\n        this._mainOut = new _WebAudioMainOut(this);\n        this._mainOut.volume = this._volume;\n\n        await this.createMainBusAsync(\"default\");\n    };\n\n    private _onAudioContextStateChange = () => {\n        if (this.state === \"running\") {\n            clearInterval(this._resumeOnPauseTimerId);\n            this._audioContextStarted = true;\n            this._resumePromise = null;\n        }\n        if (this.state === \"suspended\" || this.state === \"interrupted\") {\n            if (this._audioContextStarted && this._resumeOnPause && !this._pauseCalled) {\n                clearInterval(this._resumeOnPauseTimerId);\n\n                this._resumeOnPauseTimerId = setInterval(() => {\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this.resumeAsync();\n                }, this._resumeOnPauseRetryInterval);\n            }\n        }\n\n        this.stateChangedObservable.notifyObservers(this.state);\n    };\n\n    private _onUserGestureAsync: () => void = async () => {\n        if (this._resumeOnInteraction) {\n            await this._audioContext.resume();\n        }\n\n        // On iOS the ringer switch must be turned on for WebAudio to play.\n        // This gets WebAudio to play with the ringer switch turned off by playing an HTMLAudioElement.\n        if (!this._silentHtmlAudio) {\n            this._silentHtmlAudio = document.createElement(\"audio\");\n\n            const audio = this._silentHtmlAudio;\n            audio.controls = false;\n            audio.preload = \"auto\";\n            audio.loop = true;\n\n            // Wave data for 0.0001 seconds of silence.\n            audio.src = \"data:audio/wav;base64,UklGRjAAAABXQVZFZm10IBAAAAABAAEAgLsAAAB3AQACABAAZGF0YQwAAAAAAAEA/v8CAP//AQA=\";\n\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            audio.play();\n        }\n\n        this.userGestureObservable.notifyObservers();\n    };\n\n    private _resolveIsReadyPromise: () => void;\n\n    private _startUpdating = () => {\n        if (this._isUpdating) {\n            return;\n        }\n\n        this._isUpdating = true;\n\n        if (this.state === \"running\") {\n            this._update();\n        } else {\n            const callback = () => {\n                if (this.state === \"running\") {\n                    this._update();\n                    this.stateChangedObservable.removeCallback(callback);\n                }\n            };\n\n            this.stateChangedObservable.add(callback);\n        }\n    };\n\n    private _update = (): void => {\n        if (this._updateObservable?.hasObservers()) {\n            this._updateObservable.notifyObservers();\n            requestAnimationFrame(this._update);\n        } else {\n            this._isUpdating = false;\n        }\n    };\n}\n", "import type { Analyser } from \"./analyser\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport { _WebAudioEngine } from \"../AudioV2/webAudio/webAudioEngine\";\r\n\r\n// Sets the default audio engine to Babylon.js\r\nAbstractEngine.AudioEngineFactory = (\r\n    hostElement: Nullable<HTMLElement>,\r\n    audioContext: Nullable<AudioContext>,\r\n    audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode>\r\n) => {\r\n    return new AudioEngine(hostElement, audioContext, audioDestination);\r\n};\r\n\r\n/**\r\n * This represents the default audio engine used in babylon.\r\n * It is responsible to play, synchronize and analyse sounds throughout the  application.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n */\r\nexport class AudioEngine implements IAudioEngine {\r\n    private _audioContext: Nullable<AudioContext> = null;\r\n    private _masterGain: GainNode;\r\n    private _tryToRun = false;\r\n    private _useCustomUnlockedButton: boolean = false;\r\n\r\n    /**\r\n     * Gets whether the current host supports Web Audio and thus could create AudioContexts.\r\n     */\r\n    public canUseWebAudio: boolean = true;\r\n\r\n    /**\r\n     * The master gain node defines the global audio volume of your audio engine.\r\n     */\r\n    public get masterGain(): GainNode {\r\n        return this._masterGain;\r\n    }\r\n\r\n    public set masterGain(value: GainNode) {\r\n        this._masterGain = this._v2.mainOut._inNode = value;\r\n    }\r\n\r\n    /**\r\n     * Defines if Babylon should emit a warning if WebAudio is not supported.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public WarnedWebAudioUnsupported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether or not mp3 are supported by your browser.\r\n     */\r\n    public isMP3supported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether or not ogg are supported by your browser.\r\n     */\r\n    public isOGGsupported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether audio has been unlocked on the device.\r\n     * Some Browsers have strong restrictions about Audio and won't autoplay unless\r\n     * a user interaction has happened.\r\n     */\r\n    public unlocked: boolean = false;\r\n\r\n    /**\r\n     * Defines if the audio engine relies on a custom unlocked button.\r\n     * In this case, the embedded button will not be displayed.\r\n     */\r\n    public get useCustomUnlockedButton(): boolean {\r\n        return this._useCustomUnlockedButton;\r\n    }\r\n\r\n    public set useCustomUnlockedButton(value: boolean) {\r\n        this._useCustomUnlockedButton = value;\r\n        this._v2._unmuteUIEnabled = !value;\r\n    }\r\n\r\n    /**\r\n     * Event raised when audio has been unlocked on the browser.\r\n     */\r\n    public onAudioUnlockedObservable = new Observable<IAudioEngine>();\r\n\r\n    /**\r\n     * Event raised when audio has been locked on the browser.\r\n     */\r\n    public onAudioLockedObservable = new Observable<IAudioEngine>();\r\n\r\n    /** @internal */\r\n    public _v2: _WebAudioEngine;\r\n\r\n    /**\r\n     * Gets the current AudioContext if available.\r\n     */\r\n    public get audioContext(): Nullable<AudioContext> {\r\n        if (this._v2.state === \"running\") {\r\n            // Do not wait for the promise to unlock.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._triggerRunningStateAsync();\r\n        }\r\n        return this._v2._audioContext;\r\n    }\r\n\r\n    private _connectedAnalyser: Nullable<Analyser>;\r\n\r\n    /**\r\n     * Instantiates a new audio engine.\r\n     *\r\n     * @param hostElement defines the host element where to display the mute icon if necessary\r\n     * @param audioContext defines the audio context to be used by the audio engine\r\n     * @param audioDestination defines the audio destination node to be used by audio engine\r\n     */\r\n    constructor(\r\n        hostElement: Nullable<HTMLElement> = null,\r\n        audioContext: Nullable<AudioContext> = null,\r\n        audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode> = null\r\n    ) {\r\n        const v2 = new _WebAudioEngine({\r\n            audioContext: audioContext ? audioContext : undefined,\r\n            defaultUIParentElement: hostElement?.parentElement ? hostElement.parentElement : undefined,\r\n        });\r\n\r\n        // Historically the unmute button is disabled until a sound tries to play and can't, which results in a call\r\n        // to `AudioEngine.lock()`, which is where the unmute button is enabled if no custom UI is requested.\r\n        v2._unmuteUIEnabled = false;\r\n\r\n        this._masterGain = new GainNode(v2._audioContext);\r\n        v2._audioDestination = audioDestination;\r\n\r\n        v2.stateChangedObservable.add((state) => {\r\n            if (state === \"running\") {\r\n                this.unlocked = true;\r\n                this.onAudioUnlockedObservable.notifyObservers(this);\r\n            } else {\r\n                this.unlocked = false;\r\n                this.onAudioLockedObservable.notifyObservers(this);\r\n            }\r\n        });\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n        v2._initAsync({ resumeOnInteraction: false }).then(() => {\r\n            v2.mainOut._inNode = this._masterGain;\r\n            v2.stateChangedObservable.notifyObservers(v2.state);\r\n        });\r\n\r\n        this.isMP3supported = v2.isFormatValid(\"mp3\");\r\n        this.isOGGsupported = v2.isFormatValid(\"ogg\");\r\n\r\n        this._v2 = v2;\r\n    }\r\n\r\n    /**\r\n     * Flags the audio engine in Locked state.\r\n     * This happens due to new browser policies preventing audio to autoplay.\r\n     */\r\n    public lock() {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._v2._audioContext.suspend();\r\n\r\n        if (!this._useCustomUnlockedButton) {\r\n            this._v2._unmuteUIEnabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unlocks the audio engine once a user action has been done on the dom.\r\n     * This is helpful to resume play once browser policies have been satisfied.\r\n     */\r\n    public unlock() {\r\n        if (this._audioContext?.state === \"running\") {\r\n            if (!this.unlocked) {\r\n                // Notify users that the audio stack is unlocked/unmuted\r\n                this.unlocked = true;\r\n                this.onAudioUnlockedObservable.notifyObservers(this);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._triggerRunningStateAsync();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resumeAudioContextOnStateChange(): void {\r\n        this._audioContext?.addEventListener(\r\n            \"statechange\",\r\n            () => {\r\n                if (this.unlocked && this._audioContext?.state !== \"running\") {\r\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                    this._resumeAudioContextAsync();\r\n                }\r\n            },\r\n            {\r\n                once: true,\r\n                passive: true,\r\n                signal: AbortSignal.timeout(3000),\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _resumeAudioContextAsync(): Promise<void> {\r\n        if (this._v2._isUsingOfflineAudioContext) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this._v2._audioContext.resume();\r\n    }\r\n\r\n    /**\r\n     * Destroy and release the resources associated with the audio context.\r\n     */\r\n    public dispose(): void {\r\n        this._v2.dispose();\r\n\r\n        this.onAudioUnlockedObservable.clear();\r\n        this.onAudioLockedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Gets the global volume sets on the master gain.\r\n     * @returns the global volume if set or -1 otherwise\r\n     */\r\n    public getGlobalVolume(): number {\r\n        return this.masterGain.gain.value;\r\n    }\r\n\r\n    /**\r\n     * Sets the global volume of your experience (sets on the master gain).\r\n     * @param newVolume Defines the new global volume of the application\r\n     */\r\n    public setGlobalVolume(newVolume: number): void {\r\n        this.masterGain.gain.value = newVolume;\r\n    }\r\n\r\n    /**\r\n     * Connect the audio engine to an audio analyser allowing some amazing\r\n     * synchronization between the sounds/music and your visualization (VuMeter for instance).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\r\n     * @param analyser The analyser to connect to the engine\r\n     */\r\n    public connectToAnalyser(analyser: Analyser): void {\r\n        if (this._connectedAnalyser) {\r\n            this._connectedAnalyser.stopDebugCanvas();\r\n        }\r\n\r\n        this._connectedAnalyser = analyser;\r\n        this.masterGain.disconnect();\r\n        this._connectedAnalyser.connectAudioNodes(this.masterGain, this._v2._audioContext.destination);\r\n    }\r\n\r\n    private async _triggerRunningStateAsync() {\r\n        if (this._tryToRun) {\r\n            return;\r\n        }\r\n        this._tryToRun = true;\r\n\r\n        await this._resumeAudioContextAsync();\r\n\r\n        this._tryToRun = false;\r\n        this.unlocked = true;\r\n\r\n        this.onAudioUnlockedObservable.notifyObservers(this);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
