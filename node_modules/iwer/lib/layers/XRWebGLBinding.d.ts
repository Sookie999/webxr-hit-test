/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { XRSession } from '../session/XRSession.js';
type XRWebGLBindingInit = {
    antialias?: boolean;
    depth?: boolean;
    stencil?: boolean;
    alpha?: boolean;
    ignoreDepthValues?: boolean;
    framebufferScaleFactor?: number;
};
type XRProjectionLayerInit = {
    colorFormat?: number;
    depthFormat?: number;
    scaleFactor?: number;
    textureType?: string;
    layout?: string;
};
/**
 * XRProjectionLayer implementation that mimics the behavior of XRWebGLLayer
 * but with the projection layer API surface.
 */
declare class XRProjectionLayer {
    private context;
    private _fixedFoveation;
    constructor(_session: XRSession, context: WebGLRenderingContext | WebGL2RenderingContext, _init?: XRProjectionLayerInit);
    /**
     * Texture width - maps to XRWebGLLayer.framebufferWidth
     */
    get textureWidth(): number;
    /**
     * Texture height - maps to XRWebGLLayer.framebufferHeight
     */
    get textureHeight(): number;
    /**
     * Ignore depth values - matches XRWebGLLayer behavior
     */
    get ignoreDepthValues(): boolean;
    /**
     * Fixed foveation setting
     */
    get fixedFoveation(): number;
    set fixedFoveation(value: number);
    /**
     * Layout type for the projection layer
     */
    get layout(): string;
    /**
     * Blend texture source alpha
     */
    get blendTextureSourceAlpha(): boolean;
    /**
     * Chromatic aberration correction
     */
    get chromaticAberrationCorrection(): boolean;
}
/**
 * XRWebGLBinding provides methods to create WebGL resources
 * that are compatible with WebXR rendering.
 *
 * This implementation provides a polyfill that ensures three.js r179+
 * gets the same behavior as the XRWebGLLayer fallback path.
 */
export declare class XRWebGLBinding {
    private session;
    private context;
    constructor(session: XRSession, context: WebGLRenderingContext | WebGL2RenderingContext, _layerInit?: XRWebGLBindingInit);
    /**
     * Creates a projection layer that behaves exactly like XRWebGLLayer
     * but with the projection layer API surface that three.js r179+ expects.
     */
    createProjectionLayer(init?: XRProjectionLayerInit): XRProjectionLayer;
    /**
     * Gets the viewport for a given view and layer.
     * This is used by three.js for sub-image rendering.
     */
    getViewSubImage(_layer: any, _view: any): any;
    /**
     * Gets a depth sub-image for the given layer and view.
     */
    getDepthSubImage(_layer: any, _view: any): any;
    /**
     * Gets the native framebuffer scale factor.
     */
    static getNativeFramebufferScaleFactor(session: XRSession): number;
}
export {};
//# sourceMappingURL=XRWebGLBinding.d.ts.map